The Vigilante

Hello, Greetings, Salutations, etc,
Well, its finally here.  The latest chapter of The Vigilante.
Please forgive me for the horrendous delay but I've been trying.

Following are as far as I know the latest versions of all previous
chapters of my epic master piece.  Along with the newest.
I've tried to atleast spell check the thing, so at least that much is
right.  As for continuity, flow, readability, wellll, I don't
think its too bad, but I've been looking at it tooo much lately.

I am *VERY* interested in any and all comments.  Please
let me know what you like, don't like, have trouble following etc.
I am receptive to all feed back.  also knowing people are reading
my stuff keeps me writing.

If there are any major flow errors please let me know,
even send the offending portion, I had to recover a
large portion from a major disk failure and may have
lost some portions.

For those not familure with the Vigilante, it is
a work in process,(has been for over a year now)
It is a Star Trek the Next Generation Universe story
but follows a different ship and crew.  The Big E
and gang only make cameo appearences.

I hope you enjoy it and I hope to work on and maybe even
finish the last chapter, VI "Full Circle" some time this year.

Larry
1160 Boyer Rd
Erie, Pa 16511

len101@psuvm.psu.edu
The following is a ST:TNG universe story, all rights reserved.
Permission is granted to copy and distribute to anybody
free of charge.  If anybody includes in in a Fanzine or anything,
just let me know and send me a copy.  and of course always include
this header or a better version of it :)

Standard disclaimers apply,
All Poetry taken from the _Collected Works of Robert Service_
without permission but great respect

Larry
---------
Lawrence Nagy
1160 Boyer Rd
Erie PA 16511


as always, any feedback, comments, discussion, money, uncancled non-US
postage stamps are always welcome and appreciated.


                  T H E   V I G I L A N T E

                              I

                        "The Drawing"



Have ever you heard of the Land of Beyond,
    That dreams at the gates of the day?
Alluring it lies at the skirts of the skies,
    and ever so far away;
Alluring it calls: O ye the yoke galls,
    and ye of the trail overfond,
With saddle and pack, by paddle and track,
    Let's go to the land of beyond!
                                   ....
                        Robert Service
                        "THE LAND OF BEYOND"






    The Tau-Epsilon star system was remote even by Star Fleet
standards, of course this was one of the reasons it was
chosen.  It was also a very crowded system with twelve
planets and 6 different asteroid belts.  The five innermost
planets were 'rocks' with the rest being gas giants.  The
system also had a very uneven planetary plane making the
inner planets a little bit more difficult to approach.
    The fourth planet from the yellow Tau-Epsilon sun had a
barely breathable atmosphere.  In years past there had been a
small mining operation on the planet but it had been
abandoned for a more profitable system.  The habitats left
behind, however, had made a great base camp for the project
now nearing completion.
    Star Fleet didn't normally make a habit of constructing a
star ship in such a remote location.  This ship, however, was
extremely unique not only in its design but also in its
mission.
    The flat black of the space dock girders hung in a close
orbit around TE-4.  Inside the frame work was a truly
different star ship.  The large saucer section and warp
engines made it unmistakably Star Fleet.  The saucer section
was obviously old, even the lowest cadet at the academy would
know that it shouldn't be tied to the new style warp engines
especially four of them.  There were a number other things
that a trained eye would pick out wrong with this ship.  Some
that shouldn't be on a saucer section that old and others
that simply were not Star Fleet standard.
    Along the girders were a number of prefabricated
buildings.  All habitats for the workers and equipment were
contained in the buildings set up along the girders.  These
accommodations would normally be provided for either planet
side or in a nearby space station.  That, however, was quite
impractical here.  Once the space dock was completed the
workers were grateful to be away from the old mining
habitats.  The VE-4 space dock had become a self contained
world with but one purpose, build the ship.
    Most of the construction and workers were no longer
visible as they had moved inside the ship to make it space
worthy.  A few white suited workers could be seen along the
girders and in and around the ship tying up loose ends.
    Standing alone barely noticeable against the black of the
girders and the continuous night about them was a lone figure
in a black pressure suit.  As construction neared completion
the man came and stood here more often, staring at the ship.
    Captain Anthony watched his ship near completion, and
thought of the mission ahead, it was suicide by it's very
nature.  This, however, hadn't deterred him from accepting
command.  It also didn't have an effect on volunteers to crew
the ship even though no one knew the ship, its name its
design or its mission.  All that was known was that it was
extremely hazardous duty with only single, unattached and
experienced personnel considered for duty.

    Anthony glanced down at the displays in his helmet, the
Enterprise should be arriving soon he thought, it had entered
the system just before he had stepped out.  The security for
the sector and the system was extremely tight.  The
Enterprise would approach so as always to have TE-4 between
it and the Space Dock.  The fewer people who saw the ship or
even knew about it the better.  The consequences of
information falling into the wrong hands Picard and the
officers of the Enterprise knew all too well.
    This is why Enterprise was the only ship that visited
TE-4.  It is also why there were no records being kept of the
visits and the sensors were never used to check the
construction site.  Simple beacons and indirect
communications were the only proof the Enterprise had that
anything was here at all.  The only reason Picard went along
with this was that he knew the basic, ultimate mission of
what ever was happening here, that was enough.

----------

    "Sir, approaching minimum distance to beacon signal." A
young navigator said as the Enterprise entered orbit about
the barren TE-4.
    "Thank you, Ensign" said Captain Picard.  He then turned
to his first officer and said "Number one, inform our guests
to gather their belongings and report to their designated
transporter....."
    The navigator pushed a strand of her red hair off her
forehead and stared at the planet on the view screen.  In the
background she could hear the conversation of the bridge
crew, however unless she picked up something pertaining to
her or her job she just filtered the noise out.
    Ensign O'Malley was a dreamer and self proclaimed
romantic.  She was born on the feral colony on Vega-5 and
adopted when she was twelve by Doctor Peter O'Malley.  The
ships physician of the first star ship to visit V-5 in over
200 years.  Many of the warlords of V-5 rejected Star Fleet
claiming the colony was settled before the current Federation
charter was signed, therefore, they were protected by the
Prime Directive.  After months of negotiations Star Fleet
finally pulled out, but not before little Janice had been
adopted.
    She had been on board the Enterprise for quite some time
but rarely worked with top bridge crew.  Her normal shift was
usually second or third by the ships schedule.  The only
times she worked with them was in special situations when the
captain's presence was required during her shift or an
emergency arrived.  The only problem was that during
emergencies she was usually relieved for the more experienced
first shift navigator.  This was one of those rare occasions
when something important enough was happening during her
shift to bring the Captain out of his hole but not important
enough for them to bring the whole first shift crew to the
bridge.
    Janice O'Malley always dreamed of what lay just out of
sight.  She had that desire to open a closed door, turn just
one more corner, to look to the other side of the horizon.
This caused great conflict in her during these missions, she
greatly wished to conjecture to her shipmates her ideas as to
what was on the other side of this horizon.  However, for
security reasons all talk on the subject was prohibited.
    During the first trip to the system Ensign O'Malley had
noticed that the automatic navigation log had been disengaged
prior to her shift.  When she brought this up with the
officer of the shift he reminded her of the no record order
by Star Fleet and all automatic logs had been deactivated.
It was highly stressed that no one should talk about or enter
personal logs that revealed any details of the mission.

----------

    Standing along the corridors of one of the lower decks
was a long line of assorted Star Fleet personnel with bags
packed and mostly looks of irritation.  They had been
relegated to one small (comparatively) area of the ship, then
basically quarantined.  The regular personnel had no contact
with them and they were not permitted in other parts of the
ship without an escort.  Even though the need for extreme
security was carefully laid out to them there was still
enough complaining from a few to make the whole lot start
feeling discontentment.

    "I can't believe it, they keep us holed up in one area of
this enormous ship for the whole trip than they don't even
have the decency to use all of their transporters to get us
out of here quickly.  Its like first they don't want us here
than they don't want us to leave." The man sounding off was
one of the usual complainers.  He was a large, barrel shaped,
bearded human who was apparently some sort of expert in
weaponry but no one was quite sure since he boasted
proficiency in just about everything.
    "Mr Dolittel, why don't you bless us with your silence
for once.  We're finally getting somewhere and we still must
listen to you babble on."  The speaker was about ten places
down the hall from Dolittel.  She was a dark skinned humanoid
who could look Dolittel square in the chest.   She was slim
and well proportioned compared to a human female and wore the
yellow uniform and insignia of security.  She was not tall by
any means but was well muscled.  She had a high forehead
reminiscent of a Klingon but wasn't one.  Her long black hair
was pulled into a braid and hung down the middle of her back.
    "Commander Tarva, Sir, I didn't see you there." Dolittel
mumbled and turned back toward the transporter room.
Dolittel's griping had come to a halt, at least for a while.
    Tarva stood patiently with her satchel at her feet.  Her
stance was a classic military at-ease posture.  Though a Star
Fleet Academy alumni her up bringing and background on her
home-world was very strict military.  It was this strict
military background that helped her move quickly up through
the pseudo-military Star Fleet.
    She could hear the constant hum of the transporters in
the room ahead as the line slowly moved forward.  Suspicious
by nature and profession she could not help but feel they
were lined up like 'algots going to the slaughter'.

----------

    As the Enterprise's transporter room dissolved around
her, a new one took its place.  The room was extremely large
maybe ten times the size of Enterprise's if not larger.  Her
background immediately showed it self again as she figured
one could transport nearly a whole Kalonian battalion at one
time from here.
    "I told you, they could have transported us here in a
quarter of the time if they wanted to." of course Dolittel
would be the first thing she'd hear upon arrival.
    Standing in front of the control panel for this section
of the transporter was a average hight, slightly balding
human with long, black-gray hair pulled back in a pony tail.
The man was wearing a loose fitting black uniform with no
visible sign of rank but some standard Star Fleet insignia.
The uniform had several large pockets on the jacket and more
on the pants, even on the lower parts of the legs.
    The shoes seemed out of place with the obvious utility of
the uniform, they were soft low cut with a sole that could
barely be described as firm.  It occurred to Tarva that these
were not standard for the uniform but were in fact boot
liners for a pressure suit.  The realization made her smile
and think "I'm going to like this man".
    A man in white coveralls of a construction worker stepped
forward and asked for their I.D. cards.  These he handed to
the man in the black uniform.  The man looked at each card
and though it was obvious he had done this with every person
who had come aboard he still actually read at least the name
on each card.  It was not as if he were looking for someone,
it was as if he were trying to match everybody's name and
face the first time by.
    "Welcome aboard" he said as he handed the cards back to
the man in the coveralls.  "I'm Captain Anthony," the hum of
another portion of the large transporter could be heard next
to them. "please follow this gentleman he'll show you to your
quarters.  Be patient, this ship is still under construction,
some things aren't working yet and your also going to have to
share quarters with more personnel than they were designed
for until others are ready".  As they gathered their
belongings and stepped off the transporter a woman in white
coveralls asked the new arrivals on the other transporter for
their I.D. cards.
    "Commander Tarva." the captain said as Tarva turned to
exit with her group.
    "Yes, Sir." she said facing the captain and coming to
attention.
    "Please report back here after you get settled."
    "Yes, Sir." she repeated as the captain turned his
attention to the new batch of I.D. cards, the transporter pad
she was just on hummed with new arrivals.  Many people would
have thought Captain Anthony rude with them or at least curt.
Not Tarva, her only impression was that this man was
extremely busy.
    Too much was happening around Tarva for her to fully
appreciate it.  Workers in different styles of the white
coveralls worked all around, bunches of optical cord hung
from open ceiling panels, sparks flew from welding
torches..still under construction was an understatement.
    Tarva also thought of the captain's order, to report to
him as soon as she was 'settled'.  She wasn't quite sure how
soon this man expected her, she'd just have to do things one
at a time.  The first would be to unpack then find her way
back to the transporter room.  She still couldn't help
wondering what the Captain wanted with her, perhaps he had an
assignment for her.  It would have to be important to signal
her out, perhaps Chief of Security.  This wasn't too much to
expect since she was Chief of Security on the Eclipse.  Even
if it was an escort ship it was still a responsible position.
What ever it was, it had to be one of the top security
positions, her background was too extensive to be simply
standing guard on the transporter room.
    A cabin door slid open and the man in white said that
there was room for one more in these quarters. "and remember"
he said "these are just temporary until the rest are
completed."  Somehow, Tarva found herself standing at the
front of her group, so she stepped in.

    "Do you believe this, they have eight of us crammed into
what is obviously meant for four.  This is a freaking
enlisted barracks.  What kind of chicken outfit is this
anyway?"  The all too familiar voice came from what was
apparently the head.
    Tarva walked over to the one bunk that was slightly
separated from the rest, it was, without a doubt, the prime
real estate of the room.  All other occupants were at their
own bunks, the only other empty one was a built in top bunk,
the least desirable in the room.  Tarva picked up the
equipment already on her bunk of choice and dropped it in the
middle of the room and put her own in its place.  The other
occupants in the room were Dolittel's regular companions but
they said nothing, just did their best to ignore her.
    A chime sounded on one of the walls and a name appeared
on a computer screen.  "That's mine." one of her room mates
said and got up to retrieve a stack of folded black cloth
from a drawer that came out of the wall as he approached.  He
then joined Dolittel in the head.
    "What's that?" She asked, somebody had to say something
eventually.
    In response, a tall blonde haired woman sitting on the
far side of the room tossed Tarva a laminated card.

Welcome aboard the U.S.S. Vigilante.

--- There will be a mandatory meeting for all personnel at
    0830 in shuttle bay 1.  This should give all a chance to
    get settled.  All crew assignments will be handed out at
    this time.

--- Ship's uniforms are available from the replicators in
    each room, just program required size.  Standard Star
    Fleet issue boots are appropriate. (a slight wait may be
    necessary, full power is currently not on line)

--- Please make yourself as comfortable as possible,
    as soon as more quarters are finished they will be
    assigned.

Tarva checked her time piece, 0600, they had plenty of time
to get the whole crew over from the Enterprise even at the
current rate.
    "Who put my stuff in the middle of the floor?!" Dolittel
bellowed as he emerged from the head wiping water from his
face with a small towel.  He was already wearing a black
uniform identical to what the captain had.  His shoulders
filled the doorway and his hair brushed against the top of
the frame.  His gaze then shifted to the bunk he had claimed
with his gear.
    Tarva smiled slightly and said "I honestly think you'll
be more comfortable on one of the regular beds, these
temporary cots are quite lumpy".
    Dolittel looked at his friends and, for a moment, it
seemed as if he would stand up to Tarva.  Instead he picked
up his bags and threw them up on the empty bunk.  "What are
you doing here, Sir?" he said to Tarva.
    "Everyone must make sacrifices, Mr. Dolittel." She
responded.  Then said "Computer".
    "WORKING" replied the generic female voice.
    "Commander Tarva requesting complete ship's uniform" she
then gave size and other particulars.
    "Your going to have a wait we've all placed our orders
and only two have come back so far." said the tall blonde.
    Just then the chime rang again and another of the gang
said that it must be his.  As he approached the drawer he
looked at the screen and saw Tarva's name flashing.  "This
things fouled up." he said "It says here it's the Commander's
stuff." and gestured toward Tarva.  He held up the pants they
were too small for anybody in the room except for Tarva.
    "Thank you." she said and took the bundle to the head.
She stood in the door way looking inside.  The crew member
who had just went in to change came out immediately.  He was
half dressed and wore only the baggy uniform pants and black
tank top type under shirt.  The rest of his uniforms he had
obviously gathered quickly and had them bunched under one
arm.
    "There's got to be some mistake, this thing's got the
rest of us qued up in the same sequence we placed our
orders." said the Lieutenant by the replicator.
    "Typical of this place," said Dolittel "even the computer
doesn't know what the hell it's doin'.  But don't worry, I'll
get things straightened around soon as they let me get to
work."

    Tarva stood in the restroom in front of a full length
mirror her yellow standard uniform lay in a pile near her
feet.  She looked at herself in the mirror.  All she was
wearing was a tight black tank top and matching mid-thigh
shorts.  On her right shin was strapped a black sheathed
knife, with what appeared to be a bone handle and flat black
blade, obviously not regulation.  She studied the scars
visible on her shoulder, arms and lower legs.  Many a human
doctor had offered to remove the scars for her but none
seemed to comprehend the pride she took in them and the
battles they represented.
    She looked closely at her left cheek and neck, there was
a fine line, were a scar should be, extending from above her
left eye down her cheek and neck to her shoulder.  An over
zealous human doctor had meticulously repaired this wound.
For all the years humans had been in space, they still
treated all cultures by human values.  It had never occurred
to him that a Kalonian would view a scar such as this
differently than a human.  She, however, couldn't feel too
bad towards the doctor since he served on the star ship that
rescued her from the escape pod after the Eclipse was
destroyed.

    Commander Tarva had been aboard the USS Vigilante exactly
30 minutes when she walked into Transporter Room II to report
back to Captain Anthony.  The room was empty of new personnel
only the captain and the workers were there.  Most of the
workers were busily doing something with both the transporter
pads and the control panel.  Captain Anthony looked concerned
as he studied the output on a tricorder a skinny man in a
white uniform was showing him.
    Anthony looked up at Tarva as she walked in and smiled at
her.  "Welcome back Commander," he said "I hope you found
your quarters acceptable for the time being".
    "I don't expect I'll be spending a lot of time there,
will I?" she said as she walked up to him and stood at
attention.
    "Commander, as you may have suspected, my current staff
is quite slim, in fact before today I was the only crew
assigned to the Vigilante to arrive.  That leaves me in the
unique position of selecting my own staff out of a relatively
small pool of volunteers.
    "I have gone over the records of all personnel assigned
to the Vigilante and personally selected the assignments for
each crew member.  Most decisions were easy, someone is a
navigator or an engineer, they have specific rank and
basically fall into place.  Top command staff is never that
easy, however, Chief Engineer, Chief of Security and others
require a little more intuitive thought." He paused to check
the skinny man's tricorder again.
    "This is it," Tarva thought, "he wouldn't be telling me
all of this if I wasn't getting Chief of Security."
    "The reason I'm telling you this" he said turning his
attention back to her, "is that I had a difficult choice to
make for Chief of Security.  A man named Simon Norton is
boarding as soon as we get this thing fixed.  He's been head
of security on three different Star Ships most recently on
a Galaxy Class which he is giving up to volunteer for this
mission.  I know this man, he has no desire for any other
command position.  He is one of the best when it comes to
security."
    Tarva could feel her world shaking, she had been so sure
of getting the position, it never occurred to her that
someone with such credentials would volunteer for a blind
suicide mission like this was rumored to be.
    "I know this may be slightly disappointing to you
Commander." this was a major understatement and he seemed to
know it.  "I couldn't, however, put someone with your record
and diverse background in an ordinary position. That is why I
have chosen you as my First Officer.  Congratulations."
    "Thank you, Sir." she managed to utter in complete shock.
He had done this on purpose, set her up for the fall pushed
her over the edge, then caught her at the last millisecond.
This man had a vicious sense of humor, she was going to
really enjoy working with him.
    "Now Commander we have work to do.  One of the positions
I haven't filled yet is Chief Engineer we have several
qualified personnel," Captain Anthony pointed to the mess
around them in a sweeping gesture "I suppose now is as good a
time as any to make that decision.  Your first assignment
will be to get this mess working and give me a call when your
ready to continue the transfer process."
    "Sir, why doesn't the Enterprise just transport the
remainders?" Tarva asked as she took in the whole transporter
room.
    "In order to keep the minimum distance we need the power
of both transporters and these two pads are the only ones on
this ship that currently work.  Now decide on a Chief
Engineer and get this thing working.  We've got to have it
working by 0700 if everybody's going to make the meeting."
with that, Captain Anthony left the room with eight white
coveralled workmen looking at Tarva.
    Before the door had slid completely shut First Officer
Tarva's hand was on the intercom "Lieutenant Commander
Dolittel, report to Transporter Room Two immediately".

----------

    Transporter Room II was soon filled with Tarva's
roommates plus a few others.  Dolittel's feet stuck out from
an open, access panel under the transporter pad.  His cursing
could be heard across the room.  He slid himself out and sat
up.
    "What the hell is this thing?" he said "I've never seen
circuits like this."
    "It is state of the art in transporter technology." came
a woman's voice from an open transporter room door.  She was
a medium height brown haired humanoid.  A slight ridge along
her upper cheek bones making her eyes appear sunken was the
only obvious nonhuman feature. She wore the standard white
coveralls of the other construction workers.
    "Doctor Cembera, I should have known you were behind this
mess."  Said Dolittel as he stood to greet the new arrival.
"If this thing is your doing, where have you been while we've
been trying to get it back on line?"
    "I was detained in engine room one installing a new style
dilithium crystal chamber." she said as she approached the
troublesome transporter pad.  She then turned to Commander
Tarva who had been running diagnostics at the transporter
control panel.  "First Officer Tarva, I'm Crystal Cembera
chief engineer in charge of construction of the Vigilante.
I'm glad you were finally able to join us here at TE-4."
    "I'm glad to finally be here." Said Tarva "Now if you
could help my Chief Engineer get these things on line."
    Doctor Cembera looked at Dolittel with a slight grin and
said "That shouldn't be too hard".
    Dolittel and Cembera obviously had a history but this
didn't seem to stop her from ignoring Dolittel as easily as
everybody else did.
    Doctor Cembera started running a diagnostic on the
transporter while pointing out certain details of the new
technology to Dolittel.  "The main idea is to boost the
effective range three to four times."
    "This is a great step forward", Dolittel said "you've got
the largest transporter room mockup I've ever seen".
    "The next supply ship should have the parts we need to
get all three transporter rooms working properly." Doctor
Cembera said ignoring Dolittel's comment's "The technology is
so new, it's taking quite a while to get the chips made."
    "Then how in the world did you get these two pads to work
if your still waiting on the chips?."
    "I had to make my own chips,"
    "That's probably what failed." Dolittel muttered.
    "and is why we only have two pads working." she said
still ignoring his comments.  "It was a long and exhausting
job, I can only guess that something came loose." Doctor
Cembera crawled under the pad and disappeared into the
workings.
    She soon emerged from under the pad and handed Dolittel a
blackened, fist-sized component.  "Both pads were down, so I
figured it had to be power related since they each run on
their own computer circuitry." She said as she reached into a
panel that opened from a near by wall.  The panel contained
several different kinds of parts, obviously spares.  She then
retreated back under the transporter pads.
    When she came back out she said "OK, fire them up".
    With that, Dolittel pressed a couple of buttons and the
transporters lit right up.  "Well," he said "Looks like I've
got a bit to learn before I can be an effective Chief
Engineer".
    "Well don't worry, you seem to have a good teacher."
Tarva said.
    "And quite a while before we'll even be ready to begin
space trials." Cembera added.  Then said "Come on John, I'll
give you a tour of your engine rooms".
    "There's more than one? And what's this about a new style
dilithium ..." Dolittel could be heard saying as the door
slid shut behind him.
    Tarva frowned as she realized Dolittel just walked out
with out being dismissed.  As more people arrived, she would
have to make sure proper Star Fleet regulations were
maintained.  She then pressed the intercom button "Commander
Tarva to Captain Anthony, transporters back on line, Sir."
    "Thank you Commander" he replied "I'll be right there.
Please inform Enterprise that we're back on line.  Out".

----------

    Tarva's tall, blonde room mate was working the
transporter controls, it turned out she was a top rated
operator, when it happened.  The last group was transporting
from the Enterprise when there was a general abort warning
issued from engineering.  The warning was almost immediately
followed by a massive power surge.  If it wasn't for Chief
Swanson's reflex action to the warning all eight of the
personnel in transport would surely have been lost.  She was
able to  reverse the beam before the surge got through the
transporter.
    The surge did catch personal pad number one.  The result
pulled the person out of transport in a crimson flash.  The
crew had no chance to cover themselves from the resulting
gore.  The whole transporter room was immediately splattered
in red.  On the pad, lay a writhing mass of tissue and bone
with blood spurting from what had once been organs.
    Transporter Room II immediately emptied with the
construction workers and crew racing for the doors.  Many
were losing their last meal on the way, others slipped and
fell in the blood.  Chief Swanson, Fist Officer Tarva and
Captain Anthony were the only ones to hold their ground.
    Captain Anthony and Chief Swanson had gone ghost white
with shock, Commander Tarva looked to the Captain for
instructions, all he could say was "Get rid of it".
    Tarva walked over to a security panel removed a phaser
and pointed it at her former crew member.  Her only thought
as she pushed the trigger was "I wonder who it was".  It was
exactly 53 seconds since the alarm sounded.

----------

    Captain Picard sat in his ready room with the Image of
Captain Anthony on the monitor in front of him.  Anthony had
several drops of blood on his face and he looked slightly
ill.  Behind Anthony, a worker in red stained white coveralls
was cleaning blood off a wall.  The view was so tight on
Anthony, the worker was only occasionally visible.  "What
ever happened there" Picard thought, "had to have been unlike
any transporter accident I've ever heard of.  What ever new
technology they're using on this project has to be radically
new and dangerous."
    "According to my records, Ensign Shertz was to have been
my primary navigator."  Anthony was saying "Now, I am without
anybody who is currently qualified for the position.  Captain
Picard, I'm aware that a ship like the Enterprise is likely
to have several officers qualified to fill this position..".
    "Captain Anthony," Picard said "Are you suggesting that I
assign one of my junior officers to your project?".
    "Not at all." Was the reply "I was merely suggesting that
there may be someone in your crew qualified for this
position, who also falls under the other criteria, willing to
volunteer if given the chance."
    Picard thought for a second then said "I'll put the
request before all qualified personnel."
    "I'll trust your decision, let me know when or if you've
found a navigator for me.  Anthony out."
    The screen immediately went black and Picard sat staring
at the silence for a minute then said "Computer list all
ship's personnel qualified as navigator for a star ship."
    "WORKING" the generic female voice said then immediately
displayed a list of over 30 names.
    "Now delete all personnel who are married or have known
living family."

    Three names remained on the list:
                  Commander Data
                  Ensign Janice O'Malley
                  Ensign Ro Laren

    Captain Picard sat and looked at the three names neatly
printed on the black screen.  Who would it be?  If they knew
the mission of the project they would all jump at the chance.
That, however, was against regulations, all he could tell
them was that it is an extremely dangerous mission, perhaps
even a suicide mission.
    If any of these three officers knew they were one of only
three qualified for this project, once again, they would
all certainly volunteer.  Picard decided to post a general
notice to all thirty from the original list.  Perhaps by some
slight chance the only one he felt he could replace would
volunteer.  If not, he would cross that bridge when he came
to it.  This was a strictly volunteer mission and he could
not make anyone in anyway feel obligated to volunteer.
    Within minutes of posting the notice, there was a signal
at the door.  It was Commander Data.
    "Sir," he said "by your notice I believe I am the most
logical choice to fill the navigator position.  Unless, you
count Lore as a living relative.  I know that Star Fleet does
not recognize him as my next of kin."
    "Data," Picard Said "I was expecting you, I tried to
figure out a way to turn down your request without giving
you what little more information I have about the project.  I
decided, however, that to properly satisfy you I must fill
you in with what little more information I have."
    Five minutes later Data left the ready room fully
satisfied that it would be extremely hazardous for him to
transfer to this project.  As he left, he passed the red
haired Ensign O'Malley on her way to meet with the Captain.
It occurred to him, that she too was on the list of qualified
navigators.

    This was too good to be true, Janice thought as she
walked in to see Captain Picard.  A chance to transfer to a
secrete project, a dangerous mission this had to be good.
No more boring star charting, no more hauling diplomats
around, no more Ensign Ro taking over for her every time it
was just getting interesting.  When the tour ended, she would
surely be assigned as primary navigator somewhere.
    "Sir," She said almost before the door closed behind her
"have you had any volunteers for the navigator position?"
    "Yes, just one," he said "however, upon close scrutiny of
his record we decided he was not appropriate for the
assignment."  Picard sat back and watched her face light up
with excitement.
    "Sir, I respectfully request a transfer."
    "Ensign O'Malley I feel it is my obligation to tell you a
little more about this mission." Picard said "The notice has
always stated hazardous duty, however, since you are
approaching this as a last minute replacement I think you
should know that most consider it to be a suicide mission."
    "Sir, this is a suicide mission?" O'Malley said quite
taken aback.
    "No, I did not say that. I said that it is so hazardous
that the few people who know about it consider it a suicide
mission."
    "What do you think of it sir?" she asked still a bit
confused by what Captain Picard was trying to say.
    "If it works, it will be well worth the costs." he said
"All else I can say is that I have a personal interest in the
success of the mission."
    Picard took a deep breath and looked at the beautiful
young woman standing in front of him.  Her large gray eyes
looked back at him expectantly.  Finally he said "If your
still interested I'll arrange transportation.  Go start
packing your gear."
    "Thank you sir." she said and snapped to attention.
    "Dismissed." he said.
    Ensign Janice O'Malley turned sharply and exited the
ready room.  As she left, Captain Jean-Luc Picard looked at
her personal file that was on the screen during the whole
conversation.  On it was noted the time and circumstances of
her adoptive father's death at Wolf-359.
    "It looks like we all have a date with destiny some time
in our lives." he said to the closed door.

----------

    It was finally happening, she was getting to look on the
other side of a forbidden horizon.  Janice could feel great
apprehension though.  Stepping into the unknown was always a
bit scary.  She could feel her pulse race with anticipation
as she packed her few belongings.
    Being a third string navigator on any ship never rated
the larger quarters.  Ensign O'Malley, however, was a woman
of few possessions.  Vega-5 if nothing else, had taught her
to approach life as a minimalist.  She had very few
belongings and really didn't care for a larger billet.  The
last thing she packed was an old style picture in frame.  It
was a picture of her father and her, taken during her first
visit to Earth.  She was still young maybe fifteen earth
years, too old to be considered a child but not yet quite a
woman.  They were standing in front of some ancient ruins in
a country her father claimed his family name originated.  She
wrapped the  picture carefully in a uniform and placed it in
her case.  Of her few possessions, this would always be her
most treasured.
    She wondered how she would transfer to her new
assignment, the survivors of the transporter incident had
been transpoted by a very odd looking shuttle.  She wondered
if they would send it all the way back to get her.  She
wasn't really sure what had happened with the transporter,
only something had gone wrong on the other end and someone, a
navigator, had been killed.  They did not expect to have the
transporters working anytime soon.  At the current distance,
the Enterprise could not transport her on its on.
    Just then Chief O'Brien's voice came over the intercom
"Ensign O'Malley, please report to transporter room 3, with
your gear.".
    "I thought," she said to Chief O'Brien upon entering
transporter room 3 "that we were unable to transport until
they got they're system back on line."
    "I thought the same thing." He said "but they gave me new
coordinates for a different transporter.  Apparently they had
shut it down for being in an unused area.  They brought it
back on line to help tie up the loose ends before the
Enterprise's departure."
    Janice hesitated stepping onto the transporter pad.
Though she had done this many times before, it had never been
immediately following a fatal accident.  She looked to
O'Brien and he just smiled and nodded his head.  So she
stepped onto the pad stood at attention and waited.
    The Enterprise's transporter room dissolved around her
and was replaced by a smaller more spartan room. In front of
her, behind the transporter controls stood a man in white
coveralls.  "Welcome to T E four space dock." he said "We'll
be ready to transport you to the ship in a few minutes".
    To her right Janice could see a large space station style
window.  From her vantage point she thought she could see the
hull of a ship.
    "Would you like to take a look at your new assignment?"
the man asked.
    Ensign Janice O'Malley put her bags down in place and
stepped down to the window.  Outside was something she had
never seen, a star ship in space dock.  This was unlike any
star ship though, a small older style saucer section dwarfed
by four new Galaxy style warp engines.  The saucer was
attached directly to a bulbous main body without the usual
neck lifting it away.  The impulse engines appeared to be
raised up from the main body just behind the saucer.
    There were other things wrong, the color wasn't the
standard star fleet white, it was more of a dull gray.  There
was no name or number designation anywhere to be seen and she
had a clear view of the top of the saucer section.  There
were other anomalies: antenna pods, miss placed orifices etc.
that were not indicative of either the old style saucer or
the new style engines or anything else for that matter.
    "What is it?" she asked the man now standing next to her
also admiring the ship.
    "She's called the U.S.S. Vigilante" he said.
    "What kind of name for a star ship is that?" she asked
not really expecting an answer.
    "Don't ask me," he said "all I do is work on
transporters".
    "I hope you weren't running the transporter last time."
she said with a slight smile.
    "No, Sir." he said "Besides, that was caused by a power
surge from engineering."
    Just then there was a signal from the intercom.  "Whelp,
the Captain's ready for you, time to report for duty" he
said.
    "I guess so." she said as she returned to the
transporter.
    The small transporter room dissolved from view and this
time was replaced by a much larger one.  In front of her
stood a man with long gray/black hair that was thinning on
top and was pulled back in a pony tail.  He wore a slightly
baggy black uniform with several large pockets.  Though he
wore no obvious insignia this man must be in some kind of
authority.
    Once she could move again she stood at attention and said
"Ensign Janice Louise O'Malley reporting for duty, Sir."
    "Welcome aboard the U.S.S. Vigilante, Ensign." the man in
black said "I'm Captain Anthony, did you bring your personal
file?"
    "Yes, Sir." she said and handed him a small computer disk
from an outside pocket of her bag.
    "Very good" he said as he slipped the disk into the
tricorder he was holding.  "Now, leave your bags here, they
will be delivered to your quarters.  Right now, we are late
for an already postponed meeting.  Please come with me."
    As they left, she finally noticed that there were several
people in blood stained white coveralls vigorously cleaning
the transporter room.  Another in clean coveralls approached
her bags as soon as she left the transporter pad.  She also
noticed that a personal pad to her left was shattered and
blackened.  She could feel nausea catch in her throat, what
ever happened here must have been  horrifying.
    All through the corridor the men in white coveralls were
hard at work.  Many areas where exposed to the superstructure
some she could see down through several decks of framing.  At
one point they had to edge along exposed girders to keep from
falling to the next deck.  This was the same area a work man
had given them each a hard hat to wear while passing through.
    "If we weren't so late I would have taken the safer but
longer route." the Captain said as they edged along the beam.
    When they finally arrived at the shuttle bay it was
filled with more than a hundred black uniformed crew.  Ensign
O'Malley never thought she would feel out of place on a
Federation star ship while in uniform.  Now, while surrounded
by the crew dressed in the baggy black uniforms, she
definitely felt out of place.
    The Captain walked her up to a short dark skinned woman
with a high Klingon type forehead and a long braid of hair
down her back.  "Ensign O'Malley," he said this is my First
Officer, Commander Tarva.
    "Commander Tarva" Janice said in greeting.
    Commander Tarva nodded and said "At least you've lasted
longer than our last navigator did."
    "Your attention please." the Captain said into a loud
speaker.  "Once again I'd like to personally welcome you
aboard the FULTON class star ship the U.S.S. Vigilante, the
most unique craft ever conceived of by Star Fleet.
    "I'd like to say is to remind you of the mission you
volunteered for.  Our intent is an extended  hazardous duty
mission.  We may be on tour for several years or more, with
no or little contact with Star Fleet.  In fact, many analysts
believe we will not be heard from again.  Now I want you to
reflect on this, because in a few minutes when I tell you our
exact destination there will be no transfers or shore leave
off the Vigilante until after the mission is completed.
    "If you have second thoughts leave now, collect your
belongings and report to transporter room 2.  The Enterprise
is currently standing by to start you on your way back to
your last assignment."
    There was a stirring among the crew, as this sunk in.
Several groups discussed this amongst themselves.  Finally
three individuals stepped forward and announced that they had
second thoughts.
    "Very well," Captain Anthony said "I want to thank you
for the dedication that got you this far.  You will be
returned to your previous position and no mention of this
incident will appear on your records.  I must also remind you
to never talk about this project, all details are considered
top secret.  Also, anybody who persists in questioning you
about it must be reported to Star Fleet Security.  Finally,
you must never even discuss this project amongst your selves
once you leave this ship, it never happened is that clear?"
    "Yes, Sir." they said together.
    "Dismissed." Captain Anthony said and watched the three
exit the shuttle bay.
    "As some of you may have guessed, the U.S.S. Vigilante is
not a ship of peace," Captain Anthony began "it is a ship of
war.  We are at war, that's right we are at war and the
Vigilante was designed to take the war to the enemy.  In
order to hasten the construction of the Vigilante, parts were
used from the destruction of the first battle.  The enemy we
face is one of the strongest and most irresistible the
Federation has ever faced.  The enemy we are going to meet is
the Borg."
    At the revelation a slight murmur rose from the crowd.
Finally a voice came from the crowd.  "Sir, how do we expect
to accomplish this, over 30 ships were destroyed fighting
just one Borg cube.  Now you plan to attack them with just
one ship made up of junked parts.  What have we gotten
ourselves into?"
    Captain Anthony smiled at this it was just the reaction
he expected, since it was the same one the project committee
got when they originally approached Star Fleet with it.
"Listen to me," he said "the superstructure maybe made of old
parts, however, the technology put into this ship is cutting
edge.  In every area you will notice parts and functions you
do not recognize, this whole ship has become the proving
ground for radical new ideas.  It will be our job to test and
use these new ideas.
    "As we already know, as we use the new components of the
Vigilante things may go wrong.  You have all been accepted
for this mission because you are some the best.  I am
confident that working with the designers of the Vigilante
you will all learn the new technology and be become as
confident as I am in our ability to actually pull this off.
    "I am sure you are also aware of the Borg's ability to
gain knowledge from our computers and prisoners.  Therefore,
it is imperative that we do not unnecessarily discuss
functions of our departments with other departments.  There
are new designs in all areas of this ship.  Technology we
know that the Borg do not attribute to the Federation.
    "Another unique feature of the Vigilante is the computer
systems.  Though there is a central computer for the day to
day needs of life on a star ship, each area has its own
separate computer system.  These systems are totally
inaccessible by the central computer.  This does create a
problem, a galaxy class star ship can actually be operated
with as few as five crew members when in automated mode.  The
Vigilante needs over fifty highly trained crew just to keep
it maneuvering in warp."  This was a bit of an exaggeration
but he wanted to keep them on their toes or what ever it was
that they may pass for toes.
    "By now, all crew have received their assignments, you
are to work with construction personnel preparing The
Vigilante for duty.  I know there is a lot of work left to do
and little time to do it, but I am certain if we work
together we can have the ship ready on schedule.  I also
expect that you should know this ship inside and out by the
first space trials.  Now lets get to work.  Dismissed."

----------

    When Simon Norton had entered the meeting room, he was
last, as usual.  He had a great propensity for being late.
It never seemed to be of his doing, however.  It wasn't his
fault that the transporter failed twice before he ever got
aboard the ship.  The last time, it left him stranded on the
Enterprise.  The trip to the Vigilante was an eye opener.
The transport sent to retrieve them was by no means a
shuttle.  It was a troop carrying 'drop' ship designed for
rapid deployment of personnel to transporter protected
landing zones.  Only Star Fleet's few anti-terrorist units
carried this kind of ship and even they carried standard
shuttle craft.
    It was strange that he was the Chief of Security on a
Star Ship that he had no idea what design it was.  He didn't
know its class or it's layout.  He knew it was something
different, the large size of the shuttle bay told him that.
Also the narrow corridors and small rooms suggested something
different about the Vigilante.  He only wished that the drop
ship had windows.
    Captain Anthony was sitting in a small room with his
command staff when Commander Norton finally got around to
joining them.  The room like the rest of the ship was painted
in gray and other drab colors.  In the middle of the room was
a large dark gray table with straight edges but slightly
bowed to fit with the bow of the room.  Around the table were
ten high backed chairs securely fastened to the floor, they
were also equipped with emergency restraints and belts.  In
front of each place was a computer terminal sunken into the
table.  At one end of the room was a large display screen
obviously for presentations to the group.  The outside wall
had several windows looking over the port side of the saucer.
Along the top of each window the bottom of the blast shields
could be seen.  The shields all over the ship would snap shut
during red alerts and when in 'silent running'.
    In the early days of Star Fleet before advances in
deflector shield technology blast shields were installed on
ships meant for some heavy action.  If this ship was destined
to confront the Borg it would need them.
    The small amount of time Norton had been on duty he had
spent his time reviewing the files of the other officers.  If
he was to properly over see security he would have to know
with whom he was working.  Now sitting next to Captain
Anthony in the Command Staff Meeting Room (or known simply as
the Command Room) was First Officer, Commander Tarva and
across from her was Lt. Commander Dolittel, Chief Engineer.
The fourth in the room was a tall female humanoid in the
white coveralls of a construction worker, she was sitting
next to Dolittel.  Commander Norton had been unable to find
any information on the construction personnel in any of the
computer files.  This had distressed him for he felt it best
to know everyone he had dealings with.
    "Ah, Commander Norton," The Captain said, "glad you were
finally able to join us.  I believe you should be familiar
with everybody here, except Doctor Cembera.  Doctor Cembera
is the chief engineer in charge of design and construction of
the Vigilante."
    "Doctor." Commander Norton said and slightly bowed his
bald head towards her.  He then took a seat close to the
door.
    "This meeting is intended to fill you in on some of the
specifics of the U.S.S. Vigilante." said Captain Anthony and
pushed a button on his computer terminal.  On each terminal
and on the main screen a detailed picture of the ship
appeared and began to rotate slowly.  "I believe I'll leave
this lecture to Doctor Cembera".
    "Thank you Captain" Doctor Cembera said as she stood up
and approached the screen.  "The U.S.S. Vigilante is designed
with three main features in mind: speed, fire power and
stealth.  To quickly build the ship we decided it necessary
to use some space frames deposited at Memory Alpha.  Most of
the parts used were in fact taken from the ships destroyed by
the Borg.  We have, however, completely refitted the ship
with new technology from the material used in the hull to the
drive systems.
    "I'll start with the hull, the original 'skin' of all
components was removed and replaced with a new composite
material.  This material is much less penetrable and
detectable by all known or encountered scanning devices.
This makes us virtually invisible on long range scanners and
appear much smaller to closer range sensors.  Windows however
can not be made of the new material so all windows have been
fitted with old style blast shields.  If power to the main
deflectors is ever lost windows without the blast shields
would be extremely vulnerable to detection.
    "It is a known fact that Star Fleet has a policy against
the use of cloaking devices on its ships.  This policy does
not, however, preclude the research in cloaking technology.
The main goal in cloaking research has been to develop
adequate detection of cloaked ships.  This research added to
what we have learned from the Klingons I believe has created
the most sophisticated cloaking system ever implemented.  The
technology has been installed in the Vigilante.  Together
with the new hull material we call the combined system A.C.T.
that is Advanced Cloaking Technology.  With A.C.T. the
Vigilante should be completely invisible to the Borg and all
others for that matter."
    Commander Norton interrupted "If Star Fleet has a policy
against cloaking how did we get a whole ship built around
cloaking technology?"
    "Star Fleet regulations have very little influence over a
ship that officially does not exist." responded Captain
Anthony.
    Norton sat back to contemplate the implications of what
the Captain just said while Doctor Cembera continued.
    "The next obvious feature of the Vigilante" she said "is
the number of warp drives.  With new technologies and
alignments these four engines should jump the Vigilante to
warp 9.6 from sub-warp speeds in less than a second.  You
should then be able to hold warp 9.6 for an extended period
of time.  Next.."
    "Excuse me Doctor." Lt Commander Dolittel said.
    "Yes, Mr. Dolittel." Doctor Cembera said with a bit of a
frown as if anticipating what was coming next.
    "I led a team that did extensive research on these new
technologies and alignments as you call them." Dolittel said
"We concluded years ago that they create uncontrollable worm
holes around the ship using them."
    "Is this true?" Commander Tarva asked.
    "Yes." Doctor Cembera replied.
    "Your saying you've built this whole ship around theory
that has already been proven to be flawed?" was Tarva's next
question.
    "This was to be my next topic," Doctor Cembera said "if I
may continue I think I'll be able to answer your questions".
    "Please continue Doctor." the Captain said knowing what
was coming next.
    "Lieutenant Commander Dolittel's conclusions were
absolutly correct." she stressed Lieutenant knowing how much
that elusive promotion irritated him.  "This technology does
tend to produce an uncontrollable worm hole.  Since taking
over what Mr Dolittel's team started, the elimination of the
worm hole effect has plagued me and other scientists.  Not so
long ago I was discussing this problem with a colleague in
front of my young daughter and my daughter actually came up
with the idea that has made this all possible." she said
proudly.
    Doctor Cembera's audience looked at her blankly. She
continued on ignoring the looks. "What my daughter asked was
why don't we control the worm hole.  To tell you the truth
this had never occurred to me mainly because travel through
the warp generated worm hole can be extremely unpleasant."
    With the word unpleasant a couple of people took a second
look at the restraints on all of the chairs and began to
realize what Cembera was getting to.
    "These worm holes can also throw a ship many light years
off course if not further.  If we can control the worm hole,
and get it to deposit us were we want to go, even with the
unpleasant effects, it could be quite useful.  In other
words, we could get the worm hole to place us in minutes
where it may take us a year at warp nine to reach."
    "You keep using the word, us, are you planning to join us
on our planned journey?" it was Dolittel again.
    "I use the word merely as a figure of speech, Sir."
Doctor Cembera answered crisply.  Then Continued "We have
implemented the new drives in an older test ship, dubbed the
U.S.S. Fulton.  Once again like all technology we're using,
it involves complete replacement of the main systems plus
extensive reworking of other systems.
    The results were extremely promising, the Fulton ended up
within the desired sector.  There was, however, a bit of a
side effect caused by the worm hole, a great deal of the
outer hull was ruptured in transit.  This, however, should
not effect the Vigilante, since the technology has been
refined a great deal and the hull and shield strengths have
been greatly increased.
    "Finally, there have been a number of modifications in
the shield generators, weapons, and transporters to make the
Vigilante actually several generations more advanced than
even a Galaxy class Star ship."
    "Don't you think your being just a bit over optimistic
with that last statement." Dolittel said as Cembera reclaimed
her seat.
    "And" Tarva interjected "do you think only a couple of
generations are enough to defeat the Borg where they live?".
    "Allow me to answer that." Captain Anthony said "Our
mission is not to defeat the Borg but rather to collect
extensive information about them in the hope of being able to
defeat them the next time they arrive in our little arm of
the galaxy.  Okay, any other questions?"
    Captain Anthony and Doctor Cembera began to field
questions about different aspects of the mission and details
of the ship.
    During the meeting Commander Tarva examined Commander
Norton.  He was a medium sized humanoid a bit shorter then
Captain Anthony but with a solid build.  His size was due as
much to genetics as it was to an obvious attempt on his own
part to maintain a highly muscled physique.  She could see
highly defined muscles reaching up to his neck, it even
appeared that his face was muscled.  His ears were pointed
and his forehead slightly pronounced like a Romulan's.
Tarva's background told her that this man was at least part
Romulan.  Her background also told her that the
Romulan/Vulcan traits were extremely dominant and all he
needed was one hiding somewhere in his family tree for him to
show these kind of features.  Another oddity about this man
was his totally bald head.  It was obvious, at least to her,
that he shaved his head which was not consistent with any
cultures she could readily attribute to him.

----------

    Ensign Janice O'Malley piloted the gray Drop Ship through
one of the Tau Epsilon far asteroid fields.  Next her sat a
very cocky acting young man in white coveralls named Picback.
They were both properly strapped into their seats but his was
turned slightly and leaned back so he could place his feet up
on an empty area of the control panel.  "I still don't see
why I'm out here flying this can around."  she said "I'm a
navigator not a shuttle pilot."
    "First of all, this is not a shuttle or a can." Picback
said with a smile. "It's a highly sophisticated troop drop
ship.  Second, from my understanding they don't have much
need for a navigator on the Vig for the time being.  Third
all navigators should be trained as pilots and these are the
only things to pilot or navigate for the time being.  I guess
their just trying to make you earn your keep."
    Just then something besides rock appeared on the
scanners.  "That must be our target," Picback said "remember,
with the cloaking he can't see us so keep your distance.  We
don't want him running into us after dropping off our
package."
    From their position they could watch the tug disconnect
from the cargo pod after placing it in close proximity to a
large asteroid.  When it lifted away they could clearly read
it's name and number, U.S.S. CHANDRASEKHER NCC-3923-C.  Their
sensors told them it was doing an intense sensor sweep of the
area.
    "What's he doing that for?" she asked Picback.
    "His instructions are very strict,  he's not to leave the
cargo if he detects any other activity in the area."  He
replied as if extremely bored with the whole process.
    Ensign O'Malley continued to track the tug as it
high-tailed it out of the system.  Once the tug had entered
warp she began to approach the cargo pod.  Picback now sat in
normal position and began to work his own controls.  The Drop
Ship slowly approached the giant cargo pod and was soon
dwarfed by it.
    "This thing looks longer than the Vigilante" said
O'Malley as she moved ever closer to the pod.
    "Well, they were originally designed to haul a couple
Galaxy style warp engines around in, with room to spare.
This should be our last delivery."  Picback said as he
powered up the magnetic cargo couplings that had been
retrofitted to the Drop Ship.
    "What do you suppose is in it?" Janice asked her
companion trying to make conversation.
    "You know the regs," he said with a smile "we're only
allowed to discuss matters directly related to our jobs.  I
can make small talk with you about anything to do with a drop
ship or flying one.  Believe or not we are even allowed to
discuss details specifically related to any current
assignment."
    With this dissertation Janice laughed and said "You could
have just said, 'I don't know'."
    The couplings clanged into place slightly jolting the
ship.  "OKay," Picback said "ease the power up slowly this
tub is a lot more powerful than a wimpy star fleet shuttle
and remember we have a lot more mass now."
    "Mr Picback, I am not fresh out of the Academy." Ensign
O'Malley said slightly irritated "I have maneuvered the
Enterprise through an asteroid field on more than on
occasion."
    "The Enterprise's deflector shields probably gave you
quite a bit more room for error, huh?" Picback returned just
as they jerked forward. "What was that?"
    "Just slipped the accelerator a bit." The Ensign said.
    "How can you, slip the accelerator a bit?" Picback said
worryingly "You better let me have control I've done this a
lot more than you have."
    "Don't worry." Janice said with a slight grin Picback
didn't notice "I can handle it." and pulled back on the
control stick to start the maneuver to arc them out of the
asteroid field.  "But you know, it's been quite some time
since I've piloted anything with a control stick."
    "Why didn't you tell me before we hooked on to this
monster?" Picback said trying not to show the panic he was
starting to feel.
    "I tried to." Janice said "But you said I had to earn my
keep.  Now's its too late, huh?" she sounded as if she was
trying not to panic which didn't help Picback's new state
of mind.
    A proximity warning began to flash on the scanner
console.  Ahead of them they seemed to be about to ram a
rather large orange asteroid.  Picback locked his arms and
legs and shut his eyes bracing himself for the collision,
which never occurred.
    "What happened?" he said after more than enough time had
passed for them to have hit the asteroid.
    "You were right," Ensign O'Malley said with a smile "this
thing does have a lot wider turning radius than I'm used to."
    They than passed between two extremely close asteroids as
the proximity warning flashed again.  Before Picback had time
to react again, they were clear of the field.
    "Whew," Janice said and feigned wiping sweat from her
forehead. "I didn't think we'd make that last one".
    All Picback could do was sit there and hope he didn't
draw the red head as a partner again.
    The huge cargo pod sped through space with no obvious
means of propulsion as the Drop Ship remained cloaked. When
it approached TE-4 Ensign O'Malley had placed their cargo
into a predetermined orbit.  The velocity and orbit had to be
precise inorder to eventually get the pod in a matching orbit
with the space dock.  The idea was to place the pod in a high
orbit and brake it down to the matching orbit with the dock.
She had been braking since passing the orbit sphere of TE-5.
Now she had to drop into a high orbit and begin heavy braking
hopefully the space dock would catch up with them as they
reached its orbit.
    An untrained observer would have thought the procedure an
easy one.  As the cargo pod entered it's high orbit, it began
making increasingly lower orbits over the space dock.
Eventually, the pod just seemed to drop into space over the
space dock.  It was then maneuvered into its place in the top
of the framing directly over the Vigilante.
    Picback and O'Malley had been gone just over two days and
four hours when they maneuvered their ship into the shuttle
bay.  As soon as the ship came to rest, the airlock door flew
open and Picback jumped down, fell to his knees and kissed
the deck.  A man in a black crew uniform stood at a nearby
control console watching the scene and looked at Picback as
he walked by.
    "Don't ever, ever put me in a ship with her again. She
was doing barrel rolls on our way in." Picback said to the
shuttle bay chief as he passed.
    Shuttle bay Chief Taragoma then watched Ensign O'Malley
ride the slowly descending Drop Ship stairs as they lowered
into place.  Her combed back short red hair was slightly
messed from the long trip and she carried her uniform jacket
casually over one shoulder.  As she walked up to him, she put
her jacket on and fastened it properly.  When she reached him
she handed him the ships log.
    "What was wrong with your technician, Ensign?" he asked
her.
    "I have no idea, Sir, I guess he's a little high strung."
she said with a bit of a smile.
    Taragoma checked the log and looked up at the young
woman standing before him.  "Okay, dismissed" he said.
    "Thank you, Sir"
    The Chief smiled as he watched her walk out and thought
"I knew we'd have problems with cloaking these things during
routine missions."

----------

    Captain Anthony stood in a large, round dimly lit
chamber, around him, workers in their white coveralls went
about their business.  The room appeared unfinished, there
were massive connecters and mountings everywhere.  There
were, however, no loose wires, everything was large and
solid.  In six evenly spaced places on the floor were large
gear shaped areas almost two meters in diameter.  The bottom
of these gears consisted of what looked like thousands of
optical connections.  The walls were basically smooth except
for six  large L shaped channels.
    Along one wall area, were four round doors about a meter
and a half in diameter.  In the middle of each door was a
sturdy looking wheel for manual opening.  The doors were to
escape pods.
    The ceiling of the room appeared out of place.  It was
not made of the same composite materials of the rest of ship
and seemed laid across the walls rather than built into them.
None of the lighting was a permanent part of the room, it was
all temporary work lighting.  Captain Anthony stood to one
side staring at the flat ceiling.
    The turbo-lift came up through a hole in the floor.
There were two such turbo lift channels in the room.  Both
had a cable net strung across them preventing anybody from
inadvertently stepping into the open hole.  The rough out
side of the turbo lift was visible as its single door slid
open.  Commander Tarva moved the net aside and walked up to
Captain Anthony.
    She stood at attention when she reached him and said
"Captain.".
    "Yes." he said in a second, after coming back from his
thoughts.
    "Sir, Construction advises that the Bridge is included in
the new shipment." Tarva said.
    "Well I'd hope so." Anthony said with a smile "Tell them
to get it installed as soon as possible, a star ship without
a bridge, is like a phaser without a trigger."
    Tarva flipped open what looked like an old style
communicator and relayed the Captains orders.  They both then
stepped into the turbo lift Tarva had ridden up.  "Where to
sir?" she asked the captain.
    "How long till they expect to start moving the bridge
into place?" Captain Anthony asked before answering her
question.
    "They estimate everything should be ready in about six
hours." she said.
    "Deck Six." he said to the lift then looked at his time
piece.  "Commander would you care to join me in supervising
the installation of the U.S.S Vigilante's bridge?" he asked.
    "Yes, Sir".
    "Meet me at Air Lock Two at 1730 and bring your pressure
suit gear".
    "Very good, Sir".  She said as he stepped off the lift at
deck six.  Commander Tarva then looked at her own time piece,
1230.  Five hours, there was nothing pressing needing her
immediate attention.  It would be a good time to go back to
the cabin and rest a bit.  She had gotten a minimum of rest
since leaving the Enterprise.  She did need some.
    "Deck eight" she said to the lift.

----------

    Tarva sat in her cabin in a short black silken robe with
long sleeves.  When sitting, the bottom of the robe seemed to
barely touch the seat of the chair.  The black sheathed knife
was still strapped to her right shin and had a few water
droplets on it.  Tarva was combing her long wet hair to one
side of her head and down in front of her.  She was leaning
forward with legs slightly spread allowing the hair to fall
to the floor between her bare feet.
    This is how some of her roommates found her when they
came in.  Tarva looked up at them and scowled to herself
"I've got to get my own cabin".
    "Commander, we didn't expect you in so soon." said Chief
Swanson.
    "Even The First Officer can take some time off once in
awhile." she replied stressing the title.  "I thought you'd
be working with the new shipment."  she said to this whole
group of engineers while still combing her hair.
    "That's my intention, Sir." Dolittel said formally as he
broke out his boot liners and other gear for his pressure
suit.  "The rest, however, are transporter engineers, and
have to wait till we get the bridge out of the way."
    Dolittel saw Tarva continue to frown as the others
continued to make themselves comfortable.  "Perhaps," he said
"They could begin preparing transporter room three to receive
the new chips when ready."
    "That sounds like a good idea, Mr Dolittel" Tarva said
finally losing her frown but not smiling.
    The others, being greatly out ranked, didn't even
question weather this was an order or a suggestion.  They
just picked themselves up and headed back out the door.
    "Mr Dolittel," Tarva said as he was about to be the last
to leave.
    "Yes, Sir." he said.
    "Would you inform all of our roommates that I have no
appointments until 1730." she said curtly and immediately
turned back to brushing her hair.
    "1730, yes Sir." he repeated and walked out.

    "What did she mean about 1730?" one of his companions
asked Dolittel.
    "It means that we can't go back to our own quarters until
then." another one said.
    "It means," said Dolittel "that you should find something
to do until 1730."
    "And why did you say we could prepare the transporter
room for the new chips?  When we've just spent the last
twelve hours doing just that." said Chief Swanson.
    "We've got every right to use our own cabin, no matter
who our roommate is.  What right does she have to kick us
out.  Aren't we suppose to be tolerant until the other cabins
are ready, even the first officer?" said the first.
    "You just don't get it." Dolittel said "How long have we
been here?  Four days? A little more? How often have you seen
Commander Tarva in the cabin?"
    The three just looked at each other and shrugged.
    Dolittel continued "I'll tell you, before just now, twice
including the first day.  In fact, that bunk hasn't been
touched, I know, remember, I made it and no two people make a
bunk exactly the same way.  That means she's been on the go
since we got here and your complaining about twelve hours.
Now I want you to go keep yourselves busy until 1730.  After
that you have eight hours to get some rest, because at 0130
hours you are going to begin installing the new transporter
chips.  Is that clear?"
    "Yes, Sir." they said in unison.
    "Very good and first make sure you spread the word to the
other three about 1730."  Lt Commander John Dolittel did not
like pulling rank on his team but occasionally, he had to
remind them this was still a military mission.

----------

    Smoke filled the bridge and stung Tarva's eyes and lungs
but she recognized the unmistakable cube on the view screen
to her right.  Everything began to shake while in the
distance a partially recognizable star ship exploded.  A hull
breach alarm sounded and a strong wind began rushing by her.
Tarva looked down at her captain laying in her arms.  Blood
poured from his mouth and his chest made a sucking sound
every time he tried to breath.  Tarva was backing towards an
open escape pod dragging the Captain with her, just as they
entered the pod a blinding flash blew them against the back
of the pod....
    The familiar rhythm of a Kalonian march sounded in
Tarva's head.  She sat up in the dark cabin trying to
remember where she was.  With her movement the lights came on
just enough to outline the room and the march faded.
    As the ghosts cleared Tarva reached for her time piece
and said "Lights, intensity 3. Volume level 5"
    The lights came up enough to read the watch and the march
came back up to pleasant thump.  She carried an old Kalonian
time piece so she needed light to read it.  She then had to
do some quick math to convert to standard.  Once again
inconvenienced by human arrogance, they always seemed
convinced that everybody went by Sol-3 time or at least
should.
    Tarva smiled, she knew no human thought of their home
planet as Sol-3.  Most called it Earth and many not born
there called it Terra.  Tarva used Sol-3 because it was the
Federation's generic name for Earth and the class designation
humans used for almost all other planets even those of major
Star Fleet allies.  She figured it appropriate that she used
Sol-3 since many seemed insistent in calling Kalon, Antri-4.
    It was 1700, just what she had set the alarm for.  Tarva
took a load of clean clothes from a drawer and walked into
the head.   When she looked in the mirror half her face was
gashed open from above the left eye down her cheek to her
neck and blood pour from the wound...
    Tarva sat up in bed totally soaked in sweat screaming.
She sat in the dark cabin trying to remember where she was.
With her movement the lights came on just enough to outline
the room and the march faded.

----------

    Commander Tarva met Captain Anthony at Air Lock Two suit
room at precisely 1730.
    "Have you gotten much rest since coming aboard?" he asked
her.  "I know you've been extremely busy."
    "I've gotten enough, Sir." she replied as she opened her
bag.
    The current version space suit had two main layers the
first was a gray jump-suit with bio-tech connections.  It was
worn over the standard tight shorts and tank top under
uniform.  The jumpsuit even had built in feet which then fit
into the boot liner.  These parts and the glove liners which
attached to the jumpsuit where carried in the bag.
    Tarva saw that the captain had noticed her knife which
she had to take off to fit into the jumpsuit.
    "You know." he said "General Star Fleet regulations do
not allow personal weapons to be carried while on duty."
    "Yes I am aware of the regs, Sir," She said "but there
are also the amendments for preservation of Federation
cultures."
    At that his face lit up "Ah yes," he smiled "the Kalonian
Simtar, I should have known." he than held out his hand and
said "May I?"
    This was a very presumptuous thing to do.  Anybody who
knew about the Kalonian Simtar would know it would only be
voluntarily surrendered to a very close friend or family
member.  Traditionally, only parents, children and mates
would be considered 'very close'.
    The Captain must have known this, when she handed it to
him, he looked extremely satisfied.  He carefully pulled it
from the sheath, just far enough to see the full blade.  The
blade's finish was flat black while the edges had been honed
to a bright polished black.  One full side was sharpened and
about a third of the other side while the tip curved up
toward the shorter edge.  He snapped the blade back into it's
sheath and handed it back to his First Officer.  He had it
less than thirty seconds.
    "I hear they have become extremely difficult to find even
on Kalon." he said as he activated his suit lowering
mechanism.
    "That's true, Sir." Tarva said as she stepped into the
bottom half of her suit.  "The ebon metal the blade is made
of has become extremely rare.  While the demand has
increased.  The return to traditionalism has made it
extremely difficult for the families like mine who have
always maintained traditional values."
    Anthony had to wait while he lowered his helmet into
place and secured it.  He then turned on his intercom and
waited while Tarva's suit was secured.  Before putting on the
suit gloves she placed the Simtar in her bag with the rest of
her uniform and placed them in a locker.
    While she was doing this Captain Anthony asked "What is
the handle made of?""
    Tarva hesitated, this Simtar was old enough to be from
the era when Klingon bone was used.  She knew, however, that
it would be best not to let this get around.  "The handles
have been made from many differant materials through the
years."  Tarva finally responded.
    "Was it difficult to find?"  Anthony continued.
    "Actually, Sir," Tarva said "this Simtar was given to my
father by my mother, when she asked him to be her mate.  I
inherited both of their Simtars after their bodies were
recovered."
    "I'm sorry," Anthony said "I didn't realize. I shouldn't
have brought it up."
    Tarva stood up straight, looked at her Captain through
her helmet and said proudly "It is a great honor on Kalon for
mates to die together in battle."
    Captain Anthony knew he was digging himself into a hole
so he merely secured his gloves gave her a brief salute and
motioned her toward the air lock.
    At the air lock door, they ran systems checks on their
suits.  They then checked with Construction Control to
coordinate the vital signs check.  Next, they backed into
large white jet packs.  Their ship's black suits fit securely
into the construction white space walk packs.
    When the outer airlock door opened, Tarva stepped out and
fired the maneuvering jets with the Captain right behind her.
She never really appreciated the size of a star ship till she
walked from one.  Down the ship to her right the port warp
drives swept up and down away from the body.  The massive
dull gray hull made her feel extremely insignificant, like an
insect.
    "Lets go." Captain Anthony said and accelerated to the
cargo pod attached across the top of the upper girders.
    Tarva followed without hesitation, it was some minutes
before they reached the top of the pod.  They landed on a
black girder and looked toward the pod.  "This is the last
shipment?" she said more as a statement than a question.
    "That's right." Captain Anthony said and pointed to a
large round container being hoisted out of the cargo pod.
The pod's whole top had split down the middle and opened as
two large doors.  The round container had been fitted with
several small rockets along the side and was being slowly
lifted from its place.
    "And that," he said proudly "is my bridge.  There are
also the chips we need to get the transporters operational,
some parts for the anti-matter chambers, and some blocks of
raw hull material."
    "It seems there should be more than that in there."
Tarva said just trying to make conversation.
    Anthony turned toward her so she could see him smile.
"There is." he said  "We are also receiving a shipment of new
space suits and multi-function phasers."
    Tarva looked down at what she was wearing and said "I
thought these were the newest model?".
    "They are, but they were designed for a peaceful mission,
they are not suitable for us."
    Tarva smiled behind her face plate and said "Finally, a
suit designed for a warrior."
    "That's right, a warrior on a ship that does not exist
and is crewed by ghosts."
    The pair stood over the saucer section looking down into
the open hole they had stood in only hours before.  The plate
that had been the roof was now attached to the girders below
them.  The bridge was slowly maneuvered into place over the
hole.  The channels on the sides of the hole had to match up
perfectly with pegs on the side of the bridge.  If all had
been manufactured perfectly this would insure all connections
would fit correctly.
    When the bridge was started into the hole and the pegs
rested on the edges the side rockets were removed and rockets
on the top were used to rotate the bridge into place.  After
the side pegs came over the proper channels, large clamps
grabbed the pegs and pulled the bridge down into the very
snug fitting hole.  When it reached the bottom of the
channels the bridge rotated a meter to lock into place.
    Once it was locked in, a systems check was conducted to
test the connections.  A collar then expanded from the ship
to seal the slight gap left between the bridge and the ship.
A cap of composite material was then fit over the bridge to
blend it smoothly with the rest of the saucer section.
    "Lets go take a look at our bridge." Captain Anthony said
stepping off the girder and accelerating toward the
Vigilante.
                to be continued...........



                   T H E   V I G I L A N T E

                               II

                        "The Shakedown"
....
Have ever you stood where the silences brood,
    And vast the Horizons begin,
At the dawn of the day to behold far away
    The goal you would strive for and win?
Yet ah! in the night when you gain to the height,
    With the vast pool of heaven star-spawned,
Afar and agleam, like a valley of dream,
    Still mocks you a land of Beyond.
                                     .....
                   Robert W. Service
                   "THE LAND OF BEYOND"




    Commander Tarva and Captain Anthony stood in front of the
turbo lift door waiting to enter the bridge.  Commander Tarva
spoke into her communicator with Construction while waiting for
the bridge to be pressurized.  When life support was established
the turbo lift door opened.
    Captain Anthony and Commander Tarva were alone when they
stepped onto the bridge.  Only the emergency lights shining down
from hidden recesses illuminated the bridge.  The major color
scheme was gray with black accents.  There seemed to be more
chairs then expected, all tightly wrapped in plastic.
    Before they could make it half way around the bridge turbo
lift two opened allowing the construction crew in.  They
immediately crawled under the control banks and opened other
panels.  Slowly, computer screens began to light up and the main
lights came on showing the whole bridge.
    Tarva and Captain Anthony without saying a word to each
other began tearing the plastic off the chairs.  Each station
had a chair and was well designed for total access.  The current
trend in star ship bridges was to have several stations as
standing positions, no chairs available.  In the Vigilante this
could cause a problem if they ever actually tried to use the
controlled worm hole effect.
    The chairs had high backs with emergency restraints and
belts.  The bridge had the standard layout with Captain in the
middle of the Bridge.  Pilot and Navigator in front of and to
either side of the Captain.  Next to the Captain on the left was
the Security station.  On the other side of the Captain was the
First Officer station.  The five stations in the middle of the
bridge each had a wrap around counsel.  The Captain's chair also
had special controls on the restraint arms.  The Captain and
First Officer's consoles were designed mainly for ship wide
communications they could also be quickly reconfigured for all
other bridge functions.
    Tarva tried her chair out for size.  The cloth seat  seemed
to form to fit.  The worker laying under her console stood up
and pushed a button on it.  The console lit up and Tarva
recognized it as a standard console with emphasis on
communications.
    She pushed a button and said "Attention, all bridge crew
please report to the bridge."

    As the last of the Bridge shifts showed up, the last of the
workers was leaving.  More than fifteen people stood on the
front of the bridge in front of the main view screen.  Many
appeared to have been gotten out of bed, they were yawning and
didn't have perfectly groomed hair.
    Captain Anthony sat in his chair and waited while First
Officer Tarva did a roll call of the crew before him.  Behind
him, stood Chief Engineer Dolittel and Chief of Security Norton.
    "Sir, all present." Tarva said and took her seat next to
him.
    The Captain stood up and said "Welcome to the bridge of the
U.S.S. Vigilante.  Until now the only bridge we've had use of
has been the incomplete emergency bridge.
    "Your next project will be to start running total
diagnostics on your stations.  You will also be responsible for
absolute knowledge of your station.  Your next mission will be
to form a working knowledge of all other stations plus an in
depth knowledge of at least one other related station.  I want
this bridge busy until we launch.  In three days we will begin
running simulations.  You have until then to at least start
learning your stations.
    "One more thing, Lieutenant Commander Dolittel." Anthony
said and turned to face him.
    "Yes, Sir." Dolittel said coming to attention.
    "I have decided that because the Vigilante has a high
average command rank, the position of Chief Engineer should be
held by someone with a grade higher than Lieutenant Commander."
Anthony paused and watched Dolittel squirm a bit then continued.
"As you all may remember, the standing policy is to maintain
rank utill the end of the mission.  This leaves me in an awkward
position since I do not wish one of my most important positions
to be occupied by a light commander.  I have two choices either
second guess one of my policies or second guess my First
Officer."
    He stepped toward Dolittel and said "I'm sorry," he paused
"I cann't second guess my First Officer, congratulations
Commander Dolittel."  Captain Anthony finally smiled and shook
Dolittel's hand.
    "Thank you, Sir." Dolittel said, for once at a loss for
words.
    Captain Anthony turned back toward the crew and checked his
time "It appears to be time for the third shift, the rest are
dismissed."
    Short, to the point meetings seemed to be Captain Anthony's
style.  The crew would have to get used to being pulled out bed
for meetings and other whims of the Captain.


    Tarva was the first after the Captain to congratulate
Commander Dolittel.  She then said "I have some more good news
for you.  It's time to move."  Tarva then reached over to a
nearby computer console and punched up a ships diagram.
    "Finally." Dolittel said with a wide smile.
    "I have assigned the newly finished section here by
engineering to you and all of your personnel.  It will be your
responsibility to assign quarters."
    Dolittel looked at the diagram and said "They're all
doubles, surly there is enough room on this ship to give the 200
crew here their own billets."
    "Actually there are two singles in the section I have
assigned to you.  As for the rest of the available housing we
are expecting more crew to transfer after the first space
trials.  In fact, the bunk rooms we have been staying in will be
mostly for their use."
    "You mean they finished the rooms we didn't need first, what
were they thinking?"
    "They were thinking that it would take almost half the time
to get a fewer number of larger quarters ready. Thus allowing us
to board earlier."
    Tarva then smiled and said "Now if you'll excuse me, I have
some packing to do."

-----------

    Tarva's new quarters were near the middle of the saucer
section near the Captain's.  They were small compared to any
officer quarters on the Enterprise.  There were two 'rooms'
separated by slight dividers.  Tarva wearing her black robe sat
cross legged in the middle of the bed staring at the mirror on a
near by wall.  She was not looking at her self but reflecting on
the nightmares that had been plaguing her.
    When the explosion on the Eclipse threw her and the Captain
into the escape pod it had ripped her face open.  She barely had
the strength to hit the eject mechanism before the final
explosion ripped the Eclipse apart.  The Captain's body had
protected her from most of the explosion but left her trapped in
the escape pod with it.  She then drifted for several days
before being picked up by the New Aukland.
    When she was rescued, she was unconscious and stayed that
way for quite sometime.  Her face was bandaged and she was
extremely weak when she finally woke.
    The realization she was the only survivor still plagued her.
As chief of security, it was her duty to do all she could to
protect the crew of the Eclipse.  She knew they were up against
an irresistible force and that the destruction of the Eclipse
was not her fault.  The honor bred into a Kalonian warrior,
however, haunted her every night.  She was being torn apart by
the loss of her ship and the honor of returning the war to the
Borg.

-----------

    Commander Norton watched First Officer Tarva approach the
entrance to the cargo bay.  It had been several hours since the
meeting on the bridge.  Tarva had expressed interest in the
shipment of the new pressure suits.  Now that he was about to
start putting them together she wished to be present.
    First Officer, Commander Sashon Tarva was an interesting
colleague.  After his arrival on the Vigilante Commander Tarva
had approached him about his position.  She said that she knew
that he was much more qualified for First Officer.  The Captain,
however, was under the impression that he had no aspiration for
a higher position and would much prefer Chief of Security.  If
the Captain were mistaken, Commander Tarva said that she would
talk to him about correcting the error.  Norton had no desire
for any higher command position, his goals were different than
most Star Fleet officers.

    "Sir," Commander Norton said when Tarva arrived "My crew has
begun assembling the first pressure suits."
    "Very good, Commander." Tarva said "Lets have a look".
    When they entered the cargo bay, they found it filled with
shipping containers.  Several stood open while black uniformed
security and engineering crew pieced together several pressure
suits.
    The suits like all other aspects of the ship had an
unfamiliar design.  Instead of the standard ribbed design they
had flat almost armor like panels on the chest and back.  All
panels were solid instead of flexible ribs.  They also had very
pronounced hinged joints.
    Commander Tarva had expected the suits to be black to match
the current color scheme of all the other uniforms.  These
suits, however, where a dull gray like the hull of the ship.
    Tarva walked around one of the suits, looked at Norton and
said "They look like something out of the dark ages."
    "They are." came a voice from the cargo bay door.
    "Sir." Tarva and Norton said together, it was Captain
Anthony.
    "As you said, we needed pressure suits for warriors."
Anthony said as he walked up to them.  "The NM-1's are more than
pressure suits, they are suits of armor."
    The Captain turned to one of the crew and said "Is one of
these completed?"
    The crewman pointed to one of the suits hanging on a
shipping container.
    "Have you completed complete systems diagnostics on it?"
    "It was the first thing we did before unpacking any of the
other suits, Sir" was the reply.
    Anthony than turned to Norton and said "Your phaser
please."
    Without hesitation Commander Norton handed the Captain his
phaser.  Captain Anthony then made a point of showing everybody
he was setting it to maximum power.  This would be enough to
vaporize just about anything smaller than a standard shuttle.
    "Stand back" he said and poured an extended beam into the
suit.  The suit and container jumped back from the force of the
blast.  Heat poured from the suit and the cargo container
buckled from it.  All present had to cover their eyes and faces
from the heat and bright red glow.
    The heat subsided quickly but the cargo container continued
to glow.  Anthony turned to one of the technicians and said "Run
a new diagnostics on it.  I also want to see a copy of its
internal atmospheric record."
    "Aye, Sir." said the crewman and pulled out a special NM-1
diagnostics tricorder which had come with the new suits.
    After a couple of minutes of running the diagnostics the
crewman said "All systems check out in perfect working order."
    The atmospheric report showed that the temperature inside
the suit had risen a total of 10 degrees Celsius during the
phaser blast.  It might have been uncomfortable but it wouldn't
have been harmful.
    "These suits are made of a similar material as the hull of
The Vigilante." Captain Anthony said giving the phaser back to
Norton.  "The material is different than our hull, it has a much
denser cell structure and disperses much more energy as heat.
The reason our hull is not made of it is that it takes ten times
the current hull material to make the suit material.  To protect
even more the suits also have built in deflector shields."
    Anthony then pointed to the life support pack.  "The NM-1
suits have an extended life support range of up to five days.
They have built in maneuvering jets, they're suppose to be even
better than the space walk packs we use now."
    Commander Norton decided to speak up "If these suits are
made of basically the same material as the hull does that mean
that scanners will not penetrate them?"
    Captain Anthony smiled and said "So they tell me, anybody
want to find out?"
    With very little discussion it was decided that Commander
Norton should be the first to try on the new suit.  It took a
while to configure a suit to fit him, but it would have to be
done eventually.  After suiting up he walked around and tested
the joints.  The suit fit extremely snug on him, but this was to
compensate for vacuum of space.
    "This isn't to bad" he said "It's much lighter then the
standard suit."  He than began studying the control panels on
one of his lower arms where's the cloaking button?" he said with
a wide grin.
    "They weren't able to reduce the circuitry to install in the
suit by shipping time."  Anthony replied seriously.
    "You mean they were trying to cloak our pressure suits too?
They really were pulling out all of the stops." Tarva said.
    "Actually if you want to be precise these pressure suits are
not intended for the large portion of the crew currently on the
Vigilante." Captain Anthony said.  "The only ones who will be
issued the NM-1 are command staff and security.  The rest will
be issued to the new crew we will be picking up after the space
trials have begun."
    He turned back to Commander Norton and said lets check the
standard tricorder readings.  The crewman with NM-1 diagnostic
tricorder replaced it with a standard tricorder.  After Norton
put on the helmet and lowered the face shield the crewman
started walking around him.
    The tricorder made it's usual buzzing and whirling sounds,
after a few minutes he said "The tricorder doesn't even pickup
the suit's energy pack.  It does, however, show a smaller solid
object like a rock of indeterminate make up, about a meter
high."
    Almost a meter was cut off Norton's height.  All present
were extremely impressed.
    "Now lets take a look at the new phasers..." Anthony said
and headed to a differant set of containers.
    They were breaking into the phaser boxes when Commander
Doittel and Doctor Cembera hailed Captain Anthony.  They
announced that the ship's cloaking was available for testing.
Captain Anthony agreed, he thought it was also a good time to
run scanner tests on the Vigilante.
    "Commander Tarva, have the scanner prepared Drop Ship
readied for a mission in two hours." Captain Anthony said.

-----------

    The Drop Ship swung around to face the Vigilante in its
space dock.  Ensign O'Malley had become the resident D S pilot.
She still insisted she was a Star Ship navigator, not a Drop
Ship pilot.  Nevertheless, here she sat with Captain Anthony
sitting in the co-pilot's seat the First Officer standing behind
him and the Chief of security standing behind her.  It was
enough to make even the most experienced Drop Ship pilot(if
there was one) nervous.
    Captain Anthony was busily working the scanners that had
been installed for this exercise.  He looked up and smiled, "I
read this side of the space dock structure without problem" he
reported.  "I can count every soul in Construction offices and
housing.  The structure on the far side of the ship appears to
be fuzzy.  From the scanners I would say that a small tug size
vessel may be in dock.  I, however, do not read any life forms
on the vessel."
    Commander Tarva smiled and said "A standard tug is less than
a quarter the mass of the Vigilante and only has two warp
engines.  Currently there are over two hundred crew and
construction personnel on the Vigilante."
    Tarva then pulled her oversized communicator out of one of
her pockets and said "Engage cloaking."
    "Acknowledged" came back Dolittel's voice.
    The Vigilante shimmered a bit and disappeared.  The girders
on the far side of the ship became visible.  The only odd part
were the few supports connecting the Vigilante with space dock,
they seemed to be cut off at mid point.
    Captain Anthony spoke up with an update from the scanners
"Scanners now show no presence of the Vigilante and clearly
define the whole space dock.  This is going to be a very
interesting mission."

-----------

    The dull gray Vigilante hung in the black girders of it's
space dock backed by the turbulent orange of TE-4.  On one of
the girders stood a lone figure in a gray pressure suit similar
in color to the ship.  All four warp engines glowed blue from
testing.
    Captain Anthony hadn't had time to look at his ship since
the crew boarded.  It was now two months later and this may be
the last time he would see the Vigilante from the outside.  They
were scheduled to begin space trials today.  After leaving space
dock they would not return to the Tau-Epsilon system, any
problems that came up they were required to fix on their own.
Because of this policy, all systems were being meticulously
checked before the trials began.
    "Preparing to release supports." came a voice from
Construction Control.
    "Acknowledged" Anthony said as he stepped off the girder and
fired his maneuvering controls "Vigilante, engage stabilizer
engines."
    "Aye, Aye, Sir." replied Commander Tarva.
    As Anthony came down over the top starboard warp drive he
could see the relatively small stabilizer rockets begin firing
while the supports from space dock were released.  The
stabilizer rockets were computer controlled to keep the
Vigilante in a relatively fixed position.  In this case the
fixed position was in relation to the space dock.
    "Commander Dolittel, what is our earliest estimated time of
departure." Anthony said to his suit's communicator when he
entered the air lock.
    "I can have us ready for departure in six hours" said
Dolittel almost immediately.
    "You have two." said Anthony with a smile.
    "I think we may be able to pull that off." was Dolittel's
smart reply.
    Captain Anthony knew that John Dolittel seemed to always
tripled his actual estimates.  Dolittel had said he started it
when he was in the Academy just to give himself room for error.
He than found that it made himself and his team look good when
they came in under their estimated times.  Now he just did it
out of habit, it had just become expected of him.

-----------

    Captain Anthony sat in his place on the bridge in front of
him to his right sat the red headed Ensign O'Malley who was
Picard's contribution to his crew.  Picard had made a good
choice in this one, she not only was a highly qualified
navigator but had proven herself a fine Drop Ship pilot.  She
also had something in common with many of her fellow crew, she
had a personal interest in the Borg.
    Ensign O'Malley's father, Doctor Peter O'Malley was killed
when the Borg destroyed his ship.  With eleven thousand
personnel killed and nearly forty star ships destroyed the one
encounter with a Borg ship touched all members of Star Fleet
personally one way or another.
    Captain Anthony reflected on how many of his crew came to be
on the Vigilante because of that one battle with the Borg.
Commander Tarva was the lone survivor of the Eclipse, Ensign
O'Malley lost her only family, and many others qualified for the
no family, no attachments, provisions of the mission for the
same reason.
    As he sat waiting for the launching of the United Star Ship
Vigilante, Captain Anthony felt extreme satisfaction.  He too
met all requirements of the mission thanks to the one battle
with the Borg and Locutus.  His last command the USS Nielsen was
destroyed in the battle.  He had been on Star Base A-6
recovering from a sever bout of Anturi Flu.  The medical
facilities on the Nielsen had not been adequate for his
recovery.  The Nielsen had just docked at Star Base and
transferred him to it's infirmary when the call came.  The
Nielsen was to join the armada in a last ditch stand against the
Borg.
    Captain Anthony was unconscious the whole time until the
Nielsen was destroyed.  When all life on the Nielsen ended,
Anthony woke up screaming.  They told him he screamed for an
hour after waking.  The reports of the defeat at Wolf-359 had
not yet reached Star Base A-6.  In fact, Anthony was not aware
he wasn't on the Nielsen.  The news of the destruction of the
Nielsen dropped him into a shock induced comma.  With the death
of the Nielsen his life ended too.  His wife, lover, best friend
was also his First Officer.  She was in command in his absence,
she would have faced the Borg in his place.  She had died
without him by her side as they had always promised each other.
After waking from the comma his hair started to come in gray.
Now just a few years later his jet black hair was almost all
gray.
    After the destruction of the Nielsen, Captain Robert Anthony
lost all desire to have anything to do with Star Fleet.  He
moved to the pioneer planet, Infiniti West and settled down to a
life of isolation.
    Infiniti West was a colony planet with an environment
similar to earth.  During the early days of colonization,
Infiniti West was settled by a group that spurned all
technology.  Their goal was to establish a colony based on the
pioneer life style of 18th century North America.  Infiniti
West's varied climates made it ideal for adventurers.  From
seemingly endless tracks of ancient forests to expansive hostile
deserts to mountain ranges that made anything on Earth look
puny.  Infiniti West had something for everyone.
    There was a small Star Fleet station in orbit and some
inconspicuous forts, that helped control visitors to the planet.
Their main function was as base stations for scientists studying
Infiniti West's immense ecology.
    Robert Anthony lived in a small stone dwelling he found in
the high mountain region of the main continent.  The cabin was
just below the mountain's tree line.  In the foot hills was a
small trading post catering to the local trappers and home
stedders.  For over a year he lived alone seeing only an
occasional trapper.
    His solitude ended when he came back from a hunting trip to
find two Star Fleet officers examining his cabin.  One was a
taller bearded man but the other gave away who they were, the
gold skinned android, Data, was the signature of the Enterprise.
    "Captain Robert Anthony?" said the android.
    Anthony dropped the carcass of a six legged furry animal
onto a stone table in his yard.  Then jumped down from his
horse.  The horse whinnied and backed a few steps from Data.
Horses had been scattered through out the stars from Earth and
they still seemed to know when something wasn't natural.
    "Captain is a Star Fleet title," Anthony said as he began to
walk the horse to it's carrel. "and Robert is what my wife
called me."
    "I'm William T. Riker First Officer of the U.S.S.
Enterprise." said the bearded man "This is Mr Data".
    Anthony put the horse in it's carrel and began removing the
saddle.  He turned to the two officers and said curtly "What do
you want with me?"
    Mr Data began relating their story, it turned out they had
been searching Infiniti West for several months.  A team had
finally been able to locate him when they found the small
trading post and heard of a loner in the mountains every one
called, Star Fleet.
    Thus began the drawn out negotiations as they tried to
convince him to return to Star Fleet.  The Enterprise had
already spent two months in orbit around Infiniti West with many
teams looking for him.  They now seemed quite intent on not
leaving until he agreed to come with them.  After more than two
weeks he rode his horse to the trading post, where he gave his
few possessions to the only person he thought of as a friend,
the merchant he did most of his business with.
    Riker, dressed in the local style outfit he had worn during
the search met him at the trading post.  Together they beamed up
to the Enterprise and Robert Anthony rejoined the elite rank of
Star Fleet Captains.

-----------

    "Captain, this is engineering, we're ready any time you
are." It was Dolittel in his usual informal manner.
    "Construction Control," Captain Anthony said "the USS
Vigilante is ready to leave the nest."
    "It's been a wonderful experience" came Doctor Cembera's
voice in reply.

    Doctor Cembera stood in Construction Control.  She watched
as the Vigilante slowly moved out from under her.  It had a
preset course of test maneuvers to run while leaving the system.
They had to make sure all the bolts were tight before trying the
warp drives.  Once they were out of the Tau-Epsilon system
though, they would never return.  Doctor Cembera had a tear in
her eye as if watching an only child go off to war.
    "Doctor," came a voice from beside her.
    "Yes."
    "Memory Alpha reports they are ready to begin shipping the
hulks you requested."
    Doctor Cembera continued to watch the Vigilante slide
silently away then said "Tell them to proceed."

-----------

    The trip out of the Tau Epsilon system was an anti-climax.
After so many hours of work few even knew they had even gotten
under way.  The ship performed flawlessly during the maneuvers
through the system.
    Before entering warp, Captain Anthony ordered the cloaking
engaged.  It was standard operating procedure that the Vigilante
run cloaked.  It would not do for anybody to get a look at her
while she remained 'Top Secret'.  The trip through the Tau
Epsilon system would be the only time they would run uncloaked,
while the cloaking was functional.  For the cloaking to function
the deflector shields only needed to be at 10% power.
    "Set course to Predetermined Test Coordinates three."
Anthony said.
    "Aye" Ensign O'Malley said while entering the course.
    "Warp one, engage."
    "Warp one engaged" said the middle aged human sitting in the
Helmsman's seat.
    "Engineering, how are we doing?"
    "I thought we were going to test this thing." said Dolittel
"Not just push her about."
    "Warp five, engage" Anthony said.
    "Warp five engaged" returned the Helmsman.
    There was no obvious difference between sitting in space
dock and traveling at warp five except the view screen no longer
showed TE-4 below them but the standard 'rushing stars' opticle
illusion of warp.
    The Vigilante spent the next week testing the engines for
extended periods of time below warp 9.6.  Finally, Captain
Anthony decided it was time to test the Vigilante's acceleration
to warp 9.6 from sub warp.
    "Sir, all hands report ready for acceleration test."
Commander Tarva reported.
    Once again Captain Anthony didn't expect to notice anything
special when they jumped to high warp.  He couldn't help but
wonder if they might sense something.
    "Sir, test coordinates set for warp 9.6 acceleration test."
Ensign O'Malley said.
    "Warp 9.6, engage" Captain said.
    "Warp 9.6 engaged." replied the helmsman than immediately
reported "Current velocity, warp 9.6"
    Anthony thought he felt a slight acceleration but nothing
substantial.  They achieved warp 9.6 almost instantly and the
Vigilante didn't seem to be effected in any way.
    "Engineering, hold current velocity and begin complete
diagnostic tests, on engines, all systems and ship's
structures." Captain Anthony said then headed to the command
room.
    Anthony immediatly began preparing a sub-space transmission
to a small colony world near the Romulan Neutral Zone.

-----------

    "Captain Anthony, Sir" came Dolittel's voice over the
intercom.
    "Anthony here"
    "All tests complete, the Vigilante has held warp 9.6 for
seven hours with no adverse effects."
    "Very good, prepare to come out of warp."
    Captain Anthony walked back onto the bridge, his crew was
busy running continuous high warp test.  "Helm, bring us out of
warp."
    "Aye, Sir".
    "Ensign O'Malley, Plot the best possible course to the
Romulan Neutral Zone, sector 5876.34."
    Ensign O'Malley pushed a few buttons on her panel. Then said
"Course plotted ,Sir."
    "At warp 9.6 what would be the estimated time of travel?"
    Ensign O'Malley pushed a few more buttons and said "Two
weeks, three days two hours, eighteen minutes.."
    "Very good," Captain Anthony said and took his seat.  "Set
new course as plotted, warp nine, engage."
    "Ensign O'Malley on present course what would be the
estimated time of arrival using controlled worm hole effect?"
    Ensign O'Malley turned to a second console that appeared
tacked on to her normal console.  After pushing several buttons,
looking at the display and repeating she said "If we are able to
cancel the Worm hole after exactly two minutes 43 point 7676543
seconds we should emerge in sector 5876.34."
    Anthony thought a second and said "How long is that figure
good for?"
    "Sir, taking into account our current speed and the size of
sector 5876.43, about 2 minutes.  After that the fractional
seconds would begin making a significant difference."
    "Recalculate the timing for fifteen minutes from now and
feed it to my station."  Anthony had configured his console to
control the worm-hole effect along with helm and navigation.
    He then pushed the worm hole warning alarm.  A loud claxon
began blaring from the ship wide intercom.  Another button shut
the claxon off on the bridge.  The view screen began showing a
count down to the controlled worm hole.  The bridge crew began
strapping themselves into their seats for the first time.  While
all over the bridge on duty and off duty personnel took their
own seats.  Many crew had been woke out of comfortable beds not
knowing what was going on.
    The view screens in each cabin announced the planned
maneuvere.  Each cabin also came equipped with Rough Duty chairs
usually built into a wall as part of the decor.  All chairs had
occupant sensors activated during the worm hole warning.  The
computer was able to report when all personnel were accounted
for.
    "Controlled worm hole count down initiated." Captain Anthony
said almost sarcastically after shutting the bridge claxon off.
    As Commander Tarva watched the count down approach zero she
couldn't help but think this could be their actual first step to
meet the Borg or it could all end right now.
    "Shields at Maximum." she heard Commander Norton report just
before she saw the view screen rush at her.  It felt as if she
was being crushed on a high gravity planet.  She could feel her
seat begin to wrap around her and heard a female voice begin to
scream.  In front of her Ensign O'Malley bucked against the
restraints and belts, it must of been her screaming.  Other
voices began to fill her head as the rest of the bridge crew
joined the chorus of screams.  She watched Ensign O'Malley start
screaming in pain and soon heard the new female voice.  Tarva
realized that she must have heard her own voice to begin with.
    As the count down on the view screen approached the shut
down point Tarva thought she could feel the ship bump or shift a
little.  The ship seemed to begin to fall away from her.  She
felt like she was alternately hanging from the restraint belts
and being pushed back into the chair.  The timer on the view
screen counted passed the set shut down point.
    The Vigilante seemed to tumble end over end through the worm
hole it's own warp drives had created.  The effect was no longer
controlled by the Vigilante.  Tarva knew something was wrong by
the change in the felt effect and tried to reach for her own
controls which proved at first quite elusive.
    After bringing up helm station she began issuing shut down
and stabilization commands to the drive systems.  Nothing seemed
to have any effect, finally, she started desperate maneuvers
including reverse warp.  Anything to break out of the worm hole.
When the Vigilante finally broke out,  the crew blacked out.
    Tarva woke to the sound of a moaning bridge crew.  The view
screen showed 3 minutes 22 seconds of worm hole effect.  The
other members were slowly regaining conciseness.  Tarva
unbuckled the straps and opened her restraints.  Ensign O'Malley
was already standing and stretching.
    Captain Anthony hit his intercom and said "Engineering,
Dolittel what the hell happened to us?"
    "Unknown, we're trying to determine that out now, Sir. "
Dolittel said groggily.
    Tarva saw Ensign O'Malley punching buttons on her console.
"Ensign O'Malley, report what is our present location?"
    "According to the Star Charts we're well within the
Romulan Empire."
    "I was afraid of that." the Captain muttered.
    "Bridge this is Engineering."
    "Go ahead" Tarva said.
    "Sir we'll have to shut down all power to shields and
engines so we can effect repairs to number three warp engine"
    "Commander Dolittel we are in the middle of the Romulan
Empire we may be needing the warp drives and shields.  Do we
currently have shields and cloaking?"
    "Yes sir, shields are at 40 percent and cloaking is
activated."
    "Do we have maneuvering capabilities?"
    "Engines one and two are on line engine four will remain
inoperative until engine three comes back on line.  Our current
sustainable top speed is warp 7 and the so called 'controllable
worm hole' is inoperative."
    "Ensign O'Malley, at warp 7 how long will it take to get to
our original destination?" Anthony said turning to his
navigator.
    The Ensign punched a few buttons and reported "Five weeks,
three days ".
    "and Warp 9.6?"
    Ensign O'Malley reentered her figures and said "One week
five days."
    "Engineering, what is the estimated time for repairs and
corrections to warp coil?"
    "We should be able to do it in three days." was Dolittel's
reply.
    Anthony thought for a bit and said to his first officer "If
we commence with these repairs we're going to need some place to
hide.  We don't want to be hanging in the middle of Romulan
territory with all systems off line.  No matter how well our
hull protects us from sensors."
    "Agreed, Sir, What do you have in mind." Tarva Said.
    "Since the Romulans may have detected our worm hole this may
not be the best place to hang out.  Ensign O'Malley is there an
uninhabited star system in this area?"
    "Sir, sensors show two systems in this sector, our records
of Romulan space are not detailed enough to give specific
habitation information.  One system, however, is a red dwarf
star and it is very unlikely there would be any colonies there
but there may be a science outpost."
    "Set course for the red dwarf system"
    "Course plotted and set" O'Malley said immediately.
    "At warp 7 what is our ETA?"
    "two days seven hours twenty three minutes, Sir"
    "Sir," Commander Norton interrupted "Romulan war bird
uncloaking about ten kilometers off port bow."
    "Have they seen us?" Tarva asked.
    "Not yet, they're apparently here to investigate the worm
hole.  They are doing intensive sensor sweeps of the area.
Weapons are unarmed and shields are at a minimum."
    Tarva looked at the image Norton had put up on the screen.
"If they were able to get here that fast we must be in a heavily
travel sector."
    "Agreed," Anthony said "set course to red dwarf system full
impulse.  Lets put a little distance between us before going to
warp.  We don't know how good their motion detectors are. Engage
    "Engineering"
    "Commander Dolittel here."
    "Commander, we will be in position for you to effect your
repairs in about three days"
    "Very good, Dolittel out."
    Anthony then turned to Commander Norton "Have they spotted
us yet?"
    "Not yet sir, the war bird is still directing sensors at the
area of the worm hole exit."
    "Very good, Helm, warp 7, engage".
    The Vigilante jumped to warp seven and headed toward the red
dwarf.

    There were no research stations or other habitats in the
system.  There were several small planets and a gas giant, the
vigilante dropped into a close orbit around the giant and tried
to hide in its electromagnetic aura.
    Engineering crawled into the warp engines to fix the bad
coil and test the other three.  The rest of the crew began
running extensive diagnostics of all systems.
    Commander Tarva's aversion to sleep began to catch up with
her.  Captain Anthony ordered her to her cabin until the warp
drives were back on line.  He made it quite clear that she was
not to return to the bridge unless ordered there.
    Tarva was wearing the under uniform shorts and tank top
while exercising in her cabin.  She had set up several gadgets
for more efficient exercise.  A chin-up bar was stretched
between the room dividers and a slanted sit-up board was in her
front room.  Her hair was rolled in to a bun at the back of her
head and she was soaked with sweat.  This is how Commander
Norton found her when he came to visit.
    "Your suppose to be resting." he said as she wiped sweat
from her high forehead.
    She looked around the room and said "I am relaxing."
then went into the head.
    "I don't think this is what the Captain had in mind." Simon
said as he dropped into one her chairs.  Because of their
similar experiences they had become fast friends.
    Simon heard Tarva taking a shower and had time to reflect on
the circumstances which brought him here.  He had spent his
childhood on a planet called Hellguard.  It was a planet the
Romulans occasionally dumped their half breed children born of
captives.  He was approximately twenty when he was found as an
emaciated stow away on a pirate freighter that had visited
Hellguard.  They put him to work as slave labor and it took him
nearly two years to escape to a Federation colony.
    His first task was to create a new life.  He started by
picking a new name.  He decided a human name would be as fresh a
beginning as he could get.  After many years he was finally able
to work his way to Earth and petition to the Academy for a
scholarship.  Thanks to the long life associated with being half
Volcan and half Romulan he was not considered too old.
    He was finally content, after years of hopping from ship to
ship he was finally on the most powerful Star Ship Star Fleet
had ever conceived.
    Tarva came out from her shower wearing her short black robe
and her wet hair tied up in a towel.  She sat cross legged on
her bed and said "How are the repairs coming?"
    "Commander Dolittel reports that the repairs are coming
along on schedule.  We should be able to continue the tests of
the Vigilante in a day or so."
    "Very good we have a lot to do before we can embark on our
mission.  Has there been any more signs of Romulans in the
area?"
    "We've been keeping a constant passive scanner watch since
taking the shields and warp drives off line.  There has been no
sign of activity in this area."
    "This all seems too easy."
    "The right equipment can make a difficult job seem easy."
    Tarva smiled at this cliche, Simon seemed to like cliches.
She responded with her own "Yes but sometimes when things seem
to be going right something has got to go wrong."
    They both laughed at their exchange, Norton then got
serious.
    "Sashon," very few people knew her personal name and fewer
yet would ever use it, "you haven't been sleeping much since
coming on board, we all know it, is there anything I can do to
help?"
    Tarva sat up stiff "A Kalonian does not need as much sleep
as other members of the Federation." she said proudly.
    Simon was not impressed, he seldom was, "You haven't
answered my question.  From one suspicious personality to
another, something is wrong, you can't hide it from me.  I know
you too well".
    Tarva made a point of looking at her time piece and
announced "It is time for me to sleep, we can finish this
conversation at a later date."
    Knowing he was at a bulk head he stood bowed slightly from
the hips and walked out.
    Tarva assumed her cross legged meditation position.  It did
not give her the absolute rest every body eventually needed.  It
did, however, give her some rest and the dreams didn't come.

    ...Tarva lay in the escape pod barely conscious.  She could
see out of her right eye but only barely.  She could feel a
weight laying across her.  With great effort she managed to pull
herself out and look down at it.  The remains of her Captain
still lay partially on her.  His black skin was barely
recognizable through the blood and lacerations.  Most of the
front of the body had taken the force of the explosion that had
thrown them into the pod.  Much of the flesh and muscle had been
blackened from the blast.
    As she looked at it, the body shuddered and took a labored
breath.  It's eye opened and the burned skull turned to look at
her.  The remains of its mouth and jaw struggled to form words.
    "You failed." it gasped "The ship is destroyed your Captain
and crew are dead.  How is it that you managed to save your
self?  A Kalonian putting herself ahead of her comrades who
depended her?  Who do you think you are?  Do you think you
really deserve to live?" It had been edging toward her and
grabbed her face.  It started pulling her towards it, with what
was left of it's mouth dangling open.
    Tarva woke thrashing and screaming she was totally soaked in
sweat.  She could still feel hands on her face and screamed even
louder.
    She could feel words in her mind telling her to be calm.
She was safe and nothing could hurt her.  She could still feel
the hands touching her face but now it was calming.  She thought
she could even see her own face with light skinned hands on it.
The nightmare had turned to a dream she could relax and let her
muscles loosen.  Finally she felt safe enough to open her eyes
and see what was real.
    Commander Norton sat above her, his bald head accented by
his pointed ears.  His hands had been the ones she had felt.  He
pulled his hands away and looked into her eyes.
    "How do you feel?" he said.
    "What happened?"
    "I wasn't gone more than twenty paces when I came back in to
ask you something.  You had already fallen into a dream,
nightmare.  As soon as I touched you, you started screaming.  I
only had time to use a mind meld to calm you as you came out of
it."
    "Every time," Tarva finally admitted "I fall a sleep the
dreams of the Eclipse's destruction return.  They change,
they're becoming more vivid, more twisted.  Scenes that would
normally not bother me are scaring me like I've never known.
I've become frightened of sleep, a Kalonian warrior afraid of
her bed.  What have I become?"
    "You need to resolve the guilt you feel of being the only
survivor of the Eclipse." Norton said. "I don't know if I can
help you with that.  It is something you must admit to yourself
and cope with it.  I can, however, use the mind-meld to perhaps
help you sleep better.  Are you willing to let me try?"
    Tarva thought for a second then looked down at the black
robe plastered to her body with sweat.  "I'll try." she said.
    She then got up and went into her bathroom.  He could see
her open the robe and drop it off her arms as she disappeared
around the corner.
    When Tarva returned she was wearing a robe the same design
as the black one only a dark red.  She still wore the Simtar on
her right shin.  It occurred to him that he had been extremely
lucky she hadn't reached for it when she woke from the
nightmare.
    Tarva got into her bed, for the first time in a long time
under the blanket.  Commander Norton sat in a chair next to her
and lightly touched the sides of her head as if massaging the
temples.
    As she drifted into sleep he assured her the dreams were an
illusion.  This time with his comfort the dreams stayed away.
He could keep the dreams from her, the guilt she would have to
work out on her own.  He did, however, plant suggestions to keep
the fear away.  Without the terror she had been experiencing
with the nightmares, she would be able to sleep.

    Tarva woke to the piping sound on her intercom and Captain
Anthony paging her.  She sat up and looked around her.
Commander Norton was long gone.  Her red robe was tangled into
the covers of her bed, all she wore was the Simtar and sheath
strapped to her leg.  How long she had been a sleep she had no
idea but she felt totally refreshed.
    "Commander Tarva here." she said as she stood and stretched.
    "Please report to the bridge, immediately."
    "Aye, Sir."
    Tarva looked at her time piece and tried to remember what
time it was when she kicked Simon out the first time.  By her
calculations she must have been asleep over fifteen hours.
    When Tarva arrived on the bridge she hadn't taken the time
to brush and braid her hair as normal.  Instead it lay rather
unruly on the top of her head and a long pony tail tied in
several places hung down her back.
    On the view screen was a distant shot of an uncommon Romulan
ship.  Tarva took her seat next to the Captain studied the image
for a few seconds and said "What is it?"
    "It appears to be a Romulan research vessel of some kind."
Commander Norton said.  "It came out of warp uncloaked several
minutes before we started paging you."
    "What's its projected course?"
    "That's why we've gotten the bridge crew together."  Anthony
said "Its current trajectory will put it in orbit around this
planet in about an hour"
    Tarva checked the current ship's configuration.  The shields
and engines were still off line.  The blast shields were shut to
help reduce the Vigilante's sensor profile.
    "Are we going to go into silent running?" she asked.
    "All departments are preparing for the restricted movements
called for by silent running."  Commander Norton reported "It'll
initiate in five minutes."
    "And Engineering?"
    "Engineering, reports all systems should be back online in
six hours.  They are beyond the point of no return and must
finish the repairs before they can bring anything up." Captain
Anthony said seemingly unconcerned.
    "And what is the current plan?" Tarva said looking at her
Captain.
    "We sit and hope they don't see us.  The planet is big
enough, unless they actually see us they shouldn't pick up any
sign of us."
    "Hence the silent running."
    "That's correct, Commander."
    "I hope it works."
    "Your not the only one." Captain Anthony reclined his chair
slightly and looked at the screen.
    The crew of the Vigilante began a long wait.  They took
their places in the Rough Duty chairs.  All accept essential
activity was curtailed.
    Many automatic systems were discontinued or limited.  The
Turbo lifts ran at one quarter speed unless an emergency over
ride was issued.  Most important, however, was that the life
support circulation systems were also limited.
    When the Vigilante's orbit took it to the night side of the
planet the temperature dropped to an unusual and generally
uncomfortable 5 degrees Celsius.  On the day side the
temperature rose some what but the hull construction didn't
allow much solar energy to penetrate.  Temperature changes were
expected so all Rough Duty seats were temperature controllable
but it didn't help much.
    Engineering continued their repairs but at a much slower
pace.  Noises from any accidents may be picked up by the Romulan
ship, especially if it was a research vessel with hypersensitive
scanners.
    The arms holding the warp drives did not have artificial
gravity.  The engineers working on the drives were carried
through the arms in specially designed turbo lifts.   They then
worked in zero gravity using magnetic tools and holders. The
work required highly skilled personnel and was extremely
dangerous.
    The valve that ruptured, had been damaged during the
original mishap.  When it blew, the specialist never new what
hit her.  A large blast of gas crushed her against the bulkhead,
it also caused an exterior evacuation valve to blow.  The
resulting gas leak caused a bright orange streak as it burned in
the planet's atmosphere.
    When the emergency lights flashed, Ensign O'Malley shifted
the view screen to reverse.  As the bridge crew watched, an
orange streak flared out behind them.
    Captain Anthony turned to his First Officer and said "I
think we're in trouble".
    "Engineering, what happened down there?" Tarva said.
    "Unknown, Sir" came Chief Swanson's voice "Commander
Dolittel is suiting up to take a team and have a look."
    Tarva turned on the view screen and looked at the concern on
Swanson's face. "We're going to need maneuvering as soon as
possible."  Tarva said trying to stress the urgency.
    "Commander," Swanson said "We still needed two hours before
the accident happened."
    "Chief, we need to get this thing moving.  We're also going
to need weapons or your not going to have time to finish the
repairs."  Captain Anthony said.
    Chief Swanson had gone ghost white, dealing with command was
not her job, she was a transporter Chief.  "We'll do what we
can." she said and turned off the screen.
    Anthony turned to Tarva and said "Chief Swanson needs some
help."
    Tarva headed toward the turbo lift issuing the emergency
over ride commands as she went.
    "Sir" it was Ensign O'Malley.
    "Yes, Ensign."
    "Sir, all the drop ships are armed and D.S. Three is still
equipped with cargo latches..."
    "Of course, we can use it to change our orbit, if we have
time.  Commander Norton take Ensign O'Malley, launch two drop
ships, one to provide cover the other to move the Vigilante."
the Captain said.
    "Ensign O'Malley?" Commander Norton asked the Captain.
    "She's the only one on board who's had experience piloting
the tug converted Drop Ship."
    "Very well." Norton said joining the navigator at turbo-lift
two and said to the intercom "Shuttle bay, prepare drop ships
three and seven for emergency use."
    "Acknowledged" was the brief reply.
    As the pair left the bridge Captain Anthony reconfigured his
console for the navigator station.
    As soon as the turbo lift's door closed Commander Norton
started giving additional instructions to the shuttle bay.
    "Commander, Sir, don't we have any other Drop Ship pilots on
board?" Ensign O'Malley asked when Commander Norton finished
talking to the shuttle bay.
    "No, we do not.  The drop ship pilots will be boarded after
the space trials"
    "That helps us a lot now doesn't it?"
    "Well, Ensign, it's keeping you busy."
    The turbo-lift's high speed yellow warning light flashed,
then it jerked to a stop at the shuttle bay.  In the shuttle
bay, two Drop Ships waited for launch.  Out side of the lift two
light weight pilot's pressure suits waited for them.
    They had already started removing their baggy black uniforms
while in the lift.  Jackets and boots laying on the floor of the
lift, Commander Norton and Ensign O'Malley stepped out of their
pants as they stepped out of the lift and into the pressure
suits.
    The doors of the Drop Ships stood open and the engines were
already warming up.  As they approached the ships, the shuttle
bay doors opened with only a force field between them and open
space.  When they entered their perspective ships, the lowered
steps practically lifted them in as they closed behind them.
    As soon as she was strapped in, Ensign O'Malley had Drop
Ship Three powered up for launch.  She watched D.S. Seven launch
and flicker out practically before he was out of the bay. Janice
waited a preset time and launched D.S. Three.  As soon as she
could power back from launch she too engaged the cloaking.
    Time was of the essence, the gas they leaked had burned in
their orbit.  It's composition, caused a solid sensor reading
when it burned.  Her goal was to shift the Vigilante to a
different orbit so the Romulans would be a lot less likely to
find it.  Luckily they had taken an orbit on the opposite side
of the planet but it wouldn't be long before they spotted the
gas trail.
    Immediately after launching, Ensign O'Malley turned D. S.
Three back toward the bulbous main body of the Vigilante.  She
skimmed across the hull between the upswept arms of the top warp
engines.  The magnetic couplings were extended searching for the
Vigilante's frame.
    Since the Romulan's sensors would have a very difficult time
finding the Vigilante the largest worry was someone actually
seeing them from a view screen or window.  If They got close
enough to be spotted, D.S. Seven would have to destroy the
Romulan ship before it could report to it's superiors.  Under no
circumstances, could the Vigilante allow it's existence be known
by the Romulans.
    The Vigilante was designed with scramblers, hopefully
capable of confusing the Borg for an extended period of time.
They were prepared to use the scramblers to prevent the Romulans
from reporting back until D.S. Seven was able to destroy them.
Hopefully, it would not come to that.
    The feedback from the couplings told her she was over a
likely spot.  Slowly she landed D.S. Three on the hull of the
Vigilante and engaged the couplings at full strength.  The
connection, however, was not strong because of the composite
hull but it would have to do.
    The Drop Ship's sensors showed the Romulan closing the gap
from the opposite side of the planet.  She had to move the
Vigilante away from the current orbit and try to keep the planet
between them and the Romulans.
    The problem was that because of the weak connection she
could not accelerate quickly.  She had to work slowly and nudge
the Vigilante into a still lower and different orbit.
    "Ensign O'Malley," came Captain Anthony's voice over the
directed beam communications "their getting close."
    "Sir, I have a weak connection if I accelerate too quickly
I'll lose it.  How much longer till we have cloaking back on
line?"
    "Because of the accident, Commander Dolittel estimates we're
back to just under two days."

-----------

    The Romulan research vessel, Raptor, had just returned to
its post.  It's mission was the study of the effects of a
collapsing red star on it's planets.
    "Commander, I read some kind of an anomaly on the opposite
side of the planet." the young female Romulan said almost
apologetically.
    "Elaborate." said an older female Romulan sitting in the
middle of the bridge.
    "I was running standard high altitude atmospheric scans when
I watched an object form and grow in low orbit.  It reads as a
solid cylinder about 10 symtons long.  We are currently too far
away to get an accurate reading on it's composition." said the
young sensor operator.
    "Perhaps we have found a new phenomenon."  said the lead
scientist sitting at another sensor station.
    "Helm, adjust orbit for close inspection of this anomaly"
the Commander said.
    The Raptor adjusted orbit to intercept the anomaly.  As they
approached, the sensor operator reported "Sir, it is not solid,
it appears to be a gas that registered solid on the long range
sensors."
    As the lead scientist studied his scanners he reported "I am
not aware of any element that would create that kind of
reading."
    The anomaly was soon close enough to be put on the screen.
It was a long orange streak that seemed to be fading into the
atmosphere.
    The young sensor operator finished the analysis and said
"Sir, it appears to be pure mhalogin gas burning in the
atmosphere."
    "Where did it come from." the Commander said to herself.
    "Did you say mhalogin?" came an older male's voice from an
open door.
    "Yes, Centurian, but mhalogin does not appear naturally in
pure form and is rare in the Empire" the operator said.
    "I know, but the Federation uses it to cool warp drives."
the Centurian said.
    With the Centurian's comment the Commander hit the Red Alert
and yelled "Shields....Shields..."  Before the inexperienced
crew was able to bring shields up the ship rocked from an
explosion.
    "What happened?" the Commander shouted.
    "We've been hit" replied the Centurian calmly.
    "Get those shields raised.  Damage report, where were we
hit..sensors, who fired on us" the Commander shouted feeling
that she was about to lose her first command.
    The Centurian stood at a console after relieving a much
younger crew member.  "Commander," he said "the shields are
inoperative."
    The bridge rocked from another explosion from a different
side of the ship.  The helm console exploded in the operator's
face.
    "What's happening? Helm, get us out of here.  Communications
issue a distress call, tell them we are being attacked by an
unknown force."
    "Commander," the Helmsman said after the sparks died down
from her console. "I get no response from my console and
engineering reports major damage from the last blast.  All
engines are off line."
    "Commander," the senors Operator said "the sensors are
inoperative, all I get is static."
    The Communications Officer said "All communications are
down, I was not able to issue the distress call."
    The Centurian studied the communications console then the
scanners.  "Commander," he said.
    "Centurian" she acknowledge.
    "I believe our scanners and sensors are being jammed.  They
were not damaged in either attack.  Also," he said "the two hits
we received were precise, they knew right were to cripple us
with minimal damage."
    The Commander sat down in her chair heavily and looked at
the fading orange streak.  "A trap and we fell right into it.
How did the Federation get into the heart of the Empire without
detection."
    "Maybe they didn't." the Centurian said.
    "What do you mean."
    "Perhaps this is a test.  Perhaps you are being tested for
worthiness for higher command."
    She looked at him suspiciously "If this were the case
wouldn't you be told of it?"
    "I have no such knowledge."
    "Is this how they tested you in your day?"
    "We did not have the precision when I was young to conduct
this kind of test.  I have also never heard of it being done.
This does not, however, preclude it from starting."
    "So you don't have any actual knowledge that this is some
kind of test?"
    "Just the facts so far.  We are in the middle of the Empire
in an inconsequential system.  We have been attacked by an
unseen enemy with such precision that we are totally helpless
but have suffered very light casualties.  In fact so far there
have been no deaths reported.  It is my duty to report all
possible alternatives to you."
    The Communications officer had been checking the
surveillance films. "Commander," he said "I have found the
scenes of the attack."
    "We have pictures of our attacker?"
    "They're real brief, I missed them the first time around.  I
slowed the tape down and you can see it frame by frame."
    "Main screen"
    "This is the first attack." the Communications officer said
as he pressed a few buttons.
    The view was an angle up from under main body of the ship.
A frame at a time passed and they watched the nose of a strange
looking ship start to uncloak.  The star field peeled away from
it as if the ship were emerging from a pool of water.  Before it
was half uncloaked a missile fired from its nose.  The cloaking
began to reform around the front of the ship as the tail
finished uncloaking.  At no time, was there a frame that showed
the ship totally uncloaked.
    The Communications officer then said "I can overlay all
frames and get a complete picture of the craft."  He pushed a
few more buttons and a complete picture of the mysterious ship
appeared on the screen.  In front of it was a stream of
torpedoes caused be the overlaying of the frames.
    The ship was a dull gray color.  It had a stub nose with
bridge obviously the top half and weapons appeared to fill the
bottom half.  The body was wide and boxy with a single access
door on the side.  The back lifted above the box with what was
obviously the drives.  Missing, were the standard warp drive
pods sticking away from the body.
    "No warp drives." The Commander said.
    "Were did it come from, if it doesn't have warp drives?"
someone asked.
    "A mother ship." The Centurian answered.
    "Do you know what it is?" the Commander asked the Centurian.
    "My best guess, would be what we used to call a 'personnel
lander'" the Centurian said.  "We used them when I was a very
young officer and the Empire was expanding rapidly.  They
quickly carried warriors into battle zones where transporters
could not be used.  Planets that had transporter scramblers or
whose atmosphere scrambled transporters naturally.  I even
commanded several landing crews."  The Centurian shuttered at
the memory of the bloody battles.  These operations were not
well chronicled because of their high mortality rate.
    "Is this one of those landers?" the Communications officer
asked.
    The Centurian walked up to the screen and said "No, but it
has similar features." he indicated the wide body and rounded
bottom. "The bottom appears to have extra protection for the
stress of dropping through the atmosphere."  He then pointed to
the back.  "The main drives sit high, allowing for cargo to be
quickly loaded on and off through wide back doors.  If we had a
view of the back I'd stake my life it's got them back there.
Finally, if it wasn't designed to go into battle, it wouldn't be
armed and cloaked.  If it were designed for battle in space, it
would have warp drives, therefore, it must be designed for
battle planet side."
    The Commander sat and studied the picture then said "What do
sensors say during the exact time these frames were taken?"
    The scanner Operator said "I've been running all scanner
logs for the time frame.  The best I can come up with is that
they seem to have picked the ship up as a small piece of debris
of undetermined make up."  She then replaced the image on the
screen with the scanner interpretation for the same area and
time.
    Half the screen showed a graphic representation of what the
scanners had picked up the other side showed an analysis of the
same data.  The graphics showed an irregular shaped lump fade
on, stay several frames, then fade out.  At the time the lump
reminded on screen the analysis showed size about a quarter that
of the ship they had seen and mass as undetermined.  No life was
registered and all other data showed as undetermined.
    "What ever this thing is," the Commander said "It barely
needs cloaking"
    "Why doesn't it just destroy us and get it over with?" the
Helmsman asked.
    "Centurian," the Commander said "What would happen if we
suffered a massive loss of coolant from a warp drive?"
    "We'd be crippled" he replied.
    "That's right.  If this landing craft doesn't have warp
drives, it couldn't have leaked the mhalogin.  Therefore,
another ship must have leaked it."
    "It's protecting it's mother ship while effecting repairs".
    "And if the landing craft is cloaked and immune to the
sensors so probably would be the mother ship.  If it were still
cloaked, however, they wouldn't be worried about us being here."
    "The Federation doesn't cloak its ships," The Centurian
added "but The Klingons do."
    The Commander turned and looked at the Centurian and asked
"After all these years in service to the Empire, do you truly
believe the Klingons would have let us live?"
    "No"
    "Now forgetting the official propaganda about the Federation
and relying only on your experience as a War Bird commander,
what would the Federation do?"
    "The Federation would do all they could to avoid killing
even a sworn enemy." he said as if having a terrible secret
dragged from him.
    The Commander continued to look at her Second in Command and
advisor then said "What if the Federation is experimenting with
new technology, were would be the best place to put it to a true
test?  Inside the Romulan Empire, right.  Now, what if they had
an accident while stalking a harmless scientific vessel?"
    "They would do all they could to keep us from finding them
out."
    "Precisely,  If their cloaking is down our scanners would
pick them up but only as debris of undetermined make up, like
the landing craft."
    "So, they would have to cripple us while they limped away to
make repairs."
    The Commander suddenly smiled and said to the crew "Run all
scanner logs since picking up the mhaligon trail.  Look for any
debris of undetermined makeup.  Also, run a high resolution scan
of all view screen logs looking for anything that looks like
another ship."
    A loud claxon began blaring all over the ship.  The bridge
crew looked at the Commander and the Centurian.
    The Commander said almost in a panic "It's the Intruder
alert from engineering."
    Practically before the Commander had a chance to finish,
several places on the bridge shimmered briefly and figures
wearing dull gray armored suits with darkened face shields where
standing in strategic locations.  Before anyone on the bridge
had time to react, the intruders started shooting large black
phasers at them.
    The Commander and Communications officer were the first to
go down.  Before the Centurian was hit, he had time to fire his
disrupter at one of the intruders.  Several inches ahead of the
suit, a deflector shield shimmered when the blast hit.  The
armored intruder returned fire and the Centurian was thrown
against the console he had taken over earlier.
    Meanwhile, all over the ship, including the bridge,
canisters appeared and began emitting a white gas.  The effects
were relatively slow but the crew was soon unconscious.  Those
that were able to grab a gas mask were soon stunned down by an
armored figure that would beam in, shoot them, remove the mask,
then beam out.
    Two minutes after the intruder alert claxon came on a gloved
had reached to the Commander's console and turned it off.
Commander Tarva looked at the command console through her
helmet.  "Let's work fast" she said into her intercom "the
sooner we get back, the sooner Commander Dolittel will be able
to get back to work on the warp drives."  With transporters on
line, Dolittel was unable to continue repairs.
    Another figured appeared on the bridge with phaser in hand.
Commander Norton looked around and said to Tarva "All ships
personnel have been neutralized.  Once the gas is gone they
should be out about seventy two hours."
    "That should give Mr Dolittel more than enough time." Tarva
said as she pulled the Commander from her seat and dropped her
on the floor.  "OK, all personnel listen up, our first mission
is to find out if they actually saw the Vigilante.  If they did
we'll have to destroy the ship.  I regret it, but its necessary
for our own survival.  If we can find no record that they have
seen the Vigilante we must remove all records of their encounter
with us, starting with their entrance into this star system."
    "Too bad we don't have the time to wipe their memories as
well, that would make it really clean." Norton said.
    Tarva said "I know, but all they will have is memories of a
mysterious attack and no proof that will, in any way, link it to
the Federation.  Just speculation.  Without concrete evidence
the decision makers will not lend a lot of credence to their
reports."
    "I hope your right." Norton said.
    Tarva smiled and said "So do I." she had taken the
Commander's seat and began down loading the ship's technical
data banks to the Vigilante.  She also began down loading all
ship's logs to the Vigilante.  She knew that in the time they
had, she wouldn't get all of the information from either data
bank but would get quite a bit.
    After five hours, Commander Tarva signaled to the Vigilante
'mission complete'.  All the Vigilante personnel and gas
canisters beamed off at once.  With the canisters gone the
ship's life support would start clearing the gas off the ship.
Once the gas was gone, the crew would remain unconscious for an
estimated seventy two hours.

-----------

    Sixty eight hours after beaming off the Romulan ship,
Commander Dolittel signaled the bridge that all systems were on
line and functioning properly.  They had also begun to pickup
transmissions to the Romulan ship.  The transmissions meant that
they would soon be having more company, investigating the lost
contact.
    The Vigilante jumped to warp 9.6 as soon as leaving the star
system.  Captain Anthony immediately ordered a course plotted
back to sector 5876.34 using the controlled worm hole effect.
The crew nervously watched the count down remembering the last
trip.
    This time Dolittel's realignments worked, dropping the
Vigilante into the correct sector.  The worm hole effects were
not nearly as sever and the exit was nearly undetectable when
they dropped out.
    The Captain then gave the original coordinates as new
heading.  The Vigilante immediately jumped to warp eight for its
new destination.

-----------

    The Enterprise had been waiting at the predetermined meeting
place with no contact.  They were several days over the
estimated window of arrival.  Captain Picard, however, had
strict orders to stay on station until ordered other wise.
    "Captain" Lieutenant Worf said "Sub-space message coming in,
for your eyes only".
    "Thank you, Mr Worf, I'll take it in my ready room."
    The message was cryptic, to say the least, but it told
Picard all he needed to know.  After reading the message Captain
Picard remained in his ready room and called Mr Worf in.
    "Captain, there has been some trouble in Ten Forward." Worf
said stiffly before Picard could get down to his own business.
    "What kind of trouble?"
    "Sir, Two of our guests have been fighting rather severely."
    "Just how severely?"
    "They fought using knives, Sir.  Doctor Crusher is currently
mending both of them.  It seems they were able to inflict quite
a bit a damage to each other before security intervened." Worf
said obviously embarrassed for the performance of his personnel.
    "Is there something you think I should do about this, Mr
Worf?" asked Picard.
    "Sir, I was wondering what kind of punishment I should
impose since they are guests."
    "Well, don't they have a Senior Officer who can deal with
this kind of situation."
    At this Worf stiffened a little more "Sir, the combatants
were a Klingon officer and a Kalonian officer both claiming the
position.  They decided to settle the argument; traditionally."
    Picard sat back in his chair steepling his fingers in front
of his face and said "I see, perhaps after Doctor Crusher is
finished with them they should be placed together in the brig
for the duration of their stay on the Enterprise.  If either is
still alive when it is time to leave we'll let their new
assignment take care of any further punishment.
    "The reason I called you in, Mr Worf, is because I'd like
you to inform our guests that they should report to their
assigned assembly areas with their gear in eighteen hours."
    "Will that be all, Sir." Worf Said before leaving.
    "Yes, dismissed."
    Worf turned crisply and walked back onto the bridge.

-----------

    The two sat in the detention cell staring at each other.
They each wore a strange baggy black uniform with several
pockets.  One had the high, ridged forehead and nose of the
Klingon the other had a similar forehead but not nearly as
pronounced.  The Kalonian stood a few centimeters shorter than
the Klingon but matched him in weight and stubbornness.
    "If they hadn't interfered," the Klingon snarled "you'd be
dead, I had you beaten."  he spoke in Federation Standard since
Kalonians and Klingons traditionally despised learning or
speaking the others' language.
    The Kalonian laughed and said "You fool, you were about to
let your guard down thinking I was beaten.  Then I would have
ended your life.  Accept me as your superior officer and I'll
let you live when we get to where we are going."
    Now it was time for the Klingon to laugh "I find it
distasteful enough to serve next to a Kalonian, I would sooner
die than serve under one."
    "Like I said, that could be arranged."
    At that the Klingon growled and advanced toward the Kalonian
who did the same.  Before they came to blows they heard someone
holler to them.  It was the Enterprise's resident Klingon.
    "It is time to go." he said shutting off the force field.
He than threw them their bags, already packed.  "Come with me,
you can take this up at you new assignment."  Worf turned and
walked out of the detention area.
    "You have trained together for many months," Worf said to
the pair as they followed him down the corridor. "I would think
that these differences would have been worked out by now."
    "We trained in different teams." the Kalonian said.
    The Klingon, like most, tried his best to ignore this
Federation fool.
    Worf lead them to a cargo bay which was filled with many
more all wearing the same black uniform.  The group was
comprised of a number of different peoples.  Most prevalent were
Humans, Klingons, and Kalonians both male and female.  There
were others too some looked like Volcans and other assorted
Federation races.
    "What are we suppose to do here?" the Klingon said as he
entered the cargo bay.
    "Wait." Worf said and closed the door behind them and
continued down the corridor to a turbo-lift.

    Picard checked his the chronometer and said "Discontinue all
scanner operations, lower shields and turn off all exterior
recording devices."
    Commander Ryker looked puzzled and said "Sir, do you think
that is a wise thing to do, this close to the Neutral Zone?"
    "Number One, if it wasn't the proper thing to do, I wouldn't
do it.  Now are all of our guests in their assigned areas?"
    "Yes, Sir," Ryker said "and all ship's personnel have left
the areas."
    "Very good"
    "Now What?"
    "Now we wait." Picard said as he sat down in his chair.
    "Sir," Commander Data Looked up from his console "All
personnel in the cargo and shuttle bays have just disappeared, I
believe they have been transported."
    Picard smiled and said "Thank you Mr Data, now return to
normal operating conditions and set new course...."

                                to be continued ........


---------------------



                   T H E   V I G I L A N T E

                              IIIA

                         "The Warriors"

...
Thank God! there is always a Land of Beyond
    For us who are true to the trail;
A vision to seek, beckoning peak,
    A fairness that never will fail;
A pride in our soul that mocks at a goal,
    A manhood that irks at a bond,
And try how we will, unattainable still,
    Behold it, our Land of Beyond!
                    Robert Service
                    "THE LAND OF BEYOND"





    All of the new personnel had been transported directly to a
shuttle bay.  The main deck of the huge bay was  filled with the
black uniformed new arrivals.  Few of them noticed the strangers
standing in the front of the room.  It was hard, since the
strangers also wore the baggy black uniform.
    They had just enough time to adjust from the unannounced
transportation when the ship's public address system came on.
    "Your attention please." a man with long graying hair said.
The four hundred or so new personnel looked at him but basically
ignored his request and continued to talk among themselves.
    This time he spoke in a louder authoritarian voice "Crew,
Attention!".
    Their past months of training went into effect and the bay
was instantly silent and all personnel stood at attention.  All
eyes turned attention to the three standing at the head of the
bay.
    The two males stood about two meters tall, one was a human
with long graying shoulder length hair pulled back in a pony
tail.  The other was slightly shorter than the human he appeared
to be a vulcan and was totally bald.
    The third was a short female with long hair braided and
hanging down the middle of her back.  From her high smooth
forehead and brown skin many immediately guessed her to be a
Kalonian.
    The human continued to address them "I am Captain Anthony"
he said "and it is my honor to welcome you aboard the United
Star Ship Vigilante.  The mission of the Vigilante is considered
extremely hazardous the exact details will be released to you in
due time.  Right now, I'd like to introduce you to my senior
officers."
    He indicated the female and said "this is my first officer,
Commander Tarva and this is Chief of Security, Commander Norton.
With the stations you will be assigned to, many of you will
report directly to Commander Tarva or Commander Norton."
    Captain Anthony then indicated a large view screen on one
wall of the bay.  "If you'd examine the screen, you'll see your
current station and room assignments.  You have half an hour to
get settled in your quarters and report to your duty assignments
for introductory meetings.  Any questions?"
    There was something said in Klingon in the middle of the
room and several Klingons laughed amongst themselves.
    "Federation Standard will be spoken on the Vigilante."
Captain Anthony said "If you have something to say, say it now!"
      A Klingon stepped forward and addressed the Captain "As a
member of the Klingon Empire, and for its greater honor, I have
resigned my self to working with Kalonians," he said spitting
the last word then said "but I will not answer to one especially
a female."
    Commander Tarva stepped toward the Klingon and looked up at
him.  He was a large muscular warrior who was obviously well
seasoned and highly respected.  The shuttle bay was quieter now
then when the Captain was speaking.
    She flipped open her communicator and said "Will a medical
team please report to Shuttle Bay One."  She then looked at the
Klingon and smiled slightly.  The Klingon looked down at her
defiantly.
    What happened next the Klingon never saw coming.  Commander
Tarva started to turn to her left then kicked out sideways at
him with her right foot.  The bones in his lower left leg
snapped like dry sticks, he immediately screamed and fell toward
the deck.  As he fell, Tarva struck down at him with her left
hand.  His face caved in from the blow as his jaw shattered.
His head flung to the opposite shoulder and pinkish red blood
splattered across the floor and up on some of the crew standing
behind him.  He spun totally around, landing on his back.
    Tarva turned and looked at what was suppose to be a crew of
highly trained professional warriors.  She continued to wear her
smile and said "Is there anyone else who wishes to register a
complaint?" she sounded more like a waitress asking a customer
for an order.
    The crew remained totally silent, finally one of the
Kalonions began to chant.  It was an ancient war chant used
before going into battle, the other Kalonians soon joined him.
The rest of the crew stood in total silence.

-----------

    The Klingon limped to his quarters.  He had missed his group
meeting, even the current medical techniques took time to work.
When he entered the cabin the Kalonian he had spent the time in
detention with was there.
    "What are you doing here?" he said through wires in his
mouth.
    "We are to share this cabin." the Kalonian said.
    "Why am I not surprised."  The Klingon walked over to the
bunk with his bag on it.
    "Perhaps it is time for introductions" the Kalonian said "I
am called Golta."
    "I am Kartang." replied the Klingon through his wires.
    The quarters would have been large for a single on the
Vigilante.  There was one main room with the bunks on either
side and the door on the opposite wall.  The door to the head
was to the right of the main door past one of the bunks.  Built
into the wall that was most toward the back of the ship were two
high back chairs with swing across restraints and buckle down
harnesses.
    Kartang inspected the bunk and declared it a typical
Federation luxury.  As with Golta, his possessions on this trip
were few but he neatly put them in the few drawers allocated to
him.
    "Kartang, may I ask you a question?"
    Kartang looked at him and growled "Why are you being civil
toward me, Kalonian?"
    "I have considered the consequences of trouble on this ship.
I've decided that it would be in both of our interests to get
along."
    Kartang scratched at the wires in his mouth and said "What
is your question?"
    "Had you ever heard of Commander Tarva before today?" Golta
asked sounding as sincerely as his deep Kalonian voice allowed.
    "No, I had not." Kartang spat.
    "There are not many Kalonians in Star Fleet." Golta said "So
we tend to know about those who are.  Like you would know  about
the Klingon on the Enterprise."
    "Yes we know about him." Kartang hissed.
    "Commander Tarva comes from one of the Southern provinces on
Kalon.  Her family was one of the few that stayed with the
absolute traditional Kalonian way.  These Traditionalists
trained their children to be soldiers from the time they were
born."
    "So we found out." Kartang mumbled.
    Golta pretended he didn't hear the comment.  Just continued
with the story "When they come to the age of decision, they
would chose a discipline.  Many would chose to be line soldiers
others qualified for training as officers.  There are many needs
in a well equipped defense force.  The traditionalists always
garnered the top ranks due to their extensive training.  Tarva
rose quickly through the ranks and it was thought one day she
would be highly placed."
    "So what's your point?" Kartang groweled.
    "I'm getting to it." Golta responed then continued..
    "Tarva was accepted into the Elite Strike Forces.  Only
fifty percent of the candidates who enter training survive.
Remember, only the best of the best are accepted in to the
program.  Tarva finished at the top of her class and ranked in
the top five percent of all who have ever finished.
    "Not long after she finished training in the E S F her
parents were killed on duty.  As a result, she became
disenchanted with the role she had in the Defense Force.  Though
it is a great honor for mates to die together in the line of
duty, she could not accept it.  She resigned her commission and
applied to Star Fleet Academy.  There is an old saying on Kalon,
loosely translated it means 'Once E.T.F., Always E.T.F.'"
    Kartang sat on his bunk rubbing his leg and looking at his
room mate.  Golta could see the anger in his eyes.
    "If I hadn't experienced Commander Tarva first hand, I would
laugh at your Elite Strike Forces." he said trying to keep
saliva from dripping from the wires.
    "I too, always thought they were just a lot of talk." Golta
admitted with a bit of a smile.
    The two looked at each other for a second and then burst
into their races' hardy laughs.
    The intercom piped on "Lieutenant Kartang, report to the
Command Room".
    "Acknowledged." he said.
    Kartang looked at Golta and said "How do I find this Command
Room?" as he stood from his bunk.
    "The Command Room is off the bridge."
    Kartang stood for a moment then limped out of the room.
    The bridge crew acknowledged his presence as if he had been
a long time companion.  The bridge was basically laid out like
most standard Federation bridges.  The main difference was that
all stations were designed for access from the same kind of
chairs as were built into the wall in his cabin.  They even
included the restraints and belts.  This seemed to be a standard
on the Vigilante.
    Sitting at the far end of the slightly curved table that
basically filled the command room were Captain Anthony,
Commander Tarva and Commander Norton.  The chairs around the
table were similar to the others he'd observed on the Vigilante
including all belts and restraints.
    Commander Tarva stood to great him.  "Lieutenant Kartang,
this meeting has been called to fill you in on what you missed
during your visit to Sick Bay.  First I'd like to say that all
assignments were made before your arrival.  They were based on
your performance during training and your experience prior to
volunteering for the mission.  Won't you have a seat."  She
motioned to one of the seats near where they were sitting.
    She watched him examine the built in restraints. "They are
called Rough Duty seats, their purpose will be explained to you
in due time."
    He sat down in the chair then leaned back casually.  He was
trying his best to look slightly defiant.
    "As I was saying, assignments are based on performance
during training and prior experience.  We do not have time to
evaluate our crew before making assignments.  It has been
decided that your assignment will be Drop Ship Commander.  With
this, will come a promotion to Lieutenant Commander.  The
position also places you in the official emergency chain of
command.  You are now fifth in command of the Vigilante."
    With this announcement the Captain and Commander Norton
stood and offered their hands in congratulations.  They then
announced that they had business elsewhere and dismissed
themselves.
    Commander Tarva motioned for Kartang to sit back down.  "We
have some more business to attend to." She said.
    Kartang sat down and wiped away some saliva caused by the
wires in his mouth.  Kartang struggled to contain his animosity
toward Tarva.  Earlier it was easy with the other two in the
room, it was difficult with her sitting less then a meter across
the table from him.  He had not yet said a word, he was very
conscious of his mouth full of hardware.
    "Now for the chain of command, if your going to be in it you
had better know it.  You will report directly to Commander
Norton who is actually third in command to myself.  The officer
who is fourth in command is Commander Dolittel, Chief of
Engineering.  This chain is implemented in emergency only, it is
not necessarily the day to day order of command.  If we are ever
in a situation where the top command staff is unable to perform
their duties we need to be sure a warrior will be in charge of
the Vigilante.
    "Do you have any questions so far?"
    "Yes." he snarled and leaned toward her across the table.
"Why did you do this to your fifth in command." he spat and
opened his mouth to show her the wires.
    Tarva maintained her same composure and said "I did not know
who you were when you came forward. If I did," she paused and
leaned across the table to meet him face to face ~'I would have
done the exact same thing.'~ She said the last in perfect
Klingon.
    Kartang looked at her disbelieving and sat back in his
chair.
    Tarva did too and continued in standard "The Vigilante is
going on what many know could be a suicide mission.  To simply
mark your record for insubordination would mean something only
if we return.  So any infractions in proper behavior must be
dealt with on the spot and severely.
    "Is there anything else, Lieutenant Commander Kartang."
    "Not at this time." Kartang said calmly.
    "Very good, report to Commander Norton he should be in
shuttle bay three.  He'll give you a tour of your area and
outline your responsibilities.  Dismissed."
    Kartang stood, came to stiff attention then limped toward
the door.
    "Oh, I've been, ah, 'informed' by medical that the small
bone knitters may be functional tomorrow."  Tarva was barely
able to suppress a grin of satisfaction.
    Kartang stiffened trying to ignore what she was implying.
    "One last thing." Tarva said as the door opened for him.
    "Yes, Sir." he growled.
    "There will be a notation made in your permanent record for
insubordination, for the incident earlier today."
    "Yes, Sir." he repeated and walked onto the bridge.

-----------

    The shuttle bays and connected training areas took up more
than two thirds of the bulbous main body of the ship.
Engineering occupied most of the rest.  The crew quarters and
most weapons stations were in the saucer section, there was no
neck connecting the saucer to the main body.
    Kartang stood in the massive Shuttle Bay Three.  The bay was
not filled with shuttles, it was filled with strange looking
long boxy ships.  These must be the drop ships they had been
talking about.  Most were placed in racks and several were on
the deck as if prepared for launch.  Others were on lifts being
worked on.
    Commander Norton was in a control booth that over looked the
main launch deck.  Kartang limped to the one man, open air lift
and road it to the booth, maintaining a perfect Klingon at-ease
posture.
    When commander Norton saw Kartang arrive he smiled and said
"Ah, Lieutenant Commander, welcome to the Cavern."
    "The Cavern, Sir?" Kartang said.
    "Shuttle Bay 3 is the largest shuttle bay on the Vigilante
and in fact one of the largest in Star Fleet.  So its been
nicknamed the Cavern."
    "Sir, Commander Tarva told me to report to you for an
introduction to my duties." Kartang remained the serious, out of
his element, Klingon.
    Norton pointed out the window at the Drop Ships in the bay.
"The U.S.S. Vigilante carries 30 DS-300 series 5 Drop Ships and
five standard transports.  The DS-300 was originally designed to
land anti-terrorist units in troubled regions of the Federation.
The DS-300 Series 5 was designed and built specifically for this
mission.  It is built of the same composite material as the
Vigilante."
    "Sir, what composite material?"
    "Oh yes you missed the introductory meetings." Commander
Norton then briefed Kartang on the properties of the composite
material.
    "So the ships become invisible to sensors without cloaking?"
    "The sensor profile is reduced greatly.  For instance at
close range the Vigilante reads about the size of a tug and
appears to be unmanned.  The Drop Ships appear as debris and a
pressure suit made of the material is virtually invisible."
    "Wouldn't it be easier and more effective to cloak the
ship?"
    "The Vigilante and the Drop Ships are cloaked.  Cloaking,
however, can fail.  The composite also reflects energy and
reduces the damage a direct hit may cause.  It might be enough
to save the ship from only a hit or two but that can still make
a difference in survival."
    "What precisely are my duties as Drop Ship Commander?"
    "You are in charge of the Drop Ships, from maintenance to
planning and coordinating missions."
    "I have never seen a drop ship before, now I am in command
of a fleet of them.  Why didn't they train us on these things?"
    "In order to preserve secrecy you couldn't use Drop Ships,
but the trainers you did use are very similar.  They do have
their own idiosyncrasies though, that is why I've arranged for
you take a ship out for a test flight.  Since I am too busy to
be your co-pilot, I have assigned the only other experienced D S
pilot on the Vigilante to ride with you."
    "I do not need lessons on how to pilot any ship."
    "I don't expect you would but I want somebody there whose
flown these things before.  This will be the only time you won't
have a say in the matter.  Besides she'll probably just sleep or
sight see the whole time anyway."
    Kartang moaned he was going on his first D S flight with a
female as chaperone.  As long as it wasn't Commander Tarva he
figured he could stand it.
    Norton watched Kartang limp to the window and get a better
look at the deck.  "How much longer do they expect your leg to
hurt, and what's with the wires in your mouth?"
    "A day or two." Kartang said through the hardware in his
mouth then said "These shackles are because the small bone
knitters are all temporarily 'out of service', they're suppose
to come out tomorrow."
    Commander Norton began showing Kartang the specifics of the
Control Booth and other areas of the operation.  Kartang knew he
had a lot to learn and was ready to start.  It took all his
concentration to ignore the throbbing in his face and leg.

-----------

    The door signaled and Kartang called for the person to
enter.  His leg no longer hurt and the wire had been removed
from his mouth.  It had been only a day and a half so he was
quite satisfied with the 'progress'.
    When Kartang heard someone walk into the room he looked up
from his computer console to see his visitor.
    "Lieutenant Commander Kartang," it was a human female with
short red hair.  He remembered seeing her on the bridge.
    "Yes."
    "Sir, I'm Ensign O'Malley, Commander Norton asked me to
accompany you on a Drop Ship test run."
    The Vigilante had taken up residence in a seldom traveled
corner of the Federation near the Romulan neutral zone.  The
star system had two planets one of which had a turbulent but
breathable atmosphere.  The planet was deemed appropriate for
training Drop Ship Crews.  The crews, however, were no where
near ready for actual flights.  So the Vigilante stayed in the
system running its own tests.
    Kartang looked at the young human and moaned to himself.  He
knew her history and respected her for where she came from.  It
was hard, however, to over come prejudices especially when his
own skills were being compared to this skinny human.
    "Yes, I've had DS-1 prepared for testing."  Kartang stood
and retrieved his pressure suit gear bag.
    The first order Kartang issued required pressure suits worn
during all Drop Ship flights.  Previously, they were only
required if hazardous duty was expected.  Kartang's theory was
that the Drop Ship's sole purpose was hazardous duty, therefore,
the pressure suit should be worn at all times.

    Shuttle Bay Three was different than the other two, it not
only was larger but was designed for rapid deployment of the
Drop Ships.  A force field was raised behind the ships to allow
them to exit the bay at high acceleration.  Up to four ships
could be launched at a time with rapid replacement.
    Shuttle bays one and two were used for recovery and
maintenance.  They were also used for movement of cargo so as
not to interfere with bay three.
    Ensign O'Malley sat in the co-pilots seat watching Kartang
power up Drop Ship One.  "Sir, do we want to do a rapid
deployment launch your first time out?"
    "I am an experienced pilot," Kartang snapped "if I'm going
to be forced to make this test flight with an observer, I'm
going to push it to the limits."
    O'Malley smiled and said "Great."
    The pilots' pressure suits were similar to the armored ones
but didn't have all the protection.  The material was a form of
the same composite material but woven into a cloth like
substance.  The helmets were a lot lighter and the face shields
closed either manually or when emergency alarms were triggered.
    "Lieutenant Commander Kartang, to traffic control"
    "This is Traffic Control."
"Requesting clearance for launch of DS-1" He said into the
ship's communicator.
    "You are cleared for launch" was the immediate reply.
    O'Malley and Kartang were pressed into their seats as the
Drop Ship accelerated out of the bay.  Before it cleared the
Vigilante's cloaked shields its own were automatically
activated.
    Once the acceleration had ceased Ensign O'Malley turned her
chair slightly and looked out a side window.  "I do so much
piloting, it's nice to have a chance to just ride for once."
    After half an hour of standard test maneuvers Kartang said
"Have you ever taken one of these on an actual drop yet?"
Kartang asked as if he was leading up to something.
    "No, Sir." O'Malley said turning toward him. "Your not
thinking of doing something unscheduled are you, Sir?"
    "They tell me I'm in charge of the Drop Ships, I've decided
it is time to make a test drop."
    They had been making simple orbital maneuvers and now headed
toward were the computer placed the Vigilante.
    "This is Lieutenant Commander Kartang, to traffic control,
requesting landing clearance."
    "You are cleared for landing."  was the immediate reply.
    "Are the preparations complete for test drop." he asked
flight control as he followed the closed homing beacon into the
cloaked Vigilante.  Just before they would have reached the
shields they shimmered and weakened enough to allow the drop
ship in.
    "Yes, Sir.  DS-eighteen is prepared for test drop."
    Kartang turned to O'Malley and said "I've read your record
and it appears you are qualified to ride as co-pilot for the
test drop, if you wish."
    "I would need clearance from Commander Tarva."
    "I've already obtained her release."
    "Sir, I'm honored you recommended me, I hope I do not let
you down."
    "Your performance during the crisis with the Romulans
deserves recognition."
    "Thank you, Sir."
    When they landed, DS-18 was ready for launch.
    "Sir, DS-18 has had minimal flight time, do you think it is
wise to use it for the first test drop?"
    "Ensign O'Malley," Kartang said harshly "are you questioning
my judgment?"
    "No Sir, but as co-pilot it is my job to point out possible
oversights."
    "DS-18 has been thoroughly tested, it is time it got some
flight time."
    "Yes, Sir."
    Sixteen assorted personnel waited inside DS-18 in full
armored pressure suits.  The ship was designed to hold sixteen
personnel, eight to a side.  The chairs were designed to hold
the large armored suits.  During launch, they were turned toward
the front of the ship for acceleration.  After acceleration, the
chairs would automatically turn toward the center for easy exit.
    "These are some of the Drop Ship pilots," Kartang said as he
and O'Malley entered the ship. "I have decided they should know
what a drop feels like to the crew.  I hope this will make them
better pilots."
    Kartang looked at the pressure suited warriors.  These were
true warriors.  He had trained with them, he knew they would
perform well when called upon.  The armor he envied to no end.
If he had anything like it when he commanded his ten crew ship
they would have been indestructible.
    Kartang sat strapped in the pilot's seat he turned and
looked his copilot.  To signal he was ready, he dropped the face
shield on his helmet, she did likewise.
    As official copilot, it was O'Malley's duty to call for
clearance.  Numbers appeared on the wall above the door over
their runway.  A red light bar on the door above their run way
turned yellow when the numbers started counting down.  When they
reached 0 the light would turn green and they would launch.
Everything was timed with the Vigilante's orbit designed for
them to land in the designated spot in the minimum amount of
time.
    The light turned yellow and the numbers seemed to count down
very slowly.  When the numbers reached the end an alarm sounded
in the comm-system, the green light came on and the computer
launched the ship.
    DS-18 immediately dropped toward the atmosphere.  The
acceleration of the Drop Ship totally countered the orbit of the
Vigilante.  It hit the atmosphere with its nosed raised so the
shields on the bottom would take the brunt of the burn in.
    The round shape of the shields showed as the heat of entry
was dispersed.  Inside, the ship shook violently and the hull
temperature rose.  A display in each helmet counted down
projected landing time.
    Ensign O'Malley watched the gauges showing exterior
temperature and stresses, all were approaching the red zone.
    "Sir, shields are reaching tolerances," she said evenly
"adjusting power.  We'll be through burn area in five
seconds..four...three..."
    The ship bucked and started to shake violently.  "Sir,
shields have buckled, it's breaking up.."
    Kartang glanced at his copilot then at her gauges.  The ship
shuddered again and the hull breach alarm sounded.   Kartang had
no more time, he reached up and hit the emergency eject button
above his head.  All eighteen occupants immediately beamed out
of the ship and back to the Vigilante.  As they beamed away,
Drop Ship 18 exploded and continued to fall to the surface in
flaming pieces.
    They materialized on the shuttle bay emergency transporter.
As soon as he could move Kartang pulled off his helmet and threw
it across the bay.  Janice thought the whole ship could hear his
blood curdling scream.  Five of the other pilots were also
Klingons and two were Kalonians they too were showing similar
displays of frustration.  None of them were as violent as
Kartang though.
    Kartang came over to O'Malley screaming loudly in Klingon.
His eyes were wide showing all the white and violet streaks of
blood around the edges.
    O'Malley pushed her fire red hair off her forehead and
smoothed it.  Her early years on Vega-5 had given her a very
thick skin.  She looked him in the eyes and waited for him to
stop his tirade, she figured he'd at least have to take a breath
soon.  She waited and tried to decide what he had eaten that
gave him such bad breath.
    He finally finished and stood looking at her.  His eyes were
still wide and his shoulder length hair stood in all directions.
O'Malley reached into her helmet and removed a storage disk from
the gauge area.  She put the chip into a nearby console and
pressed a few buttons.
    The console immediately lit up showing the entire drop ship
control panel, his controls and hers.  Her system and been tied
directly to the ships computer and had acted as a flight
recorder.
    "Perhaps, this will help us determine what exactly went
wrong."
    Kartang immediately pushed her out of the way and began
studying the output.
    In the suit room, the other pilots were already being helped
out of their pressure suits.
    "What happened out there, human?" asked Valerta, one of the
Klingon pilots.
    "You and that Klingon almost got us killed." one of the
Kalonians said.
    "I have no idea," O'Malley said "the shields began to buckle
for no apparent reason.  The stresses of landing through even an
atmosphere like that shouldn't have effected it."
    "They had better get it fixed before they send us out in
those things again." said a female human pilot.
    The pilots began complaining amongst themselves.  Even
though O'Malley was also a pilot she wasn't assigned to the drop
ship fleet, therefore, she was an outsider.  She could hear them
refer to her several times and look at her.  It was obvious they
blamed the outsider for their near demise.  Even the humans
didn't seem too sympathetic toward her.
    Ensign O'Malley was out of her pilot's pressure suit before
the others were out of their armor.  To get away from the pilots
as soon as possible she didn't put on her uniform but decided to
carry it back to her cabin.  Wearing the tight black shorts,
tank top and the pressure suit boot liners is how Commander
Tarva found her walking down the hall.
    "Ensign O'Malley, what happened out there?!"
    "Lieutenant Commander Kartang is currently reviewing the
flight recorder, Sir." Janice said coming to attention.
    "Ensign, that is not what I asked you."
    O'Malley hesitated for a second looking straight over
Commander Tarva then said "Sir, the shields seemed unable to
handle the atmosphere burn in.  I did not notice any incorrect
operating procedures."
    "Very well, your complete report will be expected when you
begin your next shift."
    "Aye, Sir." O'Malley said and continued toward her cabin now
at double time.

-----------

    Captain Anthony, Commander Tarva, and Commander Norton sat
quietly in the briefing room off the bridge.  Lieutenant
Commander Kartang was finishing his briefing on the mishap with
Drop Ship 18.  He had presented the complete flight recordings
and the analysis of what little wreckage had been retrieved.
    "It is my conclusion," he said "that the new design
deflector shields where not properly aligned to withstand the
stress of the drop.  Currently all drop ships are being
inspected for similar flaws.  At last report, three other ships
have been found to have improperly aligned deflector shields."
    Tarva looked at him incredulously "So you are trying to pass
the blame of your mistake to technicians who are not here to
defend themselves and whom you will never meet?"  The data he
had presented had clearly supported his analysis, Tarva,
however, still felt the need to test the ebon of the Klingon.
    "No, I am not."  Kartang growled at Tarva "The misaligned
deflectors were within the tolerances set by Design.  I blame
Design for setting improper tolerances."
    "Thank you." Commander Nortan said.  After Kartang had taken
his seat Norton addressed the room  "Taking into account the
other reports and the data from the flight recorders I must come
to the same conclusion." then added "Commander Dolittel has also
came to a similar conclusion."
    Kartang sat back and looked at Tarva.  She could see the
animosity in his eyes but ignored it.
    Captain Anthony finally said "It seems this ship has been
plagued by misalignments.  I am ordering that all ship's systems
be retested.  We are setting tighter tolerances and expect them
to be maintained."

-----------

    Golta checked the readouts below the face shield of his
helmet.  It had taken some getting used to, looking down inside
his helmet with out moving the helmet.  By speaking the
designated codes for the members of team RT-2 he could read all
of their vital signs.  He could also get other information
including a display from their suit camera.
    Golta was proud he had been assigned a position equal to
that of the Klingon.  It would have been intolerable to not only
have to share a room with him but also to be out ranked by him.
As commander of landing forces Golta felt that his position was
much more Glorious.  He and his warriors would do the actual
information retrieval, the whole mission was designed so they
could do their job.  His, would be the most crucial command.
    Right now, he was running a bio-coordination check while
waiting for launch.  All other systems checks had been
completed, the bio-check was always the last.  To get an
accurate mission standard the bio-coordination was taken just
prior to mission initiation.
    The yellow launch light over the bridge door came on
indicating the countdown had commenced.  Golta mentally prepared
himself for launch as the green light came on.  The force of the
launch pressed him into the large seat.  This was his sixth
practice launch and he still cringed behind his darkened face
shield.  As soon as the acceleration of the launch ended, the
large chairs turned toward the center of the Drop Ship for rapid
deployment.
    This drop wasn't any different than the others, the ship
shook violently as it dropped through the planet's atmosphere.
Golta watched the teams vital signs as they dropped to the
surface.  As usual, all including himself showed signs of great
stress.  This worried him, if they ever needed to go into battle
this way, what would the stresses be like then.
    A yellow light in the middle of the cabin began blinking and
the seat restraints opened indicating landing was near.  When it
turned green the back door would drop open and they would file
out in pairs.  It didn't matter where they were or what the
conditions were like.  The suits would protected them,
hopefully.
    Normally, just before the green light came on they could
feel a bump when the ship landed. This time, however, that
didn't happen, the green light came on and the door opened to a
blinding sand storm.  The team didn't hesitate though, the
soldiers stood simultaneously and quickly marched out the back
door two at a time.
    Golta, for this drop, was to be the last off the craft, one
of the first was his second in command, Lieutenant Whitecloud.
She would be acting command for this mission.
    He could hear her sound the warning as she stepped off the
door "Heads up, it's a free fall."

    The ship hadn't landed, in fact, it was over a hundred
meters up and flying at a steady velocity when the door opened.
The pressure suited warriors stepped into thin air.  The
training again paid off, not one of them panicked.  As they
stepped off the door each one stayed perfectly upright and
trusted their equipment.
    The suits immediately calculated approximate altitude and
would begin firing built in boosters just in time to land
safely.  As they fell, the buffeting weather and the blowing
sand totally blinded and shook them.  The suits, however, used
stabilizers to remain up right.  Golta tracked the team  on his
suit's scanners as they fell ahead of him.

    The weather on the surface wasn't any better.  Wind howled
around them restricting vision to the perimeter of the suits
deflector shields.  The  stabilizers fired constantly to keep
the suit on it's feet making movement feel extremely jerky.
    Whitecloud ordered all to switch to their Electronic Vision
Enhancer (EVE).  None of them actually needed to be told to do
this.  When EVE was activated the visor went opaque and showed
an electronically enhanced view.  The view was a composite of
scanner analysis and non-visible light analysis.  The on board
computer then combined and enhanced the output to get a slightly
off color image of what the user should see.
    The team slowly separated into a wide formation with
partners always within sight of each other.  The rest, stayed
within electronic range.  The goal was to survey a large area of
the planet and be at their extraction site at a designated time.
To do this, they would need to be on the move for nearly all of
the next three days.

    The sixteen met at the extraction point on schedule and
Whitecloud initiated the extraction beacon.  Within five minutes
the extraction warning sounded over the suits' communicators.
The drop ship had entered the atmosphere and would be arriving
momentarily.
    "Attention RT-2, extraction beacon pinpointed, E T A 10
minutes."  came the voice of the female Klingon known as
Valerta.
    "Acknowledged." Whitecloud said.  The team put some distance
between themselves and the beacon.
    The wind continued to howl around them as they waited for
the drop ship to arrive.  The storm was stronger now then it had
been since they were dropped.  They couldn't hear the ship but
EVE allowed them to see it dropping toward them.  The ship was
being shaken severely by the continuing storm.  They could see
it buck through the multiple wind vortexes as it descended ever
closer.
    "E T A 2 minutes" Valerta said obviously shaking.
    "This is going to be a tough one" Golta commented.
    "I'll do it." Valerta said confidently though still shaking.
    "Maybe they should have beamed us out." one of the team
said.
    "That would defeat the whole point of the exercise." said
Whitecloud.  She had lead and coordinated the whole mission, she
wasn't about to let her first chance at leadership be
anti-climaxed by a beam out.
    The drop ship landed hard next to the beacon.  They could
hear a thump through the storm and filters in the helmets.  A
large cloud of yellow dust was thrown up around the ship.  EVE
allowed the team to see that the ship appeared to be intact but
they weren't sure.  Procedure dictated that they keep their
distance until they were sure the ship was safe.
    A minute after landing they saw the back door drop open and
heard Valerta yelling "Lets go, I don't have all day, move,
move, move."
    The team immediately began to move as quickly as they could
to the drop ship.  Valerta kept the shields raised until the
last possible moment to protect the ship from the wind and sand.
When she dropped the rear shields to allow them access a strong
vortex of wind also got through and lifted the back of the drop
ship.  The four already in the ship were dropped toward the
cabin while the three on the door were thrown back off.
    The rear of the drop ship lifted several meters and the
whole ship pivoted to port.  As it swung, the open door/ramp
caught Ensign Mueller in the neck.  Since all suit deflector
shields had been shut down to allow for the close proximity of
boarding the door made direct contact with his helmet.  The
force of the impact threw him to ground and slightly separated
the helmet from the suit.
    Golta's warning alarm for Ensign Mueller signaled the
breach.  "Control, we have a suit breach." he said as he went to
the soldier's aid.
    Kartang's voice came over the intercom "Get your team out of
there, Kalonian.  You know the training regulations about
beaming out a drop team."
    The suit stabilizers had also been shut down just prior to
boarding.  This caused the troops on the ground to loose
stability in the wind.  Golta, as a result had difficulty
reaching Mueller.
    When Golta reached him, he could see the Ensign struggling
inside his suit.  The planet's atmosphere was not toxic but the
ultra fine dust of the sand storm was blowing directly into his
face.  The boy, though highly trained, was beginning to panic as
he couldn't breath, see or get back on his feet.  The EVE had
been disabled, and his nose, mouth and eyes were filling with
dust.
    The fist thing Golta did was activate what was suppose to be
the suit's automatic sealing.  The separated joint immediately
filled with a black gel and the life support systems started
filtering out the dust.  Golta then grabbed the ensign by an arm
and pulled him to his feet.
    Valerta had finally stabilized the drop ship and the
remaining crew were boarding.  Golta and Ensign Mueller just
two meters away, started for the ship.  Lieutenant Whitecloud
had gotten the rest of the crew into the ship and met Golta and
Mueller at the bottom of the ramp.
    "All other hands secured." she said as she grabbed under
Mueller's other arm and helped Golta get him into the ship.
    As soon as they were half-way up the ramp Whitecloud yelled
to her intercom "Close It!".  The ramp immediately lifted them
into the ship.
    Once the door was closed Golta started trying to get the
helmet off of Mueller.  Between the bulk of his own armor and
the drop ship rocking up through the atmosphere it was not an
easy task.  It turned out, that the helmet was not damaged, just
separated from the suit.
    "This suit wasn't damaged." Golta growled to Whitecloud.
    "What happened to it?" she asked as she strapped herself in.
    "I don't know." Golta replied as he finally pulled the
helmet from the suit.
    Whitecloud checked Mueller's vital signs in her suit
monitors when she heard the vital sign warning.  "Sir, he's not
breathing." she said and started to unstrap herself.
    "Stay in your seat." Golta commanded as he pulled off his
own helmet.
    Ensign Mueller was having a sever allergic reaction to the
dust blown into his suit.  He was now trying to grasp at his
throat as it swelled shut.  Golta tilted Mueller's head back
trying to keep the air way open but the swelling had closed it
off.
    "Vigilante" he yelled "Medical Emergency, Ensign Mueller has
suffered a sever allergic reaction his throat has swollen shut."
    As he finished talking the ship shook severely and tilted
forward.  Golta and Mueller slid across the deck between the
feet of his team and crashed against the forward bulkhead.  The
helmets also bounced off the wall next to him and he let out a
primal Kalonian scream.
    "Valerta," he yelled "get it steady, We've got problems back
here."
    "Sir, I must increase to exit velocity or we won't make it."
she said.
    Golta hesitated for a second then ordered "Make it so."
    All landing chairs automatically turned forward for
impending acceleration.  Valerta then warned "Prepare for
acceleration to exit velocity. 5..4.."
    Golta lay over the ensign, straddling him, as he was trying
to activate the suits automatic medication.  He had not yet even
had time to remove his gloves so it was difficult finding the
controls inside the collar of the suit.
    "3..2.."
    The manual overrides inside the collar were designed mostly
for maintenance and testing.  Since the suit had been
deactivated for boarding the advanced life support was not
functioning.  The boy was beginning to turn blue and had gone
unconscious.
    "His pulse is getting weak" Whitecloud said frantically.
    "1..0..increasing to exit velocity."
    Golta totally lay over the Ensign and wrapped his arms
around his back and held Mueller's head to his chest trying to
protect it.  The acceleration threw them back across the ship
against the landing door.
    Pinkish red blood gushed from a gash across Golta's temple
but Mueller was unhurt.  Golta continued to work against the
acceleration while pressed up to the back door.
    Golta sat up, screamed again and began trying to remove one
of his gloves.  When it came off he threw it forward against the
cabin door and immediately stuck his hand back down the ensign's
suit.  He could barely hear a faint hiss as the suit injected
the boy with the needed drug to help reduce the swelling.
    "Pulse seems to have stabilized" Whitecloud informed him
"but he's still not breathing."
    The Drop ship shuddered again and leaned hard to port
slamming Golta and the Ensign against the back of one of the
chairs of their comrades.
    "His throat's still swollen." Golta said after trying to
breath into him.  He then grabbed an emergency kit mounted on
the wall above him.  Inside was an assortment of emergency
medical supplies.  "Normal airways won't work" he said as he
pulled out a long skinny tube. "I'm going to use a nasal
airway".
    "Valerta,  What's our ETA to transporter range?"  Whitecloud
said as she watched Golta slide the tube into Mueller's nose.
    "The Vigilante will not transport while we're outside their
shields on any Drop Ship training mission." Valerta replied then
added "ETA to Vigilante 5 minutes."
    Once the tube was in place, Ensign Mueller arched his back
as he struggled to catch his breath through it.  "He should make
it."  Golta's deep voice sounded grave.  They still lay against
the back door held there by the acceleration.
    Whitecloud watched the Kalonian holding Mueller's head back
trying to keep the airway open.  He was also closely examining
the suit trying to decide what had gone wrong with it.
    The vibration of the Drop Ship's acceleration began to
lesson and the g-forces began to decrease.  "We are clear of the
atmosphere" Valerta declared "ETA to Vigilante 2 minutes".
    "Lieutenant Commander Golta to Vigilante". Golta sounded
relieved.
    "Kartang here." was the immediate reply.
    "Prepare to fix on my signal and transport directly to Sick
bay".
    "Acknowledged."
    "Entering Vigilante's shields." Valerta reported.
    As soon as the drop ship entered the shield sphere Golta and
Ensign Mueller disappeared.

-----------

    Still dressed in full armor and walking back to shuttle bay
three is how Lieutenant Whitecloud found Golta.  She had already
showered and changed to her duty uniform when she went looking
for him.
    Lieutenant Anndrea Whitecloud had shoulder length black
hair, tide back in a pony tail and held with a small silver and
turquoise clasp.  Her skin was still brown from the outdoor
lifestyle she lived on earth before volunteering for this
mission.
    "Sir, How is Ensign Mueller?" she said as she turned back to
where she had just come in order to walk with him.
    "Ensign Mueller will recover shortly."
    Whitecloud noticed that the cut on Golta's temple had been
healed but left as a scar.  "I see that the Meds on this ship
are familiar with proper Kalonian care."
    "Yes, one of the perks of having a Kalonian as First
Officer."
    "Sir, have you discovered why Mueller's suit failed?"
    "I investigated it before I allowed them to remove him from
it.  Apparently, Ensign Mueller was too anxious to get out of
the armor and disengaged one backup system too many."
    "Then the fault was his and not the suit?"
    "Correct, the suit did not fail, Ensign Mueller did."
    The pair turned a final corner and headed into the shuttle
bay.

-----------

    Later that day Ensign Whitecloud sat cross legged in the
front room of her quarters.  In front of her, on a low stand was
a large, half finished painting, her current project.  It was
the picture of a large brown bird with a white head and yellow
beak and talons.  It soared over blue-gray mountains far below.
She meticulously painted each feather of the bird.
    Anndrea was so preoccupied with her painting she did not
hear her room mate come in, but knew she was there.
    "What is it?" the other woman said.
    Anndrea was not easily startled or distracted she took the
time to finish the area she was working on before turning her
attention.
    "It's a Bald Eagle."
    "I've heard of eagles before." said the woman "but I've
never seen a real one.  Have you?"
    Anndrea looked at her room mate.  With short bright red hair
Janice was at the extreme opposite end of the scale then her.
    "I took my leave of absence to work in a breading reserve
for these birds."
    "I've only been to Earth for short vacations and shore
leave."  Janice said as she took off her uniform jacket and
threw it on her bed.  "And, I've always spent that time shopping
in the big cities.  I love discovering new cities."
    "You've never spent any time visiting the Earth wilderness?"
    "It just never seemed to be a priority.  I've always been
fascinated by what people have built.  Earth has such a rich
history, it's like traveling back in time."  Janice had wandered
into the other room, she was laying on her bunk looking out at
Anndrea.
    "I heard that you grew up on VEGA-5" Anndrea said while she
packed up her paints.
    "Yea, I lived on the streets until I was twelve."  Janice
replied uninterested.
    "I would think that you would have had enough of cities."
She said as she secured the unfinished painting on a wall near a
finished picture of a traditional Native American encampment.
    "Enough of cities?  Are you nuts, cities are my home, I
don't feel comfortable without people around me."  Janice had
rolled onto her back and was looking up at the ceiling, her
short red hair hung over the foot of her bunk.  Painted on the
ceiling was the shadow of a coyote against a full moon.  It was
Whitecloud's first contribution to decorating the room.  Under
the painting Whitecloud had recently added a poem she'd found in
the computer's library.  She thought it was from a collection
the Captain had up loaded.

        Go to the Wild that waits for me;
        Go where the moose and the musk-ox be;
        Go to the wolf and the secret snows;
        Go to my fate...who knows, who knows!
                                          R.W.S.

    "Tell me," Janice said "everybody know's how and why I came
to be here, what's your story?"
    "It's not very interesting."  Whitecloud said sitting on her
own bed across from Janice.
    Janice sat up and looked at her room mate. "I'm interested."
she said.
    "Well" Anndrea began "I was born on Earth in what is known
as a 'reservation'.  Reservations are areas in North America
that were set aside for Native Americans to live as separate
cultural entities.  Some still live traditional ancient
lifestyles and many are moving back to them.  It is the current
thought that if you are not going to live a traditional
lifestyle, why live on the reservation.
    "My parents, in fact my tribe, was obsessed with returning
to the ancient way of life.  It was decided that it was
impossible to do on Earth.  That the land was not suited for
people to be living off of it with out also depending on the
modern world.  As a people, they decided to look else where for
a place to colonize in a 'traditional Native American culture'.
    "The tribe applied to the Infiniti West Corporation for a
land grant.  Since we were the first large traditional group to
apply to the I.W.C. for colonization we were granted a very
generous portion.  In order to pay for transportation the tribe
sold it's lands and boarded a colony ship for Infiniti West.  I
was two years old when we walked off our ancestral land for the
last time.  My mother told me that ...."

    ....A darkly tanned teenage girl rode a tall brown horse
across an endless prairie.  She rode bare back accept for the
bedroll and other camping supplies strapped behind her.  She had
long, straight, black hair tied back by a thin leather thong
with a bright red feather hanging from it.  She wore a simple
brown buck-skin dress decorated with small beads and fringe.
With her, rode two younger males both dressed in similar
primitive garb.
    They topped a small hill and looked out over the endless
plain around them.  "How far do you think?" the older of the
boys asked the girl.
    "We could be home late tonight." she said.
    "I can't wait to tell them about the mountains" said the
younger boy.
    "It's amazing, that after all these years, the tribe's never
gone that far east" said the first boy.
    "It may have," replied the girl "we just don't remember."
    "I'd think somebody would have mentioned mountains that
reach beyond the clouds." said the older boy.
    The girl looked at the boy and said "We came here all the
way from EARTH."  almost in awe of the fact. "Do you think that
any mountains would have impressed them?"
    "You believe that?" the younger boy said "My brother told me
that the story about Earth and the Federation is just a campfire
story."
    "Your brother is just a trouble maker, he's almost old
enough to remember." replied the girl.
    "If this Federation tribe really existed then why have we
never seen them?" the younger boy insisted.
    "Never seen them?" the girl looked astonished "what about
the ships we see in the sky at night?"
    "I don't see ships," the boy continued repeating his
brother's words "I only see lights.  We've just been told
they're ships, to keep us in line 'behave yourself, or we'll
send you up to the Federation'.  Every parent uses that, they
say you just sparkle and disappear. I've never seen anybody just
sparkle and disappear, have you?"
    During the conversation the older boy was looking to the
west in the direction they had been riding.  "What's that?" he
said pointing to the horizon.
    A faint orange glow had appeared on the horizon and was
growing.
    The girl looked at it for a second and said "I don't know,
but its getting bigger".
    "It's not getting bigger," the older boy said "it's getting
closer.".
    "It's a Space Ship!" the younger boy shouted excitedly.
    As the ship got closer they could hear the roar of its
engines.  It was wedge shaped and looked slightly battered.  As
it got closer, it started to gain altitude.  When it was over
them the three were jumping and waving at it.  It seemed to
wiggle a bit as if it were waving back at them.  Within minutes,
it had shrunk to a dot above them, then disappeared.
    "Wow that was great." the younger boy said now in total awe.
    "I thought you didn't believe in space ships." the girl said
with a laugh.
    "I do now.  What do you think it was doing here? I wonder if
the clan saw it"
    "I would think so, It must have flown right over them." the
girl replied.
    The older boy had turned toward the west again and was
squinting at the horizon.
    "What is it," the other boy said "is there another one?".
    "No."
    "What is it?" the girl asked now looking back to the horizon
herself.
    "I think I see smoke." the older boy said cautiously.
    "That's impossible, we never build fires like that."
    "I know, that's why I'm worried."
    The girl leaned forward over her horse's neck and squinted
at the horizon.  "My God," she said "I see it too."
    "That's were Camp should be." the older boy added.
    They sat and looked at each other for a moment then kicked
their horses to a gallop.  Heading toward a faint pillar of
smoke on the horizon in the mid-morning sun the trio rode harder
then they ever had.
    As the day wore on, the smoke slowly dissipated but the
three still rode hard.  With the sun settling on the ground
ahead of them the youths crested a hill over camp.  Ahead of
them was what they feared most.  The remains of tee-pees lay
smoldering where they had stood just a few days earlier.  About
them lay their former possessions and other charred debris.
    The trio sat on their horses staring at the scene, unmoving.
No one moved for minutes, finally the girl slid from her horse
and ran down the hill.  The other two soon followed leaving the
three horses on the hill.
    They instinctively ran to the places their own tents once
stood, but there was no sign of life.  The youngest boy stood in
the middle of a smoldering black patch of earth, crying.  The
older boy sat on a log next to his tent, his favorite place to
watch the sun set.  The girl began examining the wreckage trying
to discover what had happened.
    She finally looked closely at some of the blackened debris,
she barely recognized it as a person.
    "Were are all the people?" she could hear the younger boy
say.
    "They're right here." she whispered as the shock set in.
    She heard some moaning but it wasn't coming from her friends
it was from someplace else.  She straightened up and listen for
the sound, it was coming from the creek.
    She ran to the bank but was afraid to look over, at first.
When she did, she wasn't sure what she saw.  Laying in the mud
at the edge of the stream appeared to be a woman covered in mud
and grime.  A large black holed was burned in her back and blood
poured from the many cuts and gouges over her body.  As the girl
approached she thought she looked familiar but wasn't sure.  It
wasn't until she recognized the remains of an anklet the woman
wore did she know whom she approached.
    "Mom!" she cried and fell to her knees in the mud next to
the woman.
    The woman opened her eyes, still bright and clear,
"Anndrea," she whispered "thank God you weren't here.."
    Anndrea cradled her mother's head in her lap "don't worry
mom, you'll be all right, I promise." she said through her
tears.
    "No dear," the woman choked "my time has come, I just ....
for you, my love."
    "Who did this, why?" Anndrea gasped.
    "Pirates...don't know why...just came." the woman turned to
look at her daughter.  "You must leave this place, this planet
has nothing left for you...promise me...go to the Fort...go to
the Federation .."
    "I promise" the girl cried.
    Bubbles of blood formed on the woman's lips as she exhaled
her last breath.

    The three children sat on their horses over looking the
favorite summer valley of their clan.  From behind them, the
morning sun cast long shadows in front of them towards their
past.  They could not identify any of the rest of the clan, they
just left them where they were.  Outside of the village circle
was the single grave they had spent the night digging.
    Anndrea turned to her two friends and said "I'm going to the
Fort."
    "Aren't you going with us to the other clan?" the older boy
asked.
    "No, I promised I would leave, and that is what I'm going to
do."
    "I want to leave too." the younger boy said as tears poured
down his face.
    "You must find the other clan, that is where you belong.
The tribe must know of what has happened here."
    They were all too tired to argue, they hugged each other
from their horses then parted ways.  The girl headed north and
the two boys headed south.
    A darkly tanned teenage girl rode a tall brown horse  across
an endless prairie.  She rode bare back accept for the bedroll
and other camping supplies strapped behind her.  She had long,
straight black hair tied back by a thin leather thong with a
bright red feather hanging from it.  She wore a simple brown
buck-skin dress decorated with small beads and fringe.  Ahead of
the girl was a large walled compound with two large doors
standing open, waiting for her....

    Whitecloud never finished her sentence, just sat looking
into the room.
    'What ever happened to her on Infiniti West must still be
too hard to speak of' O'Malley thought.  Janice sat next to
Anndrea and held her while she cried for her memories.  Even
warriors were allowed to cry, occasionally.
    Anndrea sat up pushed her hair out of her face "I have my
first solo command in a few hours, I'd better start prepareing."
she stood and went into the head.

-----------

    "Captain Anthony, Sir, I read a ship entering this sector."
It was O'Malley's turn to stand watch on the sensors.
    "Can you project a course for it yet?" the Captain asked
from the Command room.
    "Yes Sir, it's current trajectory will bring it on a tangent
to this system.  They won't need to alter their course until the
last minute to enter.  At current warp ETA is, 5 hours 15
minutes."
    "Keep an eye on them, if they show any sign of actually
paying this system a visit let me know."
    "Aye, sir"
    Several hours later Captain Anthony sat in his quarters
reviewing deployment scenarios submitted by Lt Commanders
Kartang and Golta when the yellow alert signal light came on.
At the same time there was the piping sound on the ship wide
communications followed by commander Tarva saying  "Captain
Anthony, report to the bridge."
    Anthony hit his comm button and said "I'm on my way." then
headed into the hall.  Two meters down the hall a turbo lift
stood opened waiting for him.  When he entered, the door shut
quickly and the lift accelerated toward the bridge without
command.
    "Commander Tarva, Report." Anthony said as soon as he
stepped off the lift.
    The rest of the main bridge crew was already at their
stations.
    "Sir, the incoming ship has continued its course on a
tangent to this system but we have picked up extremely intense
scanners directed towards the system.  The yellow alert was
automatically activated by ACT.  It seems that the system
perceives these scans as a threat and has begun shifting the
cloaking frequencies to compensate." Tarva reported.
    "Automatic frequency shifting is designed to compensate for
the intense Borg scanners." Anthony said as he took his chair.
Then after some thought asked "Do we have a make on the ship
yet?"
    "Sir all we have is that it's a Federation Pentalia class,
perhaps a scout ship." Ensign O'Malley reported.
    "Sir, there are no Federation scanner systems that would
cause ACT to automatically initiate phase frequency shifting of
the cloaking." Commander Norton said.
    "Perhaps, you should say there are no systems that we are
aware of." Anthony commented with a smile.
    "That, would be more accurate." Norton agreed.
    "Perhaps we should bring in any training missions we have
out." Tarva suggested.
    "Agreed." Commander Norton said then signaled the 'Cavern'
"Lieutenant Commander Kartang, are there any training teams
planet side?"
    "A drop ship is collecting the last team at this time."
Kartang replied.
    "Please keep us appraised of their progress."
    "Aye Sir, Kartang out."
    "Sir," Ensign O'Malley said "the ship has dropped out of
warp and is concentrating it's scans on this area."
    "That's not possible," Tarva said "it couldn't possibly read
us from that distance and there's no way it could see the team
on the surface."
    "Have all hands prepare for silent running." Anthony said to
Tarva then to Norton "Have they zeroed in on anything yet?"
    "No sir, they just keep doing wide sweeps, like their seeing
shadows or something."
    "Ensign O'Malley what's their current status?" Anthony
turned to the red head.
    "Sir, they're heading toward us now at three quarters
impulse, they should be here in about forty eight minutes."
    "I read a high energy release on the planet" Norton
reported.
    "Bridge, Drop Ship Control here." came Kartang's voice over
the intercom.
    "Go ahead." replied Commander Tarva.
    "Sir, Drop Ship 21 has crashed on lift off" Kartang said
almost frantically.
    "Survivors?" Captain Anthony demanded.
    "With the storm and the ACT systems in the ship and suits it
is impossible to tell.  Sir, request permission to launch a
rescue mission!"
    "How many unaccounted for?"
    "Two pilots and a full sixteen member landing team."
    "Sir," O'Malley Interrupted "The ship has increased to full
impulse and has a projected course to enter our exact orbit.
New ETA five minutes."
    "They have concentrated full scanner activity on the area of
the crash site."  Norton added.
    Anthony swung his command chair around to get a full look at
his bridge crew.  All, like himself, were strapped into their
duty chairs in preparation for silent running.  "Mr. Norton,
initiate silent running.  Mr. Kartang, permission denied, send a
message to any survivors to hang tight we'll come get them as
soon as possible.  Helm take us to an opposite geo-synchronous
orbit, maybe we can repeat that incident with the Raptor."
    The Vigilante adjusted it's current geo-synchronous orbit
over their training area to one directly on the opposite side of
the planet.  The movement was so smooth it was not perceptible
to any of the crew.
    "Sir, I'm picking up a transmission from the surface, audio
only." Norton said.
    "Put it on the speaker"
    The speakers for the view screen immediately erupted in
static.  "This is the best I can do" Norton said as he made
adjustments.
    A female voice could barely be heard through the noise:
<Vigilante...twelve...survive...suits held..one day...failure..>
the rest of the message was inaudible.
    "What are they doing, don't they know we have company?"
Tarva said.
    "They did not acknowledge our warnings to them just before
the crash." Norton advised her.
    "Sir, the Ship has taken up orbit where predicted, and they
have shields at maximum." Norton reported.  He then made new
adjustments at the comm center "I now have a transmission from
the ship, directed to the planet."
    The sound was much cleaner and a male voice said:
<Attention planet side, this is the U.S.S. Delphi, please
identify yourselves, we are prepared to offer assistance if
needed.>
    Anthony immediately turned to Commander Norton and said "Get
me all you can on the Delphi and the Pentalia class ships."
    "Aye, Sir." Norton said as he started working his console.
    "Captain," O'Malley spoke up "The Delphi has transported an
away team to the planet."
    "How close to our people is their team?" Tarva asked.
    "Can't tell, the armor is deflecting our scans."
    There had been a long pause from the planet then the high
static began again and the female voice came back:

 <This...private registry trans...Vigi..., request evacuat...six
survive.>

    "My God, they've lost twelve." Ensign O'Malley whispered.
    "If they get evacuated, they'll initiate Drop Ship self
destruct." Tarva said.  She then turned to the intercom and
signaled Chief Swanson.

    <Say again, how many survivors?  Our scans do not indicate
any lifesigns.>

    "Swanson, here." came a woman's voice.
    "Chief, we need to beam aboard all personnel on the far side
of the planet, can we do it?" Tarva said quickly.
    "We're currently out of range, sir."
    "Damn, the planet's in the way" Anthony said "Helm, move us
into transport range best speed."
    "Aye, Sir." replied the helmsman.
    "Prepare to transport." Tarva said to the intercom then
immediately started entering timings and frequencies to
coordinate the transport.

    After another long pause, the voice came back:
<...sheltered...debris. There...six, repeat six...request...
evacuation...>
    <Confirmed, we now read six survivors, prepare for emergency
transport.>

    O'Malley then reported "The survivors of the Drop Ship have
been transported, the away team is still on the planet."
    "Tarva to Chief Swanson prepare to transport."
    "Watching for the signal, now." she replied.
    "Sir," Norton said "I have the specs for the Pentalia class
ships but I'm unable to find any registry for the Delphi, in any
class."
    "Who ever they are, they have six of my crew."  Anthony then
turned to his intercom "Mr Kartang, I'll need a roster for the
team and drop ship crew we just misplaced."
    "Aye, Sir."
    Captain Anthony saw a note immediately appear on his log
screen:  Drop Ship 21 Crew and Roster.

-----------

    Six figures appeared in a standard Federation transporter
room.   A female Klingon and a male Kalonian stood on either
side, 2 human males were kneeling over the form of a Vulcan.
They all had portable full-face breathers strapped or held to
their faces.
    The sixth stood in the center of the semicircle.  She was a
female with shoulder length straight black hair and had the
portable breather strapped properly over her face.  All six wore
one piece, snug fitting, flat gray body suits with wires and
connectors sticking out from them.
    The woman made an obvious move towards a tricorder-like
device she was holding.  She managed to press one button.
    A security officer saw this and yelled "Look out,  she's got
a weapon!" and fired his phaser at her.

                           to be continued..........
---------------



                   T H E   V I G I L A N T E

                              IIIB

                         "The Warriors"
                          (continued)


Hark to the ewe that bore him:
  "What had muddied the strain?
Never his brothers before him
  Showed the hint of a stain."
Hark to the tups and wethers;
  Hark to the old gray ram:
"We're all of us white, but he's black as night,
  And he'll never be worth a damn."
            "The Black Sheep"
            Robert W. Service





    Six figures appeared in a standard Federation transporter
room.   A female Klingon and a male Kalonian stood on either
side of 2 human males who were kneeling over the form of a
Vulcan.  They all had portable, full-face breathers strapped or
held to their faces.
    The sixth stood in the center of the semicircle.  She
was a female with shoulder length straight black hair and
had the portable breather strapped properly over her face.
All six wore one piece, snug fitting, flat gray body suits
with wires and connectors sticking out from them.
    The woman made an obvious move towards a tricorder-like
device she was holding.  She managed to press one button.
    A security officer saw this and yelled "Look out,  she's
got a weapon!" and fired his phaser at her.
    The doors to the transporter room snapped opened and a blue
skinned Andorian rushed in, phaser in hand.  He was just in time
to see the Klingon female pull off her mask, growling, and rush
toward the security man.
    The Andorian's shot hit first as the security man's second
shot immediately followed.  The Klingon grunted and dropped to
one knee.
    "Identify yourselves." the Andorian hissed, his antennae
twitching slightly.
    Anndrea Whitecloud looked at the blue-skinned figure.  Blue
antennae protruded from his white hair.  His teeth were bared
and gleamed white.  She watched as his thumb clicked on the
phaser, she knew that he was increasing the setting.
    The transporter room had quite a few other people in it.
The most prominent were the mustard-yellow of security although
there were a couple of blue-shirts and the red-shirted
blue-skinned humanoid.
    "We have injured. Get your doctors to work." Whitecloud
demanded.
     The Andorian hissed as he motioned to the doctor and her
assistant. He was about to address the female when a Yeoman
interrupted him.
    "Sir! Bridge reports that a high intensity explosion has
just been registered on the planet's surface."
    "Coordinates? The team? " he was veritably snarling.
    "Bridge reports no survivors." he continued "Sir, I believe
that she activated some form of detonation device."
    Bronsdale piped in, "Sir, she just killed Assali, Meede and
Albert!"
    "You had no business in putting an away team down there."
Whitecloud said.
    The Andorian motioned with his hand.  "Add extra security,
even to those in sickbay." his voice deathly quiet, his gaze
locked with that of Whitecloud.  The doctor began moving the
others out.
    "But sir!! She is responsible for ..."
    A beam from the Andorian's phaser cut the man short sending
him senseless.  He then stared back at the female remaining on
the transporter pad.  "That is quite enough Yeoman", he hissed.
    "And that is quite enough as well, LIEUTENANT Qhasmon, you
will return to the bridge NOW, I will speak with you later."
    A new man stepped into the transporter room. Now, only
himself and three security men remained in the room with
Whitecloud.  One of the three was the unconscious form of the
man the Andorian had shot.
    Whitecloud instinctively came to attention when she saw the
pips in the man's collar.  His features were almost youthful,
save for the steely glint in his blue eyes and the firmness he
had held in his voice.
    "Sir, the woman ..."  one of the men began.
    "That is enough Yeoman Upaw. I am aware of the situation."
The Captain was terse with the Yeoman.
    The Captain looked at the woman, she appeared to be about as
tall as he, around 5' 8".  She had darkly tanned skin and
straight black hair, her eyes were dark and defiant.  She had
sharp angular features that would be considered beautiful and
exotic in almost any human culture, as well as some non-human
ones.
    "Your name, please." The Captain said formally.
    "Anndrea Smith." She was not a very creative liar.
    "Very well, 'Ms. Smith', Security officer Seneschal will
escort you to medical, then we shall meet.  We have much to
discuss."
    "Yes, Sir." she replied reflexively.
    The Captain stared ahead at the transporter, feeling older.
He was aware of the Yeoman at the transporter control panel.
"Attend to Mr. .... Bronsdale.." Captain Percival Malory turned
and left, leaving Upaw to help a now groggy Yeoman Bronsdale.

--------------

    Chief Swanson watched the three appear on the transporter.
She still found it difficult to get used to the speed of these
new transporters.  There was minimal of the standard sparkling,
the subject just suddenly appeared.
    The landing party appeared in very unusual poses, they were
covering or averting their eyes as if from a bright light.  She
wasn't surprised, however, since she had to time it extremely
close.  She not only had to wait for the destruct command from
the Drop Ship survivors, but also had to time it so she pulled
them out just before the effects of the explosion reached them.
Otherwise, the Delphi may have noticed them 'die' early and
investigate further which is something they were trying to
avoid.
    "Excellent timing," the shortest one began as he pulled off
his helmet.  When he got it clear he looked at the tall blond
female human standing behind the control panel.  "Who are you,
and why have you brought us here?".
    "Sir," another said "I don't think this is the Delphi."
They all instinctively reached for their phasers, the short one
finding his first.
    "I wish you wouldn't do that." said a voice from the door.
It was a medium-built, bald, pointed-eared humanoid who was also
wearing the same baggy black uniform.  With him, was half a
dozen others all wearing the same uniform.  They carried large,
strange looking phasers and wore no rank insignia.  The little
insignia they were wearing, however, did appear to be standard
Star Fleet.
    "Mister, I demand an explanation, who are you people?." said
the tallest of the three.
    At the same time the short human was trying to raise the
Delphi on his communicator.
    "That won't be necessary," said the Vulcan, "this room is
quite shielded."
    The man continued to try to contact his ship but to no
avail.  The three didn't lower their weapons, at first, while
they assessed the situation.  What finally forced their decision
was not the security pointing their own phasers at them, but the
transporter chief holding her hand over a button on the console.
Anyone with respect for the transporter, knew better than to get
an operator disturbed with them while standing on the pad.
    As soon as they lowered their phasers two of the six who had
entered with the Volcan circulated relieving them of their
equipment.  They then took off the remainder of their
environmental suits.
    "Now I'd like to welcome you aboard, I'm Commander Norton"
the Vulcan said.  "I apologize for abruptly transporting you
like we did.  But the Captain didn't see any other option."
    The tallest stepped forward and said "I am Commander Assali,
First Officer of the U.S.S. Delphi."  he then indicated the
others "and these are Lieutenant Meede, and Midshipmen Albert.
Now, we'd like to know just who you people are, who's in charge
and why we can not contact our ship."
    "All in due time, Commander." Norton said "Now if you'd
follow these men to your temporary quarters.  I'm sure, that
after that storm you'd like to get cleaned up."
    "Sir," Commander Assali said the word sarcastically "We are
not going anywhere until we get some answers."
    Norton hesitated for a minute then produced an old style
communicator from one his large pockets and spoke quietly into
it.  When he was finished he snapped it shut and dropped it back
into the pocket.  "Commander, All I am authorized to tell you,
at this time, is that The Delphi stumbled onto a top secret Star
Fleet project during a training accident.  Much information
beyond that, would make you and your crew extremely difficult to
safely release, especially if your going to be stationed in this
quadrant."
    "I'm sorry, that is not sufficient, Sir." Lieutenant Meede
said.
    Norton thought for a second then said "Okay if that's the
way you want it.  Chief Swanson, I'd like you to totally disable
the transporter in this room." He then turned to one of his men
and said "Make sure all computer interface is disconnected
except for the food replicator.
    "Gentlemen, this is not one of the more comfortable quarters
to billet in and the head has minimal wash facilities.  But
since this is were you wish to remain, we're flexible."
    The three turned and whispered among themselves then Assali
turned back to Commander Norton "Standard quarters will be
sufficient until such time we are returned to the Delphi."
    The Vulcan smiled and said "Very good".

    The security personnel escorted the three out of the
transporter room.  On the trip to their quarters they saw a some
more of the ship.  The hallways were narrow, spartin, and purely
utilitarian.  The room next to the transporter room they arrived
in, had another transporter.  They could see as they walked by
that the room was extremely large and had several large open
doors into it.  It appeared to have facilities to transport over
one hundred personnel at a time, but that seemed ridiculous.
    They arrived at the door to a billet, which slid open
crisply to admit them.  "The quarters in this section are
designed for four occupants.  The replicators can provide for
any of your needs, so make yourselves comfortable."  said one of
the guards.
    "We are confined to these quarters?" asked the Lieutenant.
    "In essence, yes" said the security guard. "The Captain and
First Officer would like to speak to you soon and hopefully
answer some of your questions"  At that, the guards waited for
their guests to enter their quarters and then took their
stations on either side of the door.

-----------

    "Sir, We have the transmission from Star Base 89" said the
Delphi's communications officer, Lt. Penthrach.
    "Thank you Mr Penthrach" Captain Malory said to his intercom
in his ready room.  He then sat back in his chair and punched
the files up on his console. He had been awaiting this
transmission since getting the retina scans.
    Each file was accompanied by the usual poor quality visual.
Captain Malory browsed through the first page of each file.

              NAME    : William Jacob Collins
              RANK    : Ensign
              POSITION: Flight Specialist
                        U.S.S. AMBARTSUMIAN NCC-3817
              NOTES   : Ship destroyed by engine core
                        failure, all hands lost
                        Star-date 46998.

              NAME    : Joseph Franz
              RANK    : Yoeman
              POSITION: Security Specialist
                        U.S.S. EL CID NCC-534-B
              NOTES   : Killed in action during boarder
                        skirmish with Cardaseans
                        Star-date 47310.

              NAME    : S'Turlek
              RANK    : Ensign
              POSITION: Junior Science Officer
                        U.S.S. TONTI NCC-599
              NOTES   : Missing assumed dead after shuttle
                        disappeared near Neutral Zone
                        Star-date 47329.

              NAME    : Anndrea Clay-Dove Whitecloud
              RANK    : Lieutenant, Junior Grade
              POSITION: Assistant Chief of Security
                        U.S.S. REGULUS NCC-1840-C
              NOTES   : Killed in Transporter accident
                        Star-date 47360.

              From KLINGON Imperial Fleet HQ
              NAME    : K'Lerana Valerta Krogg
              RANK    : Commander
              POSITION: Command Pilot
                        Reconnaissance ship TRARLON
              NOTES   : Ship Lost while on classified mission.


              SUBJECT : KALONIAN National;
                        Star Fleet has no record of the Kalonian
                        subject.

              NOTE    : The Kalonian Defense Force (K.D.F)
                        maintains it's policy to protect the
                        privacy of all it's Citizens.

Captain Malory reread the information, then made a decision.

 ----------

    "Who are these people?" Lieutenant Meede stormed.
    "We'll find out soon enough." Commander Assali said coolly.
    "We need to exercise utmost caution. We have been abducted
by an unknown force.  This clearly constitutes a hostile act.
If these were Star Fleet officers, they sure as HELL wouldn't
treat other officers in such a manner.  I suggest we make mental
preparations for becoming hostages... That 'Commander Norton',
looked suspiciously Romulan to me..."

    The storm had left them quite grimy even under the
environment suits so they were taking turns using the head.
Midshipman Albert came walking out freshly showered.  The two
officers were too busy planning to get cleaned up so he had
taken the first shift in the shower, it did feel good.  Since
his uniform had gotten quite dirty, he ordered a fresh one from
the replicator.  Before putting it on he took some time to look
through the drawers near the replicator.
    "Sirs, you might want to see this." he pulled out a
laminated card that was stuck in the back of one of the draws.

Welcome aboard the U.S.S. Vigilante.

--- There will be a mandatory meeting for all personnel at
    0830 in shuttle bay 1.  This should give all a chance to
    get settled.  All crew assignments will be handed out at
    this time.

--- Ship's uniforms are available from the replicators in
    each room just program required size.  Standard Star
    Fleet issue boots are appropriate. (a slight wait may be
    necessary, full power is currently not on line)

--- Please make yourself as comfortable as possible,
    as soon as more quarters are finished they will be
    assigned.

    The two officers looked at the card then Assali said "It
really doesn't tell us much.  Except maybe the name of the
ship."
    "It fits" Meede interjected "That original hail we
heard was garbled, but could have been directed towards a
vessel named 'Vigilante'."
    "Sirs, perhaps you should use the showers before they decide
to talk to us." Albert suggested.
    "Thank you Mr Albert, I almost forgot"  Assali said as he
turned toward the head.

    Assali, Meede, and Albert were escorted through the
corridors of the Vigilante.  The three were perfectly groomed in
standard Star Fleet uniforms.  The few others they saw in the
hallways wore the same baggy, black uniform with several large
'cargo' pockets.  Everyone they saw walked crisply and stiff,
all seemed to be overly disciplined and didn't ever give them a
second glance.
    Meede raised an eyebrow at this behavior. His abductors had
just moved up several notches on his personal 'danger scale'.

    They were lead into a good sized room for the ones they had
glimpsed.  It was flat gray like the rest of the ship with a
U-shaped table that had eight chairs at it.  Other chairs were
also placed around the perimeter of the room.  In the center of
the U was a single chair positioned to face all seated at the
table.
    "Its a court room." Assali said after they had stood in it
for a minute.
    "Are we being put a trial?" Albert asked.
    Meede simply scowled.
    Just then the door slid open and Commander Norton walked in
accompanied by a short Kalonian female and a good sized human
male.  The man was almost 2 meters tall, had relatively wide
shouders and long graying black hair thinning on top and pulled
back into a pony tail.
    Meede looked at the man then said "I thought you were dead,"
he hesitated for a moment, and then added "Sir."
    "It's good to see you again too, Mr Meede" the man said.
    Assali turned to the Lieutenant "You know this man?".
    "Yes sir, I served briefly under him aboard the Nielsen
before I was promoted to the Charlemagne."
    "Wasn't the Nielsen part of the armada destroyed at
Wolf-359?" Albert asked.
    "Please Allow me to introduce myself," the man said,
ignoring the question, and offered his had to Assali "I'm
Captain Anthony and I'd like to personally welcome you aboard
the U.S.S. Vigilante," he then indicated the Kalonian with him
"and this is my first officer, Commander Tarva."
    She didn't offer her hand, just slightly nodded toward them.
    "Now, I suppose you have a lot of questions, why don't you
have a seat and we'll see if we can answer any of them." Anthony
indicated the chairs at the table as he and Commander Tarva
headed for them.
    "Sir, if you really are a commissioned Star Fleet ship, why
have you not allowed us to contact the Delphi?" Meede asked
before everybody was fully seated.
    "I thought that would be the first question you'd ask."
Anthony said with a grin.  "As I'm sure Mr Norton has advised
you, the U.S.S. Vigilante is a top secret project.  We are under
strict orders not to reveal ourselves to anybody.  We are to
remain anonymous until such time we have completed the mission
for which we were designed and are training for.  If we were to
simply allow you to call the Delphi that would be in direct
violation of one of our primary mission directives."
    "Its interesting that our sensors didn't directly detect you
as we approached the planet ...", Assali lead.
    "As I've said, we are an experimental ship, I really can't
get into our 'stealth' capabilities."
    The three sat and looked at each other for a minute.
"Captain, aren't you concerned that the Delphi is looking for
us?"  Commander Assali asked somewhat incredulously.
    Tarva fielded this one "We were aware that the remains of
the transport that had crashed would be destroyed after the
survivors were evacuated.  We pulled you off the planet just
before you would have been vaporized by the blast.  Hopefully,
the Delphi will think that you were killed."
    "Hopefully, they'll think we were killed?  You want them to
abandon us?  Then what, you keep us against our will, kill us
yourselves, what?"  Meede had assumed his head of security
authoritative tone.
    Tarva had been a security Chief for too long to be impressed
by Meede's posturing.  After a few months of him, Anthony
had also become use to it.
    Anthony replied "Lieutenant, our intention was to keep you
from harm, if we wanted you dead, we would have ignored you."
    "Which we almost did." Tarva lied.
    Assali had been quietly listening to the exchange and
finally spoke up.  "The way I see it then, you are looking
for some way to exchange us for your missing crew without
revealing yourselves.  Does that sum up the situation? "
    "Most of it." Anthony said.
    "There is a bit more we must accomplish to clean up this
incident properly."  Tarva added.
    "And that is?" Meede asked.
    "We must insure that all computer and other records of the
Delphi's foray into AR-24 are erased or altered to exclude any
and all contact with the Vigilante and her personnel."  Tarva
replied casually.
    Midshipman Albert blurted out "That's impossible...Sir."  he
then turned to Assali "Sir, Captain Malory would never go for
altering the computer records, would he?"
    Tarva looked at Assali "Is the Captain of the Delphi
Percival Malory?"
    Assali scrutinized the recognition in Tarva's face "Yes,
Percival Malory is the Captain of the U.S.S. Delphi, do you know
him?"
    "After Wolf-359, the New Aukland rescued me from an escape
pod.  The Captain was Percival Malory, we actually became quite
good friends." She said this more to Anthony than Commander
Assali.
    Anthony turned to Tarva "Between Commander Assali and
yourself we may be able to convince Captain Malory...."
    "Hold that thought," Assali interrupted "convince Captain
Malory about what, I'm not convinced myself. You're going to
have to tell and show me a lot more than you have so far to get
me to try to convince my Captain to do something that is
strictly against policy."
    "Sir," Meede said to Assali "Are you saying that you may
even be considering asking Captain Malory to forge his logs?"
    "Lieutenant," Anthony said "You must learn to look beyond
the rules and regulations of an individual ship to the security
of the entire Federation."
    Meede scoffed "Are you trying to tell us that this project
is that important?"
    "We are." Tarva answered seriously.
    Assali motioned for Meede to remain silent and thought for a
moment.  "Let's try to compromise some here.  Show me what you
can of this ship.  If you convince me, then I'll do what I can.
At no time, however, will I involve myself in lying to or
attempting to deceive my commanding officer, is that clear."

    A pipping sound came from the intercom.  "Bridge to Captain
Anthony."
    "Go ahead."
    "Sir, We read the Delphi powering up, she's probably
preparing to get under way." came a female voice.
    "Have we obtained our new orbit?" Tarva said to the speaker.
    "Yes, sir."
    "Very good, we'll be right up." Anthony stood followed by
the rest at the table.  "Mr Norton, would you have someone
escort Lieutenant Meede and Mr Albert back to their quarters."
    Norton who had remained standing by the door acknowledged
the command with a slight nod and a "Yes, Sir".
    Anthony toward Assali "Won't you please accompany me to the
Bridge?"
    "Sir, I must protest," Meede interjected "I don't know that
we should allow ourselves to be split up by these people."
    "Mr Meede," Assali turned to the man "If we were not safe,
there's not much we could do about it.  So I suggest we take
them at face value until they give us reason to believe
otherwise.  Is that clear?"
    "Yes, sir"
    "Now, return to our quarters and wait for me."
    With that, the two groups exited the briefing room.

-----------

    Andrea Whitecloud wore a standard yellow Star Fleet
uniform with no rank or insignia.  She sat at one end of a table
in a relatively large conference room.  Sitting at the table
were the remaining command staff of the USS Delphi.  Among them
were of course Captain Malory, Doctor Mayak and the second in
command of security, now chief of security, Lieutenant Anna
Zalvosta.
    "Ms. Smith" the Captain was saying "Let me get this
straight, you claim that you and your crew are the survivors of
a private registry transport?"
    "That's correct."
    "And the name of the transport was The Vigilante"
    "Actually it was the Klingon equivalent, but essentially
yes."
    "Don't you think that VIGILANTE is a rather severe name for
a transport?" Malory was calmly paging through notes on his
terminal, notes totally unrelated to what was going on at
present.
    "Not for the make up of the crew."  Whitecloud leaned
casually to one side with her hands laying loosely in her lap.
    "Now there's something I'd like to talk about." Malory said
as if suddenly finding something interesting. "It is most
intriguing, that you accomplished getting a Kalonian and a
Klingon to work together.  The only time I've ever seen some in
a room together, they were trying to kill each other.
    "It's amazing how much hatred and prejudices can be put
aside if the price is right."  Whitecloud seemed bored with the
whole process.
    "Then your cargo was extremely valuable?"
    "Some would think so."
    "What exactly was your cargo?"
    "An assortment of things."
    Malory seemed to ignore her answers and just continued
with his questions "If it was so valuable, why did you destroy
it."
    "Who said I destroyed it?"
    "Then what was that you were doing with the tri-corder after
you were beamed up?" interjected the new chief of security.
    "I was in the process of activating a homing beacon when we
were transported, I was just trying to finish what I had
started."
    "That was some homing beacon." Lieutenant Zalvosta said
incredulously.
    "The tricorder must have malfunctioned when YOUR man lost
his cool.  The tri-corder also had a destruct function in it,
but that is not what I was activating."
    "Once again you try to blame US for the death of the away
team." Malory was starting to show some slight agitation.
    "I lost more then THREE comrades in that crash, I have to
live with that.  I am not going to accept the blame for the
death of three people who were some place they shouldn't have
been when someone else caused a malfunction.  As far as I'm
concerned, I'm more of a witness than a participant to the
matter."  Whitecloud had straighten out and had both hands palms
down on the table and was staring directly at Malory.
    Before Malory could respond a piping sound came over the
intercom.  "Captain, Bridge here".
    "Go a head Mr Qhasmon."
    "Sir, we are ready to get under way."
    "Stand by.", Malory rose and stood for a moment beside his
chair, gazing at his 'guest'.
    "I am sure that we will speak again, Miss...Smith, before we
reach Star Base 89 at any rate...."
    "Starbase 89?" Whitecloud asked.
    "Yes, the Admiral has shown a specific interest in you and
your crew." Malory clapped his hand atop his chair and abruptly
left the meeting room.

-----------

    "One thing still puzzles me.." Assali said to Anthony as
they entered the turbo-lift to the bridge.
    "What's that?  BRIDGE" Captain Anthony stood in a casual at
ease posture.
    Assali's knees buckled slightly from the extreme
acceleration of the lift.  "I've been trying to figure out why
none of our sensors spotted your ship and why we had such a hard
time zeroing in on your crew."
    "Mr Assali," Anthony said in mock shock.  "Like we've said,
this is a secret project it wouldn't do us any good if any
passing Star Ship could see us, Would it?"  The door to the
turbo lift opened and Assali and Anthony stepped onto the
bridge.
    On the main screen was the image of the Delphi.  The
Vigilante had come up behind and above it.  The angle and the
distance made the single warp drive ship seem extremely small.
    "My God," Assali said "you're cloaked, aren't you?."
    Anthony smiled "Yea, I suppose we are.  Ensign O'Malley
report."
    "Sir, the Delphi has maintained its shields and appears to
be preparing to leave orbit."
    "If they leave orbit, we're going to have a tougher time
fixing this problem."  Anthony stood behind O'Malley looking at
the ship on the screen.
    "What were your plans with my ship?" Assali asked concerned.
    Anthony looked at the Delphi's first officer "It doesn't
matter, Malory seems to be playing it safe."
    "He does seem to have a sixth sense"  Assali agreed with a
smile.  He knew that Malory was anything but safe in his style
of Captaining.
    Tarva walked up behind them from the other lift "That does
seem to be a major requirement for a Star Fleet Captain."
    The Delphi changed its orbit and vectored away from the
planet.  It made an abrupt half turn and changed course for a
little more than an instant. Then it resumed its course and
heading.  Within seconds it was out of sight as it increased to
maximum impulse power.
    "What kind of maneuver was that?" Anthony asked curiously.
    Assali smiled "I call it a 'Crazy Qhasmon'"
    "What's the point?" Anthony was not satisfied.
    Assali merely shrugged his shoulders.
    "You know Andorians ..." he offered.
    A Vulcan seated at the science station along the rear
perimeter of the bridge spoke up "Sir,"
    "Yes, Lieutenant S'Erlet."  The Captain turned his attention
to his young Science Officer.
    "I have been monitoring the Delphi as closely as possible. I
have ... noted ... that it seems to have a very sophisticated
scanner emission pattern.  There seems to be some problems with
it however, as periodically, the scanner bandwith gets flooded
with garbage.  Akin to resonance echoes, Sir.
     "I would think that this may lead to some problems with
their navigational sensors. "
     Tarva didn't quite agree with S'Erlet's opinion, "I doubt
that a Captain would have his ship prepare for warp speed if he
felt that his sensors  were faulty ...."  Tarva kept her other
suspicions silent.
    Assali continued to remain sailent on their speculations.
    "Ensign O'Malley, at current course what is their best
destination?"  Anthony asked.
    "Sir, current course will set them directly to Star Base
89."
    Anthony turned to Assali "Commander, would Star Base 89 be
an appropriate destination for the Delphi at this time?"
    Assali continued to simply stand mute.
    "What would be the average cruising speed of a Pentalia
class ship?"
    "Warp six" Tarva replied.
    "Plot a wide course to Star Base 89 best speed.  We'll just
go and wait for them." Anthony said.
    "Best speed, Sir?" O'Malley confirmed.
    "Best Speed" Tarva confirmed.
    "Aye, Sir." O'Malley worked a few buttons.  "Course plotted
and laid in, Sir"
    "Engage." Anthony stood casually with his hands in his
jacket pockets.
    The helmsman next to O'Malley pushed a few buttons and the
Vigilante vectored out of orbit just like the Delphi except for
the 'Crazy Qhasmon'.  "Full impulse" he reported.
    "We're clear for warp" O'Malley said after a couple minutes.
    "Engage." Tarva said from the Captain's chair.
    The star field on the screen suddenly blurred to the
standard 'rushing stars' optical illusion of warp.  "Best Speed
attained." the helmsman said immediately.
    "Very good, notify me when we arrive at Star Base 89."
Anthony then turned to Assali "Won't you join me in the briefing
room?" and headed toward a door near one of the Turbo Lifts.
Assali turned and followed the Captain off the bridge.

    Anthony had to layout their mission to Assali in some
detail.  He, however, did not tell him of the new technology or
how they planned to get to the Borg in a timely manner.  The
fewest number of details revealed the better, if only he could
totally convince Assali.
    The toughest part was getting Assali to agree to try to
convince Malory on his word alone with out revealing the
Vigilante or its nature.
    Assali still didn't have any idea what the ship looked like.
All windows he'd seen merely looked into empty space and Anthony
was very tight lipped about details of the ship.
    "Captain," Assali said "You have more or less convinced me
of your sincerity and the importance of your mission.  My
question remains, how are you going to contact the Delphi or
alter it's logs after it arrives at Star Base 89?"
    "Actually near a Star Base a Star Ship is likely to have
minimum security especially when it comes to having its shields
lowered for transport."
    "And what do you plan to do when the Delphi lowers its
shields?" Assali was again showing proper concern for his ship.
    Anthony smiled and said "Not the same thing we would have
done if they had dropped their shields at AR-24."
    Assali scowled at the evasion.
    "Okay, here's my plan, since it involves you and will
require your help..."

-----------

    Whitecloud had been assigned a small but nice room.  In
fact, it was a lot nicer than what she had on the Vigilante, but
it wasn't home.  She had been allowed only limited contact with
the rest of her crew, they were being treated equally well.  She
wondered with a flashing grin how close their stories were to
hers.
    Anndrea Whitecloud had lost faith in a Supreme Being since
she was disenchanted on Infiniti West, now she found herself
praying that The Vigilante had picked up the Delphi's landing
party.  With the death of S'Turlek she had lost a total of 13 of
the original 18.  It would be difficult for even a seasoned
commander to deal with, it being her first solo command made it
even more difficult.
    Whitecloud walked to her door which she had to signal to
have the guard open.  A guard stood in the doorway looking at
her "What do you want?" he said.
    "I Was told that you had exercise facilities that could be
made available to me." Whitecloud said as pleasantly as she
could.
    "One moment" he said cursly.  She could see him reach to his
communicator pin as the door slid shut between them.
    A few moments later the door slid open again and the guard
still stood in the same position. "Facilities are currently
available, are you ready at this time?"
    "Yes, that would be fine" she grabbed the bag of exercise
clothes she had been issued and headed out the door.  A pair of
guards fell in behind her.

     Anndrea had been working out on the strength training
equipment for about ten minutes when a couple of young security
officers, not that she had seen an older security officer on the
DELPHI yet, entered the rec room.
    "You're the one, aren't you?" one of them said as they
approached.
    Whitecloud who had been in a reclined position sat up and
pushed hair off of her face.  "I'm sorry were you talking to me,
Ensign?" she said in an authoritative voice.
    "Your the one who killed the away team.  What are you doing
in here?  Shouldn't you be in the brig?" one of them said
harshly.
    "What caused that terrible accident is still under
investigation." Whitecloud said as she stood up.
    "Were the hell do you think your going?" the other said and
pushed Whitecloud hard enough to make her sit back down on the
bench.  "You kill two security officers and the First Officer,
now your in the security training room acting like you own the
place."
    Whitecloud stood up quickly and stared at the speaker then
hissed "Mister, if you touch me again, I will KILL you, is that
understood?"
    The other one grabbed her by the arm and spun her towards
him as he said "How dare you threaten Star Fleet officers".
    Whitecloud grabbed the man's arm, pulled him free of her and
twisted the arm around his back.  The man groaned from the
sudden stretch then screamed as his arm and shoulder broke and
and his arm started to double back on itself.
    As soon as his friend screamed the other man rushed at them.
Whitecloud kicked straight out at him landing square in the
chest doubling him over and throwing him across the room.
    Whitecloud stood behind the man and continued applying
pressure.  As he screamed she whispered icily "Death is easy if
you know how to apply it."
    In response to the man's screams, the guards had come
running into the room.  "What's going on here!" one of them
yelled as they approached.
    Whitecloud let the man go and pushed him to the floor.  "Why
did you let these two in, you know I'm not allowed company."
    One guard held a phaser on Whitecloud while the other knelt
down to examine the security man she had just released.  His arm
was still twisted up behind his back and he lay on his stomach
moaning.  The guard with the phaser touched his communicator pin
and said "Security and medical to Security Training Room one."

-----------

    Anndrea Whitecloud stood in the conference room in a stiff
at ease posture.  Seated at the table were Captain Malory, Chief
of Security Anna Zalvosta, and Doctor Mayak.  Standing to either
side of Whitecloud but against the walls were two large security
men.
    "Ms. Smith," Malory began "we are here to determine the
circumstances around the incident earlier today in the Training
Room.  In your own words what exactly happened there today?"
    "Sir, I was approached at a time when I was led to believe
that I was to remain segregated from the rest of your crew."
Whitecloud began "They accosted me in a rough and threatening
manner.  I told these ENSIGNS to leave me alone, instead they
persisted in confronting me.  Since they were not suppose to be
there, I knew they didn't just 'happen on me'.  They had planned
to confront me and were in collusion with my guards.  It was
obvious that they had plans for me, I was not about to allow
them to follow through."
    "The Ensigns of course, tell a different story." Captain
Malory said "I tend to believe the truth is some where in the
middle."
    "Captain, Sir," Lieutenant Zalvosta said "do you believe
that four Star Fleet officers are lying?"
    The Captain turned to his new Chief of Security "I believe
that both parties' perceptions of events may be slightly
clouded."  Then to Mayak "Doctor, what is the status of the
injured crewman?"
    The doctor looked down at a chart in front of her "The
gentleman with the injured arm should be pretty much healed in a
day or two.  His arm, however, may never be exactly right, but
we'll see.  The other merely had the wind knocked out of him,
he's fine."
    "Thank you, Doctor.  Ms Zalvosta inform all personnel
involved that appropriate disciplinary action will be taken."
Malory then spoke to the whole room "Ms Smith please take a
seat, the rest are dismissed."
    "But Sir..." one of Whitecloud's guards started.
    "But nothing, everyone is dismissed I wish to talk privately
with Ms Smith."
    "Aye, Sir." the other guard said and they headed out of the
room with the rest.
    After Whitecloud had taken a seat across from Malory he said
"Lieutenant Whitecloud, I believe it is time we ended this
charade."
    "I'm sorry, you must have me mistaken for somebody else."
Whitecloud said calmly.
    Malory pushed a few buttons on the console in front of him.
The screen at one end of the room came on with the first page of
Whitecloud's file from Star Base 89.  The visual was poor, as
was standard, but it was obviously Whitecloud. "Are you trying
to deny that this is you."
    Whitecloud thought for a second and said very seriously
"Sir, I'm hoping you will realize that the persons in those
files can't be on this ship."
    "I must know why three of my best officers were killed.  I
have a lot of questions I need answered, before I can accept
that you were never here."
    "Tell me what you have." Whitecloud seemed to be offering to
answer the questions.
    Malory paged through his notes on the terminal for a few
minutes while he considered the options.  Finally he said "The
explosion?"
    "We could not leave top secret equipment to be found by
anybody.  Policy."
    "What really happened?"
    "You stumbled on to a top secrete project just when things
weren't going well"
    Malory continued to page through his notes "Your still being
extremely evasive, Lieutenant."
    "I have my orders."
    "And what do your orders say about answering to Admirals
under direct questioning?"
    "I'm willing to pay the price of keeping my orders."
    Malory frowned at her stubbornness, this wasn't getting any
where.  He knew that she was hiding a lot, but was she sincere
about the secrecy.  If she was telling the truth and Star Fleet
was involved, then he shouldn't be asking her questions.
    "I'll leave the rest of the questions to the Admiral, maybe
you'll be able to talk more freely with him."  Malory said then
turned off his console.
    "I don't think so." Whitecloud said matter of factly.
    "Well, we'll find out very soon."
    The conversation was interrupted by the comm pipping on
"Captain, Bridge here".
    "Go ahead, Mr Penthrach"
    "Sir, preparing to drop out of warp for approach to Star
Base 89."
    "Very good, I'll be there in a few minutes."
    "Bridge out."
    Malory left the room then the two large security men came in
to escort Whitecloud back to her quarters.  As they walked down
the corridor, Anndrea considered her new gaurds.  It was obvious
these two were chosen to guard her because of their size.  They
even wore security vests that would help protect them incase of
a fight.  She was quite flattered by the respect they were
finally showing her.
    She decided to start a polite converstation, she looked up
at one, smiled and said sweetly "Are you, afraid of me?"
    He looked at her with a frown and replied curtly "No."  They
were not suppose to talk to her, and didn't want to.
    The tio had arrived at Whitecloud's quarters.  She stepped
in, then turned to face them, continuing to smile and holding
her hands behind her back in a loose at-ease posture.
    "You should be." she said.
    The door slid shut between them.

-----------

    The Vigilante had taken up a place off of Star Base 89.
They had been hiding in a nearby system until they estimated the
Delphi would arrive.
    The ship's orientation made the Star Base appear to be
laying on it's side.  It was a massive structure, designed to
dock more then ten Star Ships at a time.
    The top half was dome shape, with a long pylon like tale
extending below it.  The structure ended up looking very much
like a mushroom.  Protruding from every surface of the Base
where a multitude of antennas and sensor arrays.  Evenly spaced
around the base of the dome were five large doors to allow
StarShips into Dry dock.
    Being a monitoring station for the neutral zone, Star Base
89 was heavily armed and shielded.  It not only had phaser rings
on the dome but had a multitude of phaser cannons and torpedo
launchers spread over the surface.  The shield generators were
not as visible but were still there.  From shear size alone the
base was able to generate shields capable of with standing a
prolonged attack.
    "Ensign, monitor the scanners closely, we don't need anybody
bumping into us."  Tarva said from the Captain's chair.  Tarva
smiled at her use of words, she was begining to sound like the
Captain.
    "Aye, Sir" replied O'Malley.  She soon spoke again "Sir, the
Delphi is dropping out of warp and approaching standard orbit
around Star Base 89."
    Tarva stood and pressed a button on the Captain's console
"Bridge to Captain Anthony."
    "Go ahead." returned the Captain immediately.
    "Sir, the Delphi has just dropped out of warp and is
approaching Star Base."
    "Acknowledged, I'm on my way."
    Tarva then headed to the turbo-lift.

    Tarva entered Transporter Room II dressed in her yellow Star
Fleet uniform.  Commander Norton, Commander Assali and Chief
Swanson waited for her.  Norton also wore his yellow standard
uniform, just incase.
    Tarva spoke to Norton as she entered "Have you been able to
spot any of our people on the Delphi?"
    "We think we've spotted Valerta and Galleran.  We also feel
that we can transport through their shields.  As they stand,
their at minimum power and we've been able to determine the
pulse frequency.  I think, however, that it wouldn't be prudent
to just pull them out."
    "Agreed, what's the Delphi's Transporter activity been
like?"
    "There's been some activity but there hasn't been any way to
tell if any of our crew but Valerta and Galleran are still on
the ship." Swanson replied.
    Tarva said "I'll go to Star Base and try to contact Captain
Malory from there."
    She then stepped onto the front of the large pad.  As she
stepped up, she noticed the pad had a slightly different tint to
it then the rest.  It was the pad destroyed by the accident that
killed Ensign Shertz.  Tarva was tempted to step to an adjoining
pad, but didn't.  "When ever your ready, Chief."
    "Waiting for an opening, Sir" Swanson said as she watched
her scanner. "Energizing"
    The scene around Tarva shifted and was replaced by a hallway
on Star Base 89.  She immediately started walking as if she was
going somewhere.  It would take her a moment or two to get her
bearings but she didn't want to look out of place.
    Tarva had been to Star Base 89 and knew where she was going.
The Base lounge was quite large to accommodate the high Star
Base traffic.  One feature, was a communication facility for
personnel to make personal calls to other ships.  Normally, even
personal traffic had to be channeled through official channels.
These facilities allowed personnel to keep in touch on a more
unofficial level.
    "Commander Tarva?" The male voice came from behind her as
she approached the doors to the lounge.  When she turned she saw
a medium built human wearing a yellow uniform with Star Base
security insignia.
    "Lieutenant Bloom," Tarva said trying to be casual. "It's
been a long time."
    "Commander, I didn't know you were visiting, I would have
looked you up."  Bloom said with a smile as he approached.  "How
have you been?"
    Lieutenant Ian Bloom had served as second in command of
security under Tarva on the Eclipse.  He had transferred to a
position on Star Base A107 a month before the Borg incident.
    "I didn't know you were stationed here." Tarva said with a
smile when he reached her.
    "I'm Chief of Internal Security." he said proudly.  She knew
that his interests always were in Star Base Security.  "Where
are you stationed now, Sir?"
    "I've been working as a security consultant for new
operations in the sector." Tarva lied.
    "So your just visiting?  Perhaps you'd join me for dinner
this evening, we have so much to catch up on."
    Tarva smiled, she and Lieutenant Bloom had become good
friends.  She really would like to catch up with him. "I'm
Sorry, I can't, I have somebody else I really do need to catch
before one of us leaves."
    "Perhaps I could help." he offered as they approached the
doors to the lounge.
    "Thanks, but that's not necessary, all I have to do is make
a call."
    He smiled, "Of course, your here to use the comm center.
Okay, I'll let you go."
    "Perhaps we can schedule dinner before I leave, I'll contact
you."
    "Very good," he said "Till then.." he bowed slightly then
turned crisply and walked back down the hall.
    Tarva walked through the nearly empty lounge.  Because of
the few patrons she could catch snippets of conversation.  Once
again her K.D.F. back ground showed it self.  She caught her
self trying to listen to them as she passed.  You never know
what you could pick up.
    One conversation caught her attention but she didn't allow
herself to even slow down as she passed.
    "..I still can't believe the away team was killed, it
happened so quick, no warning."
    "And your saying that the Captain is cajoling the person who
caused it?"
    "You wouldn't believe..."
    Tarva entered one of the comm booths on the far side of the
lounge.  She placed her palm on the ID pad, hoping Anthony was
right about how she was officially listed.  A small screen lit
up showing her ID information.

              NAME    : Sashon Tarva
              RANK    : Commander
              POSITION: Security Specialist --
                        Star Fleet Security Consultant Corps.
              NOTES   : Currently on Assignment along Romulan
                        Neutral Zone assessing possible security
                        Lapses.

    Most of the Vigilante's crew where listed as deceased.  The
top brass of Project Fulton, however, knew that the Vig may have
need of making some kind of contact with regular Star Fleet.
Some selected officers on the Vigilante were assigned to the
S.F.S.C.C. which was, in fact, just a cover for Project Fulton
personnel.
    She then entered her request for a patch to the Delphi.
Since it was a public channel there was a slight wait before the
hail was answered.
    The chubby face of a rather over weight man appeared on the
monitor.  "This is the Delphi, Lieutenant Penthrach, can I help
you?"
    "Yes, I'd like to speak with Captain Malory."
    The man glanced at his screen obviously checking her
personal information provided with the transmission.  "I'm
sorry, Commander Tarva, the Captain is not available at this
time.  Can I take a message or arrange a call back?"
    "Yes, tell the Captain I'd like to speak with him as soon as
he is available."  Tarva then placed her communicator pin in a
matching indentation on her console.  "Entering communicator
frequency now."
    "Very good, Commander, I'll pass your message to the Captain
as soon as he is available."
    "Thank you, Tarva out."
    The screen blinked off, Tarva stood and headed to a table in
the lounge.  She was trying to place her pin on properly when a
shadow covered her.  Thinking it was the waiter she looked up to
order.
    "Commander Tarva?" said a blond haired human female standing
over her.  She wore the red uniform of Star Fleet command and
commander pips on her collar.
                              to be continued........


--------------



                   T H E   V I G I L A N T E

                              IIIC

                         "The Warriors"
                          (continued)


....
You who find us in this place,
Have pity in your breast;
Let us in our last embrace,
Under earth sun-hallowed rest.
Night's a claw upon my brain:
Oh, to see the sun again!
              "SUNSHINE"
           Robert W. Service



    Tarva stood out of courtesy to a fellow Star Fleet Commander
"Yes, do I know you?"
    The woman offered her hand and said "My name is Commander
Shelby".
    Tarva ignored the gesture and said "Won't you have a seat."
and motioned toward an extra chair at her table.  This was not a
good sign, but Tarva figured Commander Shelby may have merely
recognized her.  There weren't that many Kalonians in Star
Fleet.
    When they were both seated Tarva asked "How may I help you?"
    The woman looked at Tarva seriously "Let me get right to
business, I'm what I guess I would call, the local liaison for
the S.F.S.C.C."
    Tarva was not expecting this, she knew that the S.F.S.C.C.
was just a front developed by Project Fulton.  Commander Shelby
admitting she was in the 'Corps' was telling her that she must
know about the Vigilante.
    Tarva didn't say anything she just looked at Shelby as if
waiting for her to finish a sentence.
    So she continued "I was alerted to your presence by the
computer when you accessed the comm station.  I must admit that
I was not expecting any of the 'Corps' to be stopping by here so
soon."
    "Why wouldn't you be expecting me, Commander, Star Base 89
was on my schedule."  Tarva replied pleasantly.
    "Of course, this isn't the proper place for us to discuss
this matter." Shelby said and stood up "Shall we."
    Tarva followed Shelby out of the lounge.  She turned to
Tarva "So, how long have you been on Star Base 89?"
    "For a while." Tarva replied.
    They walked swiftly through the corridors not speaking.
They turned into a small room in a security section.  The room
was bare except for a table and several chairs, when the door
closed, it seemed to seal itself.  There wasn't even the
obligatory computer console or other computer based accessories.
Shelby took one of the seats and Tarva sat in another.
    "So, how can I help you, Commander?" Tarva said.
    "Commander, what in the world are you doing here?  Project
Fulton issued explicit orders for you not to make contact.  Is
your ship in the area?"
    "I do not know who you are, or what connection you have with
Project Fulton.  If you are involved, you know that I can't
discuss any details with you.  So why have you even contacted
me?"
    "I've chosen to contact you because you've boarded Star Base
89 without authorization and you are in direct violation of
Fulton directives.  I'm trying to determine why you have done
this and if we should be concerned about your progress." Shelby
seemed to be getting slightly anxious.
    Tarva decided that this human knew enough about the project
to confide in.  "During a training session, we experienced a
failure in one of our personnel delivery systems.  This failure
caused the loss of quite a few of the team involved.  The
remainder of the team was picked up by Captain Malory and the
U.S.S. Delphi before we had a chance to retrieve them ourselves.
At the same time we found it prudent to remove a Delphi landing
party from the site before some wreckage self destructed."
    Shelby put the pieces together "So your ship and the Delphi
have effectively exchanged crew members, is that correct?"
    "Yes."
    "Now your here to contact Captain Malory to try to effect
some sort of exchange."
    "Essentially."
    Shelby sat back in her chair and looked at Tarva "Is there
anyway I can help?"
    "Does this Admiral Hrgon know about project Fulton?" Tarva
asked.
    "Not officially." Shelby said as if it was a running
problem.
    "What does that mean?"
    "The Admiral is, shall we say, extremely nosy, he has to
know everything that is going on in his quadrant.  He won't
acknowledge the fact that there may be some Star Fleet projects
that he shouldn't know about."
    Tarva thought for a second then asked "And how much do you
know of the project, just were are you placed?"
    "You may have already guessed that I can't really answer
that question but I can tell you what I don't know.  I don't
know your ship's name or how its going to do what its suppose
to.  I don't know the Captain, it could be you. I do know some
of the basic tech theories proposed for use in Project Fulton
but I don't know their standing.  I guess my job is that of
liaison, any time S.F.S.C.C. comes through the computer, I jump.
Other then that, I have regular duties here.  In fact, this is
the first time I've actually been needed in this capacity."
    "I think you may be able to help us, Commander." Tarva said
"If we are going to convince Captain Malory to go along with us
we may need your input."
    "That's why I'm here."
    Tarva's comm pin began to chime, she immediately touched it
and said "This is Commander Tarva"
    "Commander," came a familiar voice "Malory here."
    Tarva smiled at the sound of his voice "Captain, I need to
talk to you, it's quite important"
    "I can arrange for you to beam over, if you want."
    "That would be best." Tarva replied.
    "Very good, I'll release authorization."
    "Acknowledged, Tarva out."
    Tarva turned to Shelby "Where's the nearest transporter
room?"
    "I'll take you."
    The two commanders walked out of the secure room and headed
down the hall.

-----------

    Tarva watched Commander Shelby, the Transporter Chief and
the Star Base transporter room begin to sparkle, soon everything
was sparkling.  The sparkling began to reform in the shape of a
new transporter room.  At the controls was a Yellow shirtted
operator and next him was a young man in a red command uniform.
    As soon as she could move again, Tarva came stiffly to
attention and said "Captain, permission to come aboard, Sir?"
    "Permission granted," Captain Malory said "Welcome aboard
the Delphi."
    "Thank you, Sir."
    "So, Commander Tarva," Malory said with a smile "how have
you been?"  The standard offer of a handshake was absent.
    "I've been fine." She replied formally "Sir, I do need to
talk with you."
    "Yes, of course." Malory said then motioned to the door.
"Won't you come with me."  They walked into the hall and headed
to the turbo lift.  "So, Commander, your doing security
consulting now, must be very interesting."
    "Yes, Sir, I get to do a lot of traveling, it keeps me quite
busy."  They rode the lift only a few decks before stepping onto
the bridge.
    Tarva quickly surveyed the bridge.  It was definitely a
standard Pentalia layout but obviously brand new.  A few things
looked slightly familiar.  They were the extra panels tacked on
to the ops station and science station.  Very similar in look to
what was tacked on the Vigilante's helm and navigation stations.
    "Mr Qhasmon," Malory said to the blue skinned Andorian
sitting in the Captain's chair "Please make sure that I have
minimum interruptions while I talk to Commander Tarva"
    "Aye, Sir." he replied immediately.
    Tarva followed Malory into his ready room and as the door
slid shut she heard someone say "Two Kalonian's in less then a
week, that's one for the record book."
    As soon as the door closed Malory turned around and embraced
Tarva.  "Sashon, what are you doing here?" He asked after their
short hug.
    "Percival, I've got a problem and I need your help."
    "You know I'd do anything I can for you."  Malory said as he
leaned against his desk with hands to his side.  "What do you
need, passage somewhere, someplace to stay, what?"
    Tarva frowned slightly and took a step toward him "It's not
that easy."
    "Well, lets hear it then." Malory was starting to get
interested, he had never known Sashon to be evasive.
    Tarva looked around the room then said "Is this room totally
secured?"
    Malory looked puzzled and troubled at the same time then
said "Computer"
    "WORKING" came the generic female voice.
    "Initiate, Alpha security"
    "ALPHA SECURITY INITIATED" Replied the voice.
    Tarva looked back at the door control panel.  The small
green light on it had changed to red.  The red light was the
only out ward sign of a security code implementation.
    "Satisfied?" Malory had walked behind his desk and motioned
for Tarva to have a seat.  After she sat down, so did he.  "Now
what's with all of the secrecy?"
    Tarva sat back comfortably, crossed her legs at the knees
and said "I'm here to get my crew back."
    "And what crew is that?" Malory asked sounding genuinely
confused.
    Tarva smiled "I believe you picked them up in AR-24.  I'm
here to retrieve them."
    "So she wasn't lying when she said Star Fleet was involved."
Malory mused to himself.
    "Who is that, Captain?"
    Malory sat for a minute then said "I should have known that
you were involved, Whitecloud is too damned cold to be
associated with anybody else."
    "I hope the Lieutenant hasn't caused you any trouble, I must
warn you that some would refer to her as, I believe the proper
phrase is 'a Loose Cannon'." Tarva paused then added "Lieutenant
Whitecloud is a very good warrior, she was one of my star pupils
when I was training Special Forces."
     Malory smiled, "Thanks for the warning, but it's a bit
late.  Don't worry though, no one was injured too severely.."
    "I do apologize for any incident that may have occurred.
Most of our crew is a bit 'on the edge'.  We've learned how to
deal with them, but they can be a handful if your not prepared."
    "So I found out." Malory agreed.
    Tarva had to turn the conversation back on track "Now if you
could tell me who else is alive and where they are."
    "Now wait a minute, Sashon, three of my officers were killed
in AR-24.  I can't just turn them over to you without finishing
the investigation."  Something was going on here and Malory
wasn't about to just drop everything blindly, even if the
security of the Federation was involved.  He had a duty to his
ship and his crew to find out what.  Besides, if this was for
real, Admiral Hrgon would know about it, wouldn't he?
    "What I was hoping for is not going to be that easy,
Captain." Tarva said "But that brings me to the other topic I
wanted to discuss."
    "And what might that be?"
    "Your landing party was not killed at AR-24."
    "What?"
    "We were able to retrieve them just before the explosion."
    "If my people are still alive, where are they?"
    "They are quite safe, you can trust me on that.  Right now,
they're just waiting for me to arrange a proper exchange."
    "Well, that's going to be difficult.  Lieutenant Whitecloud
has already been transferred to the Star Base for interrogation.
I was delivering her when you called."  Malory seemed quite
aware of the irony.
    Tarva considered for a second then said "Can you get her
back?"
    Malory laughed "Get her back? I couldn't even keep her
myself!  As required, I had to inform the Admiral of the deaths
of my three crewmen.  As such, the Admiral wanted all of the
details... After I informed him of the party that I beamed up,
he almost went berserk.  He wants to interrogate all of them
personally, I would have liked to have asked my own questions...
I have to deliver the other four survivors within a couple of
hours ..."
    "I thought there were six survivors?" Tarva said concerned.
    "Oh yes, the Vulcan S'Turlek, did not survive his injuries."
    Tarva was quiet for a few moments "Let me lay this on the
table.  We have to get this taken care of.  Not only do we want
to get both crews back to were they're suppose to be, but we
also need to adjust ship's logs to erase all data collected."
    "Now wait a minute, your asking me to forge my logs on your
word?"  Malory was quite serious "I'm sorry, Sashon, but I can't
do that, on what little you've given me."
    Tarva said  "We knew that this would be your response so
we've arranged to give you more then my word."  She then stood
and pulled out a large old style communicator from under the
back of her uniform.  She flipped it open and said "Have you
made arrangements with Commander Shelby?"
    Malory shuddered, if Commander Shelby is involved in this,
it must have something to do with the Borg.  If that's true,
it's no wonder they have such tight security.
    Tarva listened to the response on the communicator then said
to Malory "Can you at least promise not to make any new logs
concerning this incident and especially this conversation until
I've had further opportunity to convince you?"
    Now Malory didn't need to consider for a second "I will not
make any new logs or investigate this incident further until
you've had that chance."
    Tarva smiled "Now would be as good a time as any to get
started."
    Captain Malory stood, ready for the intrigue.  "Where do we
go?"
    "Let's start by going back to Star Base 89."
    "Okay, but first, I have to talk with my officers, won't you
wait on the bridge for a second.  Computer, cancel alpha
security."
    "ALPHA SECURITY CANCELED."
    The red light on the control pad changed back to green and
Tarva headed out.  She could hear Malory asking some of his
officers to come in.
    The communications officer and a young female officer were
already headed to the ready room as she stepped onto the bridge.

    "Mr Penthrach, has there been any unauthorized
communications to or from the Delphi, say in the past ten
minutes?" Malory asked as soon as the door was closed.
    The Lieutenant stiffened his large frame "No sir, our
systems would alert us to any unauthorized transmission."
    Malory then turned to the female "Ensign, has there been any
unusual ORACLE anomalies since we dropped out of warp?"
    The Ensign also came to stiff attention "No Sir, We've been
doing the standard calibrations since arrival.  We have not had
any unaccounted for readings."  The standard ORACLE testing
procedures included testing it's output against the known
readings from other ships and structures in the area.
    "Is there a problem, Sir?" Penthrach asked.
    "No Lieutenant, dismissed."
    With that all three stepped onto the bridge.

    Tarva and Malory appeared in a small transporter room on
Star Base 89.  The room was empty except for the operator, a
blond haired human female wearing a red command uniform.
    "Commander Shelby, how nice to see you again."  Malory said
to the attractive officer as soon as he was released from the
effects of the transporter.
    Shelby was all business "Sir, won't you come with me
please?"  She immediately turned and exited the room before they
had a chance to even step down from the transporter.
    Tarva and Malory followed Commander Shelby, none of them
said a word.  They were soon in the security section standing
outside the secure room Tarva and Shelby had met in earlier.
The door opened indicating it was unoccupied.  Shelby pressed a
button on the control pad closing it in front of them.  Tarva
and Shelby watched down the corridor until it was empty.  Shelby
then nodded to Tarva.
    Tarva pulled out her communicator and said into it "All is
clear, you may proceed when ready."  the communicator was
quickly returned to it's place under her tunic.
    A light blinked on the control pad indicating the door was
being operated from inside.  It then slid open revealing
Malory's First Officer.
    "Captain, it's good to see you again." Assali said with a
wide smile.

    The four sat around the table in the sealed room.  Tarva,
Shelby and Assali had been laying out the details of what needed
to be done.  With Assali convinced it hadn't taken much to swing
Malory.  There came a time that every Captain had to implicitly
trust his officers especially the First Officer this was
certainly one of them.
    "I still can't believe that Admiral Hrgon is out side the
loop on this." Malory said.
    "We couldn't include everybody." Shelby replied "That would
defeat the purpose.  The more people who know, the greater the
chance of a leak either accidental or intentional we just can't
afford one.  Besides, though Admiral Hrgon's loyalty to Star
Fleet is indisputable, he does have his own agenda.  We don't
need anybody side tracking Project Fulton to affect their own
power base."
    "I suppose your right, but it still disturbs me to be going
around a commanding officer's back."  Malory thought for a
second then said "How about Commodore Albrit?"
    Shelby frowned, "He's dead, we're still not sure what
happened to him.  No disrespect intended, but I wouldn't have
had anything to do with this project if he'd been involved."
    Malory frowned and nodded as well, "I hadn't heard that ...
but you've won me over... Now, how are we going to accomplish
this task?"

    After further discussion they had come up with plans to get
The Vigilante's crew back to her and they had a plan for
explaining the reappearance of the Delphi's officers.  The
biggest problem would be getting Whitecloud away from Admiral
Hrgon without him going ballistic looking for her.  That was the
tough part, he had her under tight guard and would be ready for
the others very soon.
    After they stood to leave Assali pulled out an over sized
communicator, like Tarva carried.  He watched the others leave
as he signaled the Vigilante.  As soon as the door shut behind
them the walls shifted and became the Vigilante's transporter
room.

    Malory spoke to Commander Shelby as they walked back toward
the transporter room.  "Tarva and I will begin preparations as
soon as we get back to the Delphi."
    "Very good, I'll begin preparations on this end.  I hope all
works out, we need to get this over with as soon as possible."
Shelby had just finished speaking when they turned a corner and
came face to face with Admiral Hrgon and Lieutenant Bloom.


    "Ah, Captain Malory, just the human I've been looking for."
said the Admiral.  He was relatively short, a Tellerite, quite
hairy with a large nose, more like a snout.
    Malory, Shelby and Tarva immediately came to a natural
attention.  "Sir," Malory said "How can I help you?"
    Hrgon ignored Malory for the moment and turned to
acknowledge the others "Commander Shelby, and this must be
Commander Tarva."
    "Sir" they both said.
    "Commander Tarva, your with the S F S C C?" Hrgon pronounced
each of the letters as if it were a word.
    "Yes, Sir." She replied.
    "Very good, I'll be wanting to discuss something with you,
if you could contact my aid to set up a time."
    "Sir, I may not be in the area much longer." Tarva said
trying to avoid the meeting.
    "Well, we'll just have to make it soon.  By the way,
Lieutenant Bloom informs me he could not find a record of your
billet assignment or even of your arrival itinerary."
    "Sir," Tarva said not wanting to appear defensive "part of
my job is to identify security lapses at Star Fleet
installations.  Though I'm not here on official business it's
become kind of standard for us to travel under low profile.
Since I'd just arrived, when I encountered Lieutenant Bloom, I
had not yet secured quarters.  Now Captain Malory has offered
the hospitality of the Delphi so I'll be billeting there."
    "And what of Lieutenant Whitecloud?" Malory asked.
    Hrgon looked at the two female security specialists flanking
the Captain then said "We were unable to get any new information
from her.  She has been extremely well trained, I wish my whole
security staff were trained as professionally."  The last remark
made Bloom shift uneasily.
    "Also, Captain" Hrgon continued "I'm going to want to
discuss this matter with you more in depth some time soon, as
well as your new orders, now that Albrit is dead.  Perhaps you
should accompany the rest of Whitecloud's crew when
you transport them over."
    "Yes, perhaps that would be the best time." Malory agreed,
somewhat surprised by Hrgon's callousness.
    "Very good." Hrgon was about to walk away when he turned to
Shelby.  "Commander, are you available in about half an hour?
I've got some problems related to Captain Malory's guests I'd
like your opinion on."
    "Yes, Sir." Shelby said instinctively.
    "That will be all, dismissed." Hrgon and Bloom continued
down the corridor.
    "Do you think he just happened to bump into us?" Tarva said
more insinuating than asking.
    Nobody bothered answering her, they were at the transporter
room.

-----------

    Tarva stood in her room on the Delphi looking out at Star
Base 89.  She had to take her room for appearances sake but they
had work to do.  She had her communicator in hand but she had
paused to look at the majesty of the station.
    Tarva flipped open the devise, held it up to the side of her
face and said one word "Energize".
    There was a slight pause waiting for an opening then the
wall and window in front of her shifted and became Transporter
Room II on the Vigilante.  Captain Anthony stood next to Chief
Swanson at the controls, with him were Commanders Assali and
Norton.  "Report" he said simply.
    "Sir, as Commander Assali has probably reported we have a
plan to return all crew to their proper assignments.  There will
be a slight delay retrieving Lieutenant Whitecloud, she has
already been transferred to Star Base 89."  Tarva remained
standing on the transporter.  "The only other problem will be
telling exactly when our team is being transported."
    "Does the Delphi have any Klingon or Kalonian crew?"
Anthony asked.  He had approached her and stood a step below her
so he could talk to her more face to face.
    Tarva knew where he was leading "No sir, the Klingon and the
Kalonian our scans show are both survivors of the drop ship."
    "And there are five of our people still on the Delphi?"
    "No Sir, one of the original crew died after arriving on the
Delphi.  He was the Vulcan S'Turlek."  Tarva had not moved from
her spot.
    "So as long as they transport all of our crew at the same
time, by themselves, we should be able to get them back."
Anthony headed back to his place by the control panel.
    "Sir, Captain Malory has assured us he would arrange to make
it so." Assali said.
    "Very good," Anthony turned back to Tarva "Commander, you'd
better get back to the Delphi."
    "Aye, Sir."
    The wall and window shifted back.

-----------


    "Sir, Holding Area R-8 reports they are prepared to receive
our guests."  reported the Yeoman standing at the control panel.
    "Very well, have them brought in."  Malory and Tarva stood
to one side of the operator.  They would beam over after
transporting the four.
    The door to the transporter room opened to allow in the new
arrivals.  First in was the Klingon female flanked by two
security guards.  The rest followed, each accompanied by two
security guards with drawn weapons.  One of the guards carried a
metal satchel that contained all of the equipment and clothing
the survivors had with them when they came aboard.  The last in
was the Chief of security, her and the guard carrying the bag
were the only ones without drawn phasers.
    The four walked straight to the transporter and took their
positions.  None of them said a word or acknowledged Tarva's
presence, but they did notice her.  The bag was placed on its
own pad then the security stood back from the pad, as was
custom.  They, however, did keep their weapons drawn.
    Malory turned to the operator "Raise force field".
    "Force field activated." he said after pushing a few
buttons.
    The security immediately holstered their weapons.
"Dismissed." Lieutenant Zalvasta said.  The eight immediately
filed out of the room.
    Malory, Tarva, Zalvosta and the operator were the only ones
to remain.
    "Where is Smith," The Klingon demanded.
    "What have you done with her?" said one of the humans.
    Malory smiled, they were good, defiant to the end.  "Don't
worry, you should be seeing her very soon."  he then turned to
the operator "Energize."
    A few buttons were pushed, then he slid his fingers up the
control panels applying power.  The four started the normal
sparkling then the operator said "Sir, I'm reading some sort of
power surge.  Delphi to R-8, do you have a lock?"
    They had started fading in and out "Delphi, this is R-8 we
can't get a secure lock, increasing power."
    The operator responded "Try to reverse, we don't want to
lose them."
    "Acknowledged." the four continued to sparkle and fade.
    "What's going on?" Malory demanded.
    "Sir, something's wrong, we've lost the fix, trying to
regain now."  The operator was desperately pushing buttons.  A
red light on the console began to blink accompanied by a beeping
sound.
    "Delphi, do you have them?" came a worried voice over the
speaker.
    "I think I've got the lock..." the whole transporter flashed
from an explosion.  The force field absorbed most of the
explosion but failed from loss of energy.  The control panel
mostly protected the operator but Zalvosta, Malory and Tarva
were fully exposed.  All three were thrown back against the bulk
head.
    Red emergency lights came on to a loud fire claxon.  The
operator stood up from his instinctive ducking position and
started calling for medical and emergency teams.  He then turned
to attend his Captain.
    "Delphi, what happened over there, we've totally lost them.
Do you have them?  Delphi, please come in...."

-----------

    Tarva limped into Malory's quarters after signaling.  A
fresh scar ran down the far right of her face from just below
her ear wrapping around toward front of her neck and
disappearing under her collar near the rank pips.  Her left arm
hung in a low sling.
    Malory sat at a work station table in the middle section of
his suite.  A large regeneration patch was affixed to the right
side of his face.
    As she approached, he looked up at her.  She could see the
fury in his eyes.  "Computer!"
    "WORKING"
    "Initiate Alpha Security."  he said loudly.
    "ALPHA SECURITY INITIATED."
    Malory stood up to face Tarva she could see his upper torso
was held stiff by a temporary brace.
    "What the HELL did you people do to My transporter?!" He was
losing his attempts to control the anger.  "We could've all been
killed!"
    "Sir," Tarva said trying not to react to his emotions "the
transporters on the Vigilante are a radical new design.  It was
impossible to predict how the Delphi's transporters would
respond to the forced signal."
    "Nothing's impossible to predict when it comes to this kind
of technology.  If your people didn't know or suspect then they
are extremely incompetent."
    "Percival," Tarva said softly trying to calm him "if they
did know, I was not informed.  You must remember though, we are
still in training, that includes learning all of the
idiosyncrasies of the technology.  Nobody on board was involved
in any of the development, they just handed it over to us and
said 'good bye'."
    "My transporter room was destroyed and four people were
almost killed, I hope it's worth it."  He had softened some.
    "I hope so too."
    "Did they get a hold of your people okay?"
    Tarva smiled slightly "Yes, Sir, they arrived with no
adverse effects."
    "Very good, at least some thing went right."  Malory had sat
back down.  "Now Admiral Hrgon is screaming for me.  I've been
able to put off going to see him because of the injuries but
that's already wearing thin."
    "This could be my chance to go, he did want to talk to me
too." Tarva suggested  "We have to start enacting the plans to
get Lieutenant Whitecloud back to the Vigilante."
    Malory cringed at the reminder that he was still going to be
involved in these covert operations.  If Hrgon pieced it all
together, it could ruin his career.  "Very well, I'll make
arrangements.  Dismissed."
    As Tarva headed back to the door Malory was saying
"Computer, cancel Alpha Security."
    "ALPHA SECURITY CANCELED"
    The little green light on the panel came on just as Tarva
reached the door.

-----------

    Lieutenant Bloom met Malory and Tarva in the transporter
room.  "Sir, I'm surprised your willing to use the transporter
so soon after the accident."  He said to them as they started
down the hall.
    "The transporter that exploded, is no longer functioning."
Malory said as if talking to a child.
    "Has there been any progress in determining the reason for
the accident?" Bloom persisted.
    "No, the explosion left very few clues." Tarva replied.
    As they progressed through the corridors they could see an
increase in security, including check stations and ID checks.
Finally, they reached an interrogation area and met Admiral
Hrgon.
    "Ahh, Captain Malory and Commander Tarva I'm glad your back
on your feet after the accident."  Though he was trying to sound
pleasant, his irritation was quite evident.  He then headed into
one of the rooms saying "Come with me."
    A window on the far walled looked into one of the rooms.
Sitting casually at a table was Lieutenant Whitecloud.  "This is
Lieutenant Anndrea Whitecloud." Hrgon said to Tarva.
    "Sir," Tarva interrupted "is that a one way window or a view
screen?"
    "It's just a standard observation window." Lieutenant Bloom
said trying to get in on the conversation.
    "I'm sorry, Sir." Tarva said "You were saying her name is
Whitecloud."
    Hrgon looked slightly irritated but continued "At least
that's what our records tell us.  They also tell us, however,
that Lieutenant Whitecloud was killed in a transporter accident
almost a year ago.  In fact, Commander, all four of the victims
of your transporter accident are all listed as having died
around a year ago."
    Hrgon turned back to Malory and Tarva "Don't you think it
quite odd that all of her living but dead comrades were killed a
second time in a transporter accident?  As a security
specialist, Commander, how do you interpret this situation?"
    "Sir," Malory interjected "Whitecloud claims to be part of a
top secrete Star Fleet mission.  If this is true, the
inconsistencies with her story tend to add up."
    "All except two," Hrgon said "Have you read her file?  She
has been rec-og-nized for bravery, and was top of her class"
Hrgon sniffed.
    "She also has a record like your Lt. Qhasmon.  She has been
busted two times for insubordination.  She was put on hold for
fighting with shipmates, and her last Captain had to get her out
of jail for destroying a bar in a fist fight on Intalla 4.  All
her comrades had similar records.  This isn't the type of person
for a Star Fleet top secret project..."
    During Hrgon's speech, Tarva figured that he just didn't
know how to handle a good warrior.
    Hrgon continued "Finally, I am not aware of any top secret
missions in this quadrant.  Star Fleet would not be running
training missions in this quadrant without alerting me."
    "Sir," Tarva said "What if she is telling the truth?"
    "That's just not possible."
    "Sir, you must have an open mind when it comes to matters
like these.  Shouldn't you at least consider the consequences of
pursuing what may be a classified project.  There may be a very
good reason for such tight security."  Tarva was trying to act
like she was piecing her argument together as she went.
    Hrgon seemed to take extreme offense to the argument.
"Commander, I'm a Rear Admiral in Star Fleet.  I am responsible
for the security of this entire quadrant my integrity is beyond
reproach."
    Tarva was extremely uncomfortable with anybody believing
themselves so invincible.  "Sir, I'm one of the few survivors of
Wolf-359.  I've lived through what can happen when an enemy gets
inside the head of someone who's loyalty and integrity are
beyond reproach.  If we don't start keeping that in mind as we
form our own power bases, the Federation may not be so lucky
next time."
    "Commander, do you know more about this then you are letting
on?" Hrgon suddenly sounded extremely suspicious.  "Tell me,
just exactly which ship did you come in on."
    Whitecloud began fidgeting around under the table.  Soon she
ducked down so nobody could see her.
    "Sir, I resent the implication your making." Tarva said
"Could it be, that I've struck a cord you don't want to hear?"
    Lieutenant Bloom was looking into the room "Sir, where did
she go?"
    "I think she went under the table." Malory responded.
    "What the hell is she doing?" Bloom asked and approached the
window to get a better look.
    Whitecloud stood up from under the table and looked directly
at the window.  She then calmly lifted her right hand as if
pointing at them.
    "Look out, she's got a phaser!" Bloom yelled and dived
toward the Admiral knocking him to the deck.  Malory and Tarva
hit the floor to the whine of the phaser and exploding glass.
    Lieutenant Bloom was the first one up, hitting his comm pin
and calling for security as Whitecloud jumped through the
window.  He was grabbing for his phaser as she approach then
hesitated when she seemed to be turning away.  He never realized
that she was setting up for the round house kick that dropped
him to the floor, unconscious.
    Whitecloud then grabbed Tarva from behind holding her close
across the abdomen with the phaser between them.  It was clear
to all that she had the phaser set to maximum power.
    "Everybody get up." Whitecloud said to Malory and Hrgon.
    "If you were really Star Fleet," Malory said "you wouldn't
be doing this."
    "Lieutenant, you'll never get away from here," Hrgon added
"you've just sealed your fate."
    "You make any kind of move on me," Whitecloud said calmly
but with wild eyes "I'll take the Kalonian with me.  Do you
really want to risk that?"
    "Lieutenant," Tarva said "be reasonable you don't want to do
this." sweat had begun to form on her face.
    "Quiet!" Whitecloud demanded and nudged the phaser some
"Quiet all of you!"
    The door to the room flew open and three security guards
jumped through phasers in hand.  The first two fired point blank
at both Tarva and Whitecloud.  At the same time Malory jumped at
Whitecloud hoping to knock the phaser loose.  He heard the tell
tale sound of a phaser set on full power being fired when the
shots from the security phasers struck him.  Just as he would
have hit them, Whitecloud and Tarva were enveloped by a red glow
and disappeared.  Leaving Malory to roll to the floor
unconscious.

-----------

    Captain Percival Malory lay in his own bunk aboard the
Delphi, his head still throbbed after almost a full day.  The
phaser blasts on top of his previous injuries had made him
extremely weak.  He still wasn't sure what had happened, he
hadn't heard from the Vigilante and it didn't go down the way
he'd been told it would.
    He wasn't sure if he'd drifted off or what but he was
suddenly aware of a presence next to his bed.  He turned to
look, it was his old friend Sashon.  She wasn't dressed in her
standard mustard yellow uniform but in a baggy black one.
    She leaned over to look at him, her long braid fell to one
side.  "How are you she whispered?"
    "Fine, just very weak, Dr Mayak tells me I should be good as
new pretty soon." he smiled and sat up slightly leaning on his
elbows. "When am I going to get my officers back?"
    "They'll be along very soon." Tarva said quietly "Just
remember your one last promise."
    "Don't worry, I'm in too deep to back out now." then asked
"What about the logs we down loaded to Star Base 89?"
    "We have to trust that Commander Shelby can take care of
those files."  Tarva said carefully.  She could see the strain
in his face. "I've got to go."
    "Make sure you come back, I don't want this all to end up
being just a waste of time." he had eased himself back down
flat.
    "I'll do my best, I promise."  She leaned over and kissed
him lightly then stood up straight.  He watched her flip open
her large communicator and say something into it.  "Good bye my
friend." she said to him then was gone.
    "Good bye.." he said, then surrendered to the exhaustion.

-----------

    The following day, Tarva went down to one of the cargo bays
to see the final loose end tied up.  In the bay sat one of their
few standard transports.  This one had been given private
markings and I.D. codes.  The ship was too big for the bay and
sat at an angle to fit.
    Commander Assali and crew stood dressed in their
environmental suits outside the ship waiting for the pilot.
They had purposely damaged the suits and covered themselves with
dirt.
    One of the few human drop ship pilots had planned to pilot
the transport but Norton and Kartang had decided otherwise.
They didn't need another 'loose canon' on the Delphi even if it
was just for an hour or two.
    "So who's going to pilot it?" Assali was asking Shuttle Bay
Chief, Taragoma.
    "I'm not sure" he said "but he should be here anytime now."
    As if in response to his prediction a door to the bay opened
to allow in a person dressed in non-issue clothing.  The clothes
looked like a conglomeration of Klingon and Romulan uniforms
with some other odd equipment thrown in for good measure.  An
old style Romulan disrupter hung comfortably at her side.
    Taragoma didn't recognize her at first until he noticed her
bright red hair which had been slicked down flat.  He smiled and
said "You'd better wear your seat belts."
    Assali recognized her too "Isn't that Ensign O'Malley, the
navigator?"
    Tarva had joined them "Yes, Commander, it is."
    They watched her begin the preflight check with one of the
technicians.  "Don't you have somebody other then the ships
navigator for this mission?" Assali asked.
    "Most of our Drop Ship pilots are not human," Tarva said "we
felt that after the trouble we've caused, a non human pilot
would actually invite closer scrutiny.  The few pilots that are
human, however, have had, shall we say, a falling out with Star
Fleet of one sort or another.  It's been decided that Ensign
O'Malley would be the best pilot to deal with Star Fleet at this
time."
    O'Malley approached the group and stood at attention "Sir,
the ship is ready for departure." she said to both Tarva and
Assali.
    "Very good," Tarva said "prepare for departure."
    The four boarded the ship.  It had been loaded with an array
of trade goods and amenities for long haul travel.  It really
looked and smelled like someone had been living in it for a long
time.
    O'Malley sat in the pilot's seat with Assali at co-pilot.
Albert and Meede sat in makeshift net type slings in the cargo
area.  "This is the Faraday requesting clearance for departure."
O'Malley said to flight control.
    "Faraday your cleared for liftoff." Taragoma replied.
    The blast shields in the cabin snapped shut as the Faraday
slowly lifted from the deck.  The ship rotated forcing the aft
end through the force field of the bay so it could slip free of
the ship.  O'Malley hated flying blind.
    The Vigilante had moved to the asteroid belt to let the
Faraday out unseen.  The blast shields remained shut until the
ship was clear of the Vigilante's cloaking.  Great measures had
been taken to keep details from their guests, they weren't about
to cancel that by letting them get a look at the actual ship.


    "Captain," Lieutenant Penthrach turned toward Malory "We're
being hailed by an incoming transport."
    Malory wore a small regen patch near his ear and sat extra
straight still feeling the effects of the back brace he'd very
recently shed.  "On screen."
    The face of a young, red haired female human filled the
screen.  "Hailing the U.S.S. Delphi, this is the Transport
Faraday."
    "This is the Delphi, Captain Malory speaking." Malory said.
    "Captain" the woman replied "I'm Janny Osborn, owner and
operator of the Faraday.  I believe I have some people you've
been looking for."
    "Indeed?" Malory tried to sound slightly intrigued but not
really interested.
    They could see her reach up and adjust something on the
control board.  The view on the screen started to widen
revealing a very familiar face.
    Malory stood up quickly to the sounds of gasps from the rest
of the bridge crew.  "What is the meaning of this?" he tried to
sound as surprised as the rest of the crew.
    Commander Assali sat next to the pilot, he wore a tattered
environmental suit and was smudged with dirt. "Captain, Sir,
permission to come aboard?" he said.
    "It's a trick." Qhasmon hissed "We saw them die in that
explosion."
    Malory ignored the Andorean "Are there any other survivors?"
he asked trying to sound very unconvinced.
    "All three of us survived," Assali said "the others are in
the back.  Sir, if we could expedite this, we haven't had a
shower in quite awhile."
    Malory signaled to have audio broadcast cut then turned to
the ORACLE operator "What can you tell me about that ship?" he
had to cover all the bases he normally would.
    "Sir, I read four life forms, all humanoid." She scanned the
readings closer "There is no unusual power output or
substances." she continued to dial in, "In fact, sir, I read the
power output to be quite weak.  My first guess would be that the
dilithium crystals are deteriorated."
    Malory turned back to the screen "Permission granted to land
your craft in shuttle bay 1."  He then cut the audio transmitter
again and turned to the intercom. "Security and Medical to
Shuttle Bay 1.  Shuttle Bay 1 prepare for incoming transport."
    "Captain," O'Malley said cautiously trying to play the role
"Your crew has promised me certain compensation for returning
them."
    "Are you trying to ransom my crew to me, Captain Osborn?"
Malory asked very suspiciously, he hadn't been told of this
twist.
    "No, Sir." O'Malley replied with what seemed to be a twinge
of fear.  "It's just that this being a high security area I may
have trouble leaving freely.  I've been promised safe passage,
absolutely no interference."
    Malory looked toward Assali for confirmation "That's
correct, Sir.  With the stipulation that she does not incur any
offenses while with us."
    O'Malley laughed "Yea, I'm to be on my best behavior."  She
then said "There is one other thing that is even more
important."
    "And what is that?" Malory said, though, knowing how these
people operated he could guess what it was.
    "As your scanners have probably already told you," O'Malley
said "My supply of dilithium crystals has begun to deteriorate.
I've been promised the needed repairs to the drive and
replacement of the crystals."
    "What ever Mr Assali has promised, I will stand by." Malory
finally said tiring of the 'negotiations'.
    "Very good" the red head said "Starting approach to shuttle
bay."  the screen returned to standard view of the approaching
ship.
    "Sir," Penthrach said "In coming message from Admiral Hrgon.
Apparently he's been monitoring the conversation."
    'Here it comes' Malory thought to himself then said "Thank
you Mr Penthrach, I'll take it in my ready-room."

    The transport expertly slid into the shuttle bay and set
down smoothly.  The door on the side of the long boxy body
hissed and jerked open.  Steam poured out of release valves
partially obscuring the opening.  A short figure walked up to
the door way then started down the stairs.  He wore a tattered
environmental suit and carried the helmet professionally under
one arm.
    The semi circle of security guards around the opening knew
at once it was Lieutenant Meede.  Immediately behind Meede, came
Midshipman Albert looking similarly disheveled.  By the time
Meede reached the deck the doorway was filled by Commander
Assali.  Finally, Chief of Security Zalvosta loudly said
"Attention, First Officer on Deck"  bringing the assembly to
stiff attention as Commander Assali descended the ramp.
    Zalvosta approached the three "Sir, Welcome back" She said.
    "Where's Captain Malory?" Assali asked.  Then smiled "I
thought he would be here to greet his prodigal sons personally."
    "Sir," Zalvosta replied "He received an urgent message from
Admiral Hrgon just as you were making your final approach."
    "Yes, I understand." they were expecting as much.
    Doctor Mayak approached with her team to begin preliminary
scans of the survivors.  Zalvosta turned to speak with Meede
but was distracted by a commotion from the assembly.  Coming
down the gangplank was an oddly dressed woman with slicked down
bright red hair.
    The woman wore what appeared to be an assortment of
mismatched older style Romulan and Klingon uniforms.  There was
also a small assortment of equipment strapped to her, not the
least of which was an old Romulan disrupter casually dangling
from her round hip.  This was obviously the pilot, Janny Osborn.
    "Ms Osborn," Zalvosta said when she reached the bottom of
the steps "I'm going to have to ask you to leave the weapon with
us for the duration of your stay."
    O'Malley looked at Zalvosta suspiciously for a second then
looked at Meede and Assali, Assali nodded.  O'Malley made a
quick motion toward the disrupter jerking it from the holster
and spinning it next to her at the same time.  The barrel ended
in her hand with butt pointing out.  She then turned and gave it
to Meede.

-----------

    The assembly sat in one of the Delphi's meeting rooms.
Present were Admiral Hrgon and his aid, Captain Malory,
Commander Assali, Lieutenant Meede, and Midshipman Albert.  Also
present was the ORACLE operator on duty at the time of the
explosion at AR-24 and Janice O'Malley.
    O'Malley sat toward one end of the table away from the rest.
She was slouched back with her feet sticking out in front of
her.  It was all she could do to keep from putting them up on
the table but figured she was pushing it as it was.  She really
enjoyed playing the rogue.
    Admiral Hrgon turned to O'Malley "Let me get this straight,
you were passing by the AR-24 system when you picked up a
distress signal?"
    "As I've said several times before," O'Malley said "I was
passing by the system when I received what sounded like a
distress call.  The Faraday was already starting to have
problems but I figured there may at least be something to
salvage.  It wouldn't take much to scan the area and see if I
could find something to help fix my drive."
    "You weren't even thinking of survivors?" Malory asked.
    "Of course, if there were survivors there would be a better
chance of some usable equipment.  Besides, a lot of times there
is a reward for the safe return of survivors.  Sometimes, the
survivors are able to express their appreciation for being
rescued."  O'Malley had rehearsed the story well.
    "Did you know that charging survivors for rescue is against
just about every code there is?" Hrgon asked in disbelief.
    "Of course, but there is usually some sort of voluntary
reward.  For instance, I would not have come here if it wasn't
for your crew.  My first choice was the Nexus Colony, they were
much closer and not nearly as patrolled as this place is."
    "And you would have had to pay for your own repairs at
Nexus, is that right?" Hrgon was more making a statement then
asking a question.
    "I'm a trader, I have to make the greatest return possible.
If I come out of this with free quality repairs, I've done quite
well."
    "Surely" Hrgon said trying to look threatening "You know
that if we run a complete I.D. check on you, you'd probably be
arrested."
    "I was assured safe passage by a Commander in Star Fleet,
that was enough for me." O'Malley had to remain confident.
    "That is enough, Sir." O'Malley said firmly to Hrgon.
"We've had enough tragedy from this incident, it's time to close
the book on it."
    Hrgon took the opportunity to turn on Malory "And how do you
explain abandoning your landing party on a planet with a hostile
environment?"
     "Sir, there were several factors leading to the apparent
'abandonment'.  First of all, there was some effect from the
rock structures on the planet on the ORACLE sensors. Couple this
with the storms, and we were effectively sensor blind. False
images abounded and by the time we did get a good check, thanks
to the timely recovery of Lt. T'irna, there were no life signs
on the planet. Moreover, both you and Star Fleet command had
ordered the DELPHI to come here at once anyway. You because you
wanted to question the survivors personally, and Star Fleet
command on the whims of the late Commodore Albrit."
    Hrgon frowned at the shifting of blame but before he could
say anything Assali said "Sir, we were unconscious for over
twenty four hours, by the time we dug our way out of the sand we
could not reach the Delphi, our communicators were destroyed.
If Ms Osborn hadn't also heard the distress call that originally
brought the Delphi in we would be dead by now."
    The discussion of detailed events lasted several more hours.
Each person involved ended up telling their story several times,
some times in groups and sometimes separately.  In the end Hrgon
begrudgingly closed the case accepting the stories as they stood
but vowed that he knew some kind of cover up was happening.  He
also said that he thought that all of this was somehow connected
with Whitecloud and 'The Vigilante' and would eventually prove
it.

-----------

    Malory, Meede and Assali stood in the shuttle bay to see
O'Malley off, all other standard personnel had been dismissed.
Meede carried the disrupter and gave it back to O'Malley as she
stood in front of the ramp.
    "I'm glad you finally decided to trust us" O'Malley said to
Meede spinning the weapon back into it's holster.
    "I didn't have much choice." he said then added with as much
of a smile as he could muster "I half wish I was going with you,
that was a fine crew."
    "Thank you," O'Malley said "Coming from you, that is quite a
complement."
    She then turned to Assali.
    "Give my regards to everyone, I wish you the best of luck."
Assali said holding out his hand.
    O'Malley shook the Commander's hand and said "Thank you,
sir, we'll need it."
    Malory also offered his hand "I thought I had said all of my
good byes already." he said "Just make sure you bring them back,
is that clear."
    "Yes, Sir." O'Malley said then shook his hand.  Before she
let go, she hugged the Captain lightly then the other two.
Janice then climbed the steps to the Faraday and disappeared
behind them as they closed.
    The Faraday waited as the bay doors opened then slid out of
the Delphi and headed to the asteroid belt.


                              ++++

    The woman standing next to Captain Anthony's bed seemed tall
for a human female.  Her wavy blond hair was cut to above
shoulder length and was held casually away from her face with
several clips.  She wore the red uniform and insignia of Star
Fleet Command.
    Anthony stared at the woman as she sat down on the edge of
his bed.  "Robert," she said softly "your doing the right thing.
Star Fleet needs information on the Borg.  If they ever return
in force, it could mean the end of life as we know it.  You know
that can't be allowed to happen.  Everybody here knows the
risks, they've accepted them.  Use the information we obtained
from the battle to keep your crew alive."
    "I've lost so many already" he whispered "and we haven't
even left the Federation."
    "I know," she said soothingly "many more could die too, if
you let them."
    Anthony raised his hand to touch her face and she reached
out to touch his.  "I love you.." he said as she faded away.

    The door signal chimed waking Anthony, he called for the
visitor to enter.  Commander Tarva came in and stood at
attention just inside the door.
    "Sir," she said "all final tests have been completed, the
U.S.S. Vigilante is ready for deployment."
    "Very good," he said "Notify all hands to prepare for
departure within the hour.  I'll be with you in a moment." Tarva
reached for the wall mounted communicator to relay the orders
and Captain Anthony headed into the bathroom to change.
    Tarva waited in the first room in her standard 'at-ease'
posture looking around the Captain's cabin.  She had been here
before but had never taken a close look at it.  The cabin
consisted of three rooms separated by the same style dividers as
in her room.  The first room was set up as a meeting room with a
table and several chairs.  The middle room was the sitting room,
with a couch and the standard rough duty chairs.  The third room
had the large, almost double bed, closet and other amenities.
    Next to the door, was a shelf with a glass covered pedestal.
On the pedestal was a faded blue book with well worn edges.  In
the upper right hand quadrant were stacked faded gold print
words 'Collected Poems of Robert Service'.
    Tarva pushed a button on the pedestal, the front of the
glass opened and the platform holding the book slid out at her.
Tarva carefully opened the front cover and saw a name penned on
the inside 'L..ry Na..' the rest seemed to be an address.
Something compelled her to turn to the end of the book and read
the last stanza of the last poem...

               And so, frail creatures of a day,
             Let's have a good time while we may,
             And do the very best we can
             To give one to our fellow man;
             Knowing that all will end with Death,
             And lift our heads like blossoms blithe
             To meet at last the Swinging Sythe.
                             FINIS

                        to be continued........


------------




                   T  H E   V I G I L A N T E

                              IVA

                        "Ring of Spears"




            "Deny your God!" they ringed me with their spears;
            Blood-crazed were they, and reeking from the strife;
            Hell-hot their hate, and venom-fanged their sneers,
            And one man spat on me and nursed a knife.
            ..........
                 "The Soldier of Fortune"
                      Robert Service



    The screen showed the count down, fifteen minutes was almost
up....00:59, 00:58...the bridge crew sat quietly, preparing for
the inevitable...Phasers had been secured by all stations, just
in case....00:37, 00:36...
    Captain Anthony looked at his crew, they seemed almost
relaxed, but they had done this before...0:24, 0:23...
    Behind the numbers, were the rushing stars illusion of warp.
The Vigilante had jumped to high warp when the count down had
reached 01:00.
    Ensign O'Malley watched the displays on her control panel.
Had she set the coordinates properly? or would they die in the
middle of a star.  She was aware of the padding of the head rest
of her seat.  She could remember how it felt in the
past...00:13, 00:12...
    Commander Norton couldn't suppress a grin, this was the
ultimate adventure, from a planet of half breed out-casts to the
greatest mission ever, he'd been preparing for this all his
life...
    The computer voice came on "TEN, NINE,...".  it seemed like
an eternity, "...THREE, TWO, ONE." The stars on the screen
turned blue and started forming rings.
    00:01, 00:02 ...the numbers started counting back up but
blurred from the screen...
    Captain Anthony felt the seat wrap around him, like in the
past.  The blue tunnel on the view screen started rushing at
him, it was pushing him through the chair.  He instinctively
tried to reach for the console in front of him but his arms
refused to move.  A noise started coming to him, it was a chorus
of screams, he joined in....

    In engineering, Commander Dolittel watched anti-matter
mixing chamber 1 pulse at its steady rate.  The worm-hole was
caused by alignments in the warp drives, what most engineers
would consider a fatal design flaw.  The power draw wasn't any
different than it was at warp 9.6 so engineering wasn't as taxed
a one would think.  The blue rings of the worm-hole drove
through him....

    As quickly as the discomfort had started, it was over.  It
left behind splitting headaches and knotted muscles.  It seemed
only a short time, but ten minutes had past.
    Captain Anthony undid the restraints and slid from his chair
gasping.  On either side of him, Tarva and Norton also tried to
catch their breath and fumbled at the restraints.  Anthony knelt
on the deck at the foot of his chair, his right arm lay across
the seat and the other propped him up.  This had been the
longest jump yet and he could feel it.
    The standard rushing stars of warp were back on the screen,
superimposed on them was the worm-hole count, 10:00.  Anthony
looked to his helmsman.
    "Full Stop."
    "Aye, Aye, Sir." the Ensign said "Full stop".  He then
pushed a few buttons on his console.  The rushing stars
disappeared.
    Anthony pulled himself back into his chair, "Mr. Norton,
report."
    "Sir," Norton paused trying to clear his head completely. "I
read no sign of activity in this sector and no sign of the worm
hole."
    "Thank you, Commander." Anthony turned toward his navigator.
"Ensign O'Malley, do you have our location plotted yet?"
    Janice leaned forward with left elbow on her console and
held her head while she worked with her right hand.  "Sir,
destination sector confirmed, we're at the far side of suspected
Ferengi frontier."  They had gone completely through the Romulan
empire and now were beyond any sector the Federation had ever
visited.
    "Very good, begin plotting the next leap....Ah, Ensign, this
time lets keep worm-hole time down to around, say eight minutes.
That last ride just about did everybody in."
    "Aye, Sir." Janice smiled, the Captain was trying to make it
sound like he wasn't responsible for that ten minute jump.
    Janice began plotting the next leap.  After each use of the
worm-hole they had to recalculate a new heading.  The worm-hole
never placed them exactly where they had intended and the error
increased the longer the jump.
    Anthony turned on the ship's public address system
"Attention crew, prepare for next controlled worm-hole in one
hour.  All stations should have status reports filed with in
fifteen minutes.  That is all."
    For the next hour, the bridge crew reviewed the reports from
the rest of the ship and ran tests of their own.  It was
imperative that The Vigilante be in perfect condition before
using the worm-hole.

-----------

    Anthony sat in the Command Room at the head of the long
table.  He'd been reviewing some of the command reports but his
attention had wandered to a nearby window.  The blast shields
had been opened to give him a view, now he just sat and stared
at the stars.   The blackness and the stars engulfed him.
    The mission had been so long in the making, it was hard to
believe they had finally taken the first step.  Two more jumps
would put them in the same sector that The Enterprise had first
encounter the Borg.  The Enterprise had been 'flung' there by an
entity known as the 'Q'.  It had apparently wanted to prove that
the Federation was not prepared for what lay outside of its
borders.  That one encounter, had brought the Borg to the heart
of the Federation.  That one encounter had changed his life,
forever.  That one encounter, in fact, had brought this crew
together.
    Anthony still wondered what it was like when the Nielsen was
destroyed.  Did she die doing battle or was she merely swept
aside like so many other victims.  He would never know, and when
it came down to it, he didn't really want to know.
    The stars suddenly disappeared replaced by the dull gray of
the blast shield.  Anthony could hear the door slide open and
someone enter the room.  He turned to look.
    "Sir," it was Commander Tarva.  She stood in her stiff.
at-ease posture, close enough to the door to keep it open.  "We
are prepared to begin count down for the second worm-hole."
    Anthony looked at his First Officer, she had been at
Wolf-359.  He wanted to ask her what she knew of the Nielsen but
couldn't.  He knew that it was as difficult for her to speak of
as it was for him.  Just having her as his first officer, made
him feel closer to the last moments of his real life.
    "Thank you, Commander, make it so."
    "Very good, Sir."  Tarva came to attention, snapped about
face, then exited the room.
    Tarva was a true enigma, sometimes she was, stiff,
absolutely military, other times, she acted like an old friend.
Perhaps she could sense when he needed distance, or perhaps, she
needed the distance.

-----------

    The jumps seemed to get easier, perhaps they were getting
used to them.  The crew came out of the third jump fully
functional, which was good, since it was a suspected Borg
sector.  This was the same sector the Enterprise had first met
the Borg.
    "Long range sensors report." Anthony said immediately.
    Norton checked his screen.  "Sir, scanners indicate no
activity in this sector."
    Anthony had released himself from the restraints and was
stretching.  He turned to Commander Tarva "Commander, what's our
status?"
    "Sir, all sections report no apparent damages.  Full reports
will be ready shortly."  Tarva was still fully strapped into her
seat.
    Anthony stood behind O'Malley who was still trying to
stretch off the effects of the worm-hole.  "Ensign, how many
star systems are in this sector?"
    "Checking now, Sir." O'Malley immediately reached for her
controls.  "Sir, there are three systems in this sector, one
yellow system and two reds."
    "Thank you, Ensign."  Anthony turned and looked at his crew
while he thought.  Their mission was quite open ended, seek out
the Borg in the heart of their territory and collect as much
useful information on them as possible.  They did not know were
the Borg came from, so this was just the first step in tracing
them back to their, hopefully, 'home' planet.  He turned back to
O'Malley.
    "Ensign, plot a course to the nearest system.  What would be
our E.T.A. at Warp seven?"  Anthony stood between the two front
stations with his thumbs hooked in the pockets of his uniform
jacket.
    After a few calculations, she reported "At warp seven, the
closest system is 10 hours 15 minutes away."
    "Very good, lets go take a look."
    "Course laid in, Sir."
    "Engage."
    The helmsman went to work.
    Anthony turned to Norton "Mr Norton, what's our status?"
    "Sir, Shields are currently at 25% power and cloaking is
engaged.  We have full power available any time it is needed."
    Anthony took his seat and turned to Tarva "What do you
think?"
    Tarva had finally taken the time to undue her restraints.
She finished a communication with medical, then turned to the
Captain.  "Sir, we could be exploring out here for a year and
never see a sign of the Borg.  The cube the Enterprise
encountered may have been some sort of long range scout.  There
may never have been any other Borg presence in this quadrant."
    "I quite agree, but this is all we have to go on."
    "Just so we're prepared to do a lot of simple exploring for
the Federation."  Tarva pushed her console aside and stood up to
stretch.
    Anthony stood too, looking at the view screen he smiled "I
hope it doesn't come to that."
    "So do I, Sir"  Tarva returned the ironic grin.

-----------

    Janice had been relieved until they reached the first
system, she had eight hours to get some rest.  In her rooms she
found Whitecloud working on the painting of the eagle again.
    "How can you be working on something like that when we've
finally entered Borg territory?"  she asked.
    Whitecloud seemed to ignore her as she finished a tree line.
Anndrea was wearing a knee length white smock over the standard
tight black under uniform.  She put her brush in a glass of
water and stood up.
    Anndrea smiled at her friend "And why aren't you on the
bridge?"
    Janice was already sitting on the foot of her bed removing
her boots.  She laughed "I guess we all need some time off."
    "Or away," Anndrea added,  then got slightly serious "Your
going to want to get some sleep?"
    "Is that okay?" Janice knew it had to be but couldn't help
being courteous, especially to a ranking officer and friend.
She still hadn't figured out which came first in this forced
relationship.
    "We never should have let ourselves get on differing sleep
schedules."  Anndrea had grabbed her uniform off her bed and
turned to go into the head.
    "Thank you." Janice didn't actually plan to 'go to bed' just
turn down the lights and relax to some music.
    Janice took off her uniform jacket and laid down over the
covers on the bunk.  She looked around the rooms waiting for
Whitecloud to leave so she could turn down the lights.  Janice
looked at the pair of weapons hanging on the wall near
Whitecloud's paintings.  One was the Romulan disrupter she
carried when she'd visited the Delphi.  The other was the,
adjusted phaser that had been beamed to Whitecloud to get her
and Commander Tarva off of Star Base 89.
    Whitecloud came out of the head in full uniform.  "I'll be
in the training room, they may actually need us some time soon."
she smiled.
    "Someday, I suppose." Janice agreed with a laugh.
    Whitecloud turned off the lights as she left.

-----------

    When Janice returned to the bridge, they were just preparing
to drop out of warp for approach to the system.  The system was
a red one.  The star was small and dark.  There were five
planets and two asteroid belts.  Two of the planets appeared to
have atmospheres, the others were gas giants.
    "Sir, approaching first target planet." O'Malley reported.
    "Put it on the main screen." Tarva said and joined Anthony
who was already standing.
    The planet appeared to be brown and very hazy, as if it was
surrounded by a cloud.
    "What's that cloud?" Tarva asked before Captain Anthony
could.
    "Undetermined." O'Malley replied.
    "Sir," it was Lieutenant S'Erlet, the science officer who's
station was on the perimeter behind Tarva.
    "Go ahead." Anthony said to his often neglected Science
Officer.
    "Sir, it appears that the planet is surrounded by a large
amount of debris."  The Vulcan continued to watch his
instruments.
    "What kind of debris, and is it safe for us to take up a
standard orbit?"  Anthony asked.
    "I am not sure of the source of the debris but it appears to
be natural.  We should be safe in a high orbit."
    "Very good, helm take us to a high orbit."
    "Aye, Sir" the helmsman said and made some adjustments to
his controls.
    The Vigilante moved to a high pole to pole orbit.  With the
planet's rotation, they'd be able to do a cursory survey of the
whole planet relatively quickly.
    "Sir," S'Erlet spoke up after about ten minutes of study.
    "Go ahead." was Anthony's only reply.
    "It appears that the debris is made of dirt and rock from
the planet's surface.  The planet has no mineral deposits and
appears to have no layer of top soil.  In fact, I believe that
it is missing several kilometers of its surface thickness."
    "You mean that all of this debris is from the planet
itself?" Tarva asked.
    "Yes, Sir, But I can't make positive conclusions without
visiting the surface directly."  S'Erlet knew he was pushing a
bit with that request but he'd been allowing himself to be in
the background long enough.
    "What's the surface and atmosphere like?" Tarva asked.
    "Sir, there is a thin atmosphere and the surface is almost
all rock." S'Erlet was intrigued that they were taking his
suggestion of an away team seriously.
    Tarva hailed Golta in Drop Team Operations.
    "Golta here." came the gruff Kalonian reply.
    "Prepare an away team to escort Science Officer, Lieutenant
S'Erlet to the surface."  Tarva said casually.
    "Yes, Sir, Golta out."
    S'Erlet fed the necessary planet information to Operations,
then headed down there himself.
    "Helm, adjust orbit to a geo-syncronis orbit over Lieutenant
S'Erlet's chosen coordinates."  Anthony sat back in his chair
and waited.  Soon they'd have their first real look at the
planet.  Could this debris around the planet be, in some way,
related to the Borg?  Probably not, but they had to investigate
every clue.

-----------

    Four figures appeared on the barren rock of the planet.
Three wore dark gray, armored pressure suits the forth wore a
non-armored suit but was the same color and design of the
others.  The fourth also carried two cases of instruments and
immediately opened one.
    The three in armor had phasers in hand and spread out to
survey the area.  "Lieutenant Whitecloud to Vigilante".
    "This is Captain Anthony," Came the immediate reply "go
ahead."
    Whitecloud switched her phaser to her left hand then started
pushing some buttons on the control panels on the left arm.
"Initiating visuals."
    "Acknowledged" There was a pause as they adjusted their view
screen.  "Visuals coming in clear, thank you, Lieutenant."  The
bridge crew were now watching through the mission camera built
into her suit.
    The planet was mostly large smooth rock.  There was very
little dust let alone dirt.  With the thin atmosphere, there
would be no weathering to create the dirt.
    After S'Erlet broke out his equipment and the team started a
slow walking survey of the area.  They soon noticed that the
rocks weren't as smooth as they first appeared.  Many places
were deeply gouged some places even looked cut.  It was hard to
tell what could have done the cutting, but it appeared to have
only happened recently.  The rock formations were not
sedimentary rock, most appeared to be magma formed.
    During most of that day, and the next, the team was
transported all over the planet surveying and tacking samples.
Ten hours after the last survey, Lieutenant S'Erlet was ready to
present his findings.
    S'Erlet stood at the head of the Command Room, seated at the
table nearest him was Lieutenant Whitecloud.  Captain Anthony,
and Commanders Tarva, Norton and Dolittel awaited his report.
    Since Lieutenant Whitecloud had help S'Erlet collect and
sort the data she was there to help with the presentation.  She
pushed a few buttons and brought up a split screen of the
planet.  One side showed an approaching view of the planet in
its brown cloud, the other view showed a dramatic view of the
landscape under a dark brown sky.  The landscape was unique
since it was of totally smooth rock formations and balloon type
mountains.
    "The planet under observation appears to be quite unique."
S'Erlet began "It is composed totally of volcanic rock
formations.  The formations were all formed by cooling lava not
more then one thousand years ago.  Because of the thin
atmosphere, there has been negligible erosion of the rock.
Therefore, it still appears almost exactly as it did when it
first cooled.
    "There are, however, areas where the age of the rock tests
500 million years and older.  These areas are easily spotted
because they have either deep cut marks in them or are partly
covered by the newer more bulbous lava.  If it wasn't for the
extremely old lava formations and the atmosphere, I would have
placed the age of the planet at only about 1500 years."
    S'Erlet paused to allow scenes of the different formations
and types to be shown.  He then continued when a graphic
depiction of the total planetary terrain came up next to the
approach shot.
    "The Debris in orbit around the planet appears to be rock
and perhaps what could be called dirt from the planet.  I have
determined that the debris is from the planet due to its extreme
chemical similarities to the current surface.  With a sufficient
atmosphere, the current surface would eventually weather into
soil of the same make up of the debris in orbit.
    "It is my theory that the debris around the planet was
originally part of the planet's surface."  The graphic of the
current planet filled in, adding layers of dirt and other common
surface features.
    "The biggest detraction from this theory is that the
estimated total mass of the debris would not be sufficient to
cover the planet properly.  There is also only trace amounts of
metals and other minerals."
    Anthony spoke up "Lieutenant, if your contention is that the
debris around the planet is not sufficient to cover its surface
where do you propose it came from?"
    "Sir, it is my theory that the debris did come from the
planet.  I believe that it was forcibly removed and all usable
minerals and ore where taken.  In essence, the planet was
totally strip mined and the 'slag' was dumped into orbit.  This
process would probably also destroy the planets atmosphere."
    Dolittel spoke up "That's impossible, who would do such a
thing?"
    "Sir," S'Erlet returned "You forget where we're at."
    "But the Borg don't 'mine', they take what other cultures
have already created." Tarva said.
    "They don't mine now, but what did they do a thousand years
ago when this appears to have happened?" S'Erlet argued.  "Also,
the gouges in the older rock indicate that this was not caused
by a natural phenomenon."
    Captain Anthony stood up as S'Erlet sat down.  "Thank you
Lieutenant, is there anything else you'd like to mention before
we move on?"
    "Yes, Sir" S'Erlet said and pushed a few buttons on his
console.  The view screen changed to show another planet that
appeared to be surrounded by the same cloud of debris.  "This is
our first view of the other planet in this system that appears
to have some sort of atmosphere.  As you can see, it too suffers
from the same affliction as this one.  In all of the
Federation's explorations, there has never been another planet
showing the same phenomenon.  Now we have two."
    "Perhaps it is unique to this system." Anthony said.
    "Perhaps." S'Erlet agreed.
    The group discussed the possible history of both planets
then decided to visit the other planet and make a similar
survey.  It was hoped that similarities or differences between
the planets would confirm something, anything.

    The second planet showed even more signs of deep regular
cuts in the old magma.  It was finally decided to register this
under possible activity by the Borg or other advanced culture.
    The Vigilante then moved on to the other two systems in the
sector.  All three systems' planets showed the same signs of
total strip mining.  In all, they discovered ten planets that
had been destroyed in the same manner.  The other planets in the
systems were gas giants and thus were not approachable in this
manner.
    It was even decided that some of the planets may have had
extremely severe atmospheres.  The first thing the 'pillagers'
of these planets would have done was rip the atmospheres away,
it would have made things much easier.  The power needed to do
this was incomprehensible and had not until this point ever been
attributed to the Borg.

-----------
              ********
              And there was I, sore wounded and alone,
              I, the last living of my slaughtered Band.
              Oh sinister the sky, and cold as stone!
              In one red laugh of horror reeled the land.
              And dazed and desperate I faced their spears,
              And like a flame, out-leaped that naked knife,
              And like a serpent stung their bitter jeers:
              "Deny your god and we will give you life"
              *********

    Captain Anthony sat in the Command Room looking out the
window.  They had visited three systems and ten planets, now
what.  They had taken the opportunity to launch drop ships to do
the surveys more efficiently.  They had run more drills and the
drop teams were in constant training.  Still, they had nothing
new to go on, they knew no more about the current state of the
Borg then when they left the Federation.
    The next question was, where next?  He had several choices:
they could pick a random course and just go hunting.  They could
start a spiral exploration of adjoining sectors until they found
more stripped planets.  They could follow a trail of stripped
planets hoping it would lead to the Borg.  The only problem, was
that the trail could lead away from the Borg.  Also, all of the
planets in this area could be stripped, effectively making no
trail at all.
    Another suggestion was to follow the course the original
Borg cube was on when the Enterprise met it.  This led to
another problem, should they follow the cube where it was going
to, or coming from.  A wrong decision could waste a lot of time.
    "Robert," the voice came from the back of his mind.  "Follow
your instincts, they've never failed you."
    "But I've never had so little to go on." he thought back.
He opened his eyes, standing just outside the window was a woman
in a standard red command uniform.
    "Your closer than you think." she said in the back of his
mind.
    Anthony stood up and approached the window, he whispered
"This isn't the way we were suppose to be."
    "I know." she said.
    The woman faded and became his reflection as Anthony reached
out and touched the window.
    Anthony was startled by the piping sound from the bridge.
"Bridge to Captain Anthony."
    "Go ahead." he said to the window.
    "Sir, long range scanners show something moving across our
scan area."
    "Thank you, I'll be right there." Anthony stared back at his
reflection in the window for a second; then turned and exited to
the bridge.
    Captain Anthony walked out to see a graphic depiction of the
scanner display on the main view screen.  It was a semi-circle
grid with the flat side along the bottom of the view screen.
The center of the line indicted the Vigilante's current,
relative position.  Moving across the top of the screen were
three blips.
    "Report." he said as he took his seat.
    "Sir," O'Malley responded "We have three objects moving
across the limits of our scanners at high warp."
    "Can you tell anything about them?"
    "No, Sir, not at this range.  Current velocity, however, is
warp nine."
    "Thank you Ensign." Anthony said then turned to Tarva "Sound
yellow alert.  Have all hands prepare for battle stations and
silent running."
    He then turned back to Ensign O'Malley "Ensign, plot an
intercept course, I want to come in from behind.  First get us
behind them, then we can approach from the back."
    O'Malley worked for a few minutes then put a projected
course on the screen.  "Sir, at warp 9.2 we can get behind them
in about twenty minutes.  We could then approach them at a lower
velocity at our leisure."
    "Very good." Anthony smiled "Make it so."
    "Course laid in, Sir" O'Malley reported.
    "Engage."
    The Helmsman pushed a few buttons then reported "Warp 9.2"
the tactical display was replaced by the rushing stars illusion
of warp.
    Anthony turned back to Tarva "I want boarding teams ready to
explore the ships.  We'll start without the armor if possible,
we don't want to give away all of our secrets right off."
    He then turned to Norton "Have guards posted EVERYWHERE, if
these guys can board us I don't want them to have time to do any
damage."
    He then said to both Commanders "As of right now, nobody is
off duty."
    The bridge was suddenly full of activity as guards were
posted and non-regular stations were manned.  The guards seemed
unnecessary since the whole crew, even on the bridge were armed.
Two guards, however, were posted on either side of the view
screen.
    They all took time to check their weapons for full charges.
Every station through out the Vigilante had a phaser holder.
Some had boxes built into the consoles others had what looked
like holsters built into the sides of consoles and chairs.  The
crew kept the phasers with them at all times but placed them in
the holders for convenience while on duty.
    After ten minutes, Ensign O'Malley reported "Sir, I've
confirmed six, repeat six, Borg cubes traveling in formation.
Current velocity is exactly warp 9."
    The Vigilante dropped in behind the Borg ships keeping them
at about one quarter maximum sensor range.  The distance was
close enough to allow a rather good view at extreme
magnification.  The six ships flew in three pairs or two stacks
of three.  The precise symmetry made them look like three ships
on the long range scanners.
    "Analysis" Anthony said turning to Lieutenant S'Erlet for
the more precise sensor reports.
    "Sir, the ships have exactly the same measurements of the
ship that invaded the Federation."  He continued to adjust his
controls.  "They, however, have a greater mass.  Each ship, in
fact, has quite a different mass than the other."  he hit a few
buttons and the respective masses were superimposed over their
images on the screen.
    "How odd," Tarva said "that they would build seven ships of
exactly the same dimensions but make them very so in mass."
    "The mass on these ships is distributed quite unevenly, as
if it was added recently."  S'Erlet thought for a second then
added "Perhaps they are carrying cargo."
    Before anybody could respond, Ensign O'Malley spoke up "Sir,
I'm reading more ships behind us.  They've just come into
scanner range."
    "How many?" Tarva said very interested.
    "There's at least twelve and their gaining, but slowly."
O'Malley continued to watch her output.
    "Are they more Borg?" Anthony asked his frown betrayed his
concern.
    "Unknown at this time, Sir." O'Malley said "But at our
current velocity they should be in range to tell in about twenty
two hours."
    Anthony looked at his crew "Options."
    Tarva turned toward the Captain "We could wait for them to
get close enough for a better reading, or..." she hesitated.
    "Or what Commander?" Anthony asked knowing what she was
probably going to say.
    "Or, Sir, we could go back and take a look at them or just
stop and wait for them.  Either way, with them doing warp nine
plus, we would know in about 10 minutes."
    Anthony thought for a second, running his hand through what
little hair he still had on the top of his head, then said "Take
us down to warp four, but keep us out of their way.  We want
them to go past us no through us."
    The Vigilante swung wide to port then slowed down to warp
four.  Within minutes, O'Malley reported "Sir, I read fifteen
ships.  None of them appear to be of Borg design.  They are
traveling at Warp 9.01."  She continued to check her displays.
    S'Erlet then added "Sir, the ship designs do not match any
of those that the Federation has ever encountered."
    "They will be by us in about fifteen minutes" O'Malley
added.
    "Who are they?" Anthony asked to no one specifically.
    "They're us, Sir." Tarva said coldly.
    "Excuse me." Anthony looked at his first officer.
    "Sir, I believe that the six Borg ships have just
'assimilated' another civilization.  These fifteen ships have
taken pursuit, like any remnants of the Federation would have
done if the Borg had been successful at Sol-3."
    "That's why those Borg ships have extra mass, it does fit."
Anthony said.

    The fleet of alien ships was an impressive armada.  They
were obviously an assortment of different styles and classes.
The lead was a large triangular ship with a second smaller
triangle on top, an apparent bridge.  It made the Vigilante and
most of the other ships in the armada seem small.
    There were several other triangular style ships all much
smaller then the lead but obviously related classes.  The other
ships all had unique designs; some were long and sleek with
large batteries of weapons on them, others were boxy and clumsy
looking, apparently carriers of some sort.
    After they passed, the Vigilante took up behind them
matching speed.  Anthony figured that he should learn about
these people before going in for a close look at the Borg.
Besides, they were slowly gaining on the Borg and at the current
speeds, would be engaging them soon.
    "Sir," O'Malley said "I've found the transmissions from the
lead ship, and we have visuals."
    "Main screen." Tarva said leaning forward in interest.
    The main screen changed to what was apparently an older male
of a humanoid race.  He had long styled hair with full beard and
mustache.  His eyes were a bright red but otherwise his features
were strikingly human.  The man was wearing bright ornate robes
and jewelry.
    The sound was absent, at first, as the universal translator
learned the language.  The man appeared to be making a speech to
the rest of the armada...."so by the will of Lin'hrlar we will
triumph over these creatures spawned from depths of Zin'hrlar's
own madness.  I, the carrier of the heart of Lin'hrlar, will
lead you to the glorious retribution of our peoples."
    Others could be seen behind the speaker.  Some wore similar
ornate robes but not as splendid.  Most, however, wore more
practical uniforms.  All either carried side arms or swords.
    Anthony turned to Commander Norton "What is your analysis of
their strengths, do they have a chance?"
    Norton had been scanning the ships ahead of them "Sir, the
lead ship is highly armed and shielded.  The other ships have an
assortment of technologies.  Most of the technology is on a par
with current weapons in use by the Federation; including,
phasers, photon torpedoes and shield generation.  The larger
ships are carriers of probably small fighter craft.  These
fighters would account for why all of the ships have phaser
turrets that are good only for very close combat.  In fact, none
of the ships seem particularly suited for a prolonged ship to
ship battle."
    Norton paused as he analyzed more information from the
scanners "The lead ship appears to have very powerful phaser
cannons.  The cannons, however, would not be highly effective on
a small or moving target.  My guess is that they're meant for
long range bombardment."
    Tarva was standing, staring at the ships on the screen.
"What kind of propulsion systems do they use?"
    "They seem to use some sort of cross between fission and
anti-matter, probably based on compounds unique to their
systems.  Their actual drive system is similar to our warp but
slightly more efficient then the Federation's standard drives.
I think this accounts for their ability to maintain high warp.
It appears that they can maintain their current velocity
indefinitely, but can't do much beyond that."
    "So their efficiency curve goes right up to warp 9.01 then
drops pretty quickly after that, eh?"  Anthony had sat back in
his chair studying the ships in front of him.  "Now we have to
decide what we're going to do about them."
    Captain Anthony suddenly stood up "Lets discuss this some
place more suitable, Tarva, Simon in the Command Room.
Lieutenant S'Erlet, you have the bridge, let us know if anything
changes."
    "Aye, Sir."
    The three went into the command room to begin discussing
options on how to deal with their 'new friends'.

    "We don't have any choice." Tarva said.
    "How's that?"  Captain Anthony knew exactly what she meant
but he figured he let her voice it first.
    "We can not acknowledge ourselves to these people.  It is
directly against mission directives.  Their intentions are
clear, to attack the Borg.  If we reveal ourselves to them, we
reveal ourselves to the Borg.  Since there is no chance that
they will defeat the Borg, even with our help, then there is no
reason for us to interfere."
    The Captain sat back in his chair "I'm afraid I'd come to
the same conclusion.  It, however, haunts me to just sit back
and watch the remnants of an obviously rich and diverse
civilization be destroyed."
    Commander Norton agreed "It is obvious that we would be
unable to dissuade them from the attack.  They appear to be
driven by a strong religion.  I agree that we have no choice but
to remain observers to this conflict.  Perhaps we can use the
information we gain from the battle in future conflicts."
    Tarva suddenly looked up as if having a revelation "What
about survivors?"
    Anthony looked at her "What?"
    "There's going to be survivors, there's always survivors."
Tarva was living proof of that "Do we just ignore survivors?  If
we're just going to sit this battle out, we've got to do
something."
    "She's right, Sir.  We may be able to justify sitting this
out, but we must help any survivors."  Simon Norton seldom
seemed so passionate about anything.
    Anthony had to play devil's advocate to make sure they
thought of all proper precautions before bringing any of the
survivors aboard his ship.  "What will we do with a group of
aliens on this ship?  How will they react to us, will they
resent us for just sitting back and watching.  I know I would.
Will they cooperate with us when we try to achieve our goals.
If they never trust us, we'll have to keep them confined.
Remember how much trouble we had convincing Assali's men, even
after we convinced him, and we were all Star Fleet."
    Tarva and Norton looked at Anthony wondering what his
decision would be.  He finally said "We'll need security on hand
for everyone we bring aboard.  Treat them as unfriendlies,
that's the way they'll see us, and we must be prepared.  Have
force fields up when they're beamed aboard, we don't know what
their responses will be.  Keep them segregated and guarded, I
don't want them to be able to do any random damage.  At all
times, the safety and mission integrity of the Vigilante must be
maintained.  Is that clear?"
    They were going save some of these people, but probably
scare them to death doing so.
    "Sir, who do we rescue?  Do we take the masses off the ships
before they're destroyed?"  Tarva had to have some 'official'
guide lines set for the transporter operators.
    "We'll only take those people whom we can get without the
Borg noticing.  Escape pods only, and after the Borg have
departed.  We do not have room for the rescue of the whole
ships' crews.  Just those who would survive the battle itself
without us being here."  Anthony thought for a second then added
"If we can pull some of their small craft pilots just as their
ships are destroyed we'll do it.  None others, this battle would
be waged weather we were here or not.  These people have made
their own choice to die revenging their people, we can't deny
them that."
    The intercom opened from the bridge.  "Sir, this is
Lieutenant S'Erlet"
    "Go ahead." Anthony said immediately.
    "Sir, one of the ships has increased speed, it appears that
something is about to happen."  S'Erlet was extremely cautious
presenting his simple conclusion.
    "We'll be right out."  Tarva said and the three stood in
unison.

    When they got onto the bridge, it was apparent that the
largest of the 'carriers' had broken formation and pulled ahead
of the lead ship.  The ship had a large boxy body that looked
like it could almost hold the whole Vigilante.  Along the top
where the body slopped down toward the bridge area were thirteen
round hatches currently closed by spiraling doors.  There was
movement at the bottom of the ship.
    A large door had opened along the bottom with the opening
toward the back of the ship.  The door was centered in the ship
fore to aft and port to starboard.  It was three quarters the
width of the ship and a good quarter of the length.  The opening
created, was obviously protected by a force field since people
and equipment could be seen on the lower portion.  The center of
attention seemed to be an egg shaped craft about the size of a
large shuttle.
    The egg-shuttle soon lifted from its place and slipped free
of the carrier.  It immediately began breaking, and maneuvering
toward the triangular ship.  As soon as the shuttle was clear
the large door began closing and the carrier started maneuvering
to get back into formation.
    The course the shuttle was taking was extremely tricky.  It
apparently didn't have the ability to keep up at warp nine.  It
braked and maneuvered until it was directly in front of the
approaching lead ship.  The lead ship opened a door on its bow
just above the ports for its phaser cannons.  The shuttle
continued to break and adjust its course until the lead ship
swallowed it.

........
              **********
              Deny my God, yes, I could do it well;
              Yet if I did, what of my race, my name?
              How they would spit on me these dogs of hell!
              Spurn me and put me on the brand of shame.
              **********


    "Lord,"  The man had walked through the expansive, crowded
bridge of the Star Watcher then ridden up the lift to the Lord's
Dais.
    The man was Sir Utlin Robe'than second in command of the
carrier Star Controller.  Sir Utlin wore the black uniform of a
fighter pilot but the flowing red cape with high collar of High
Command.  Instead of a straight saber that was traditionally
worn by members of High Command, Sir Utlin carried a battle
blaster.  The large blaster hung comfortably in a similar size
black holster strapped securely to his left thigh.
    Sir Utlin stood out in all company, he had the slim, not
tall frame of High Command but was clean shaven with spiked
short hair of a warrior.  His light brown skin and bright blue
eyes betrayed his origins on Tregamalis, but, in this age of
enlightenment, that fact was ignored, usually.
    Sir Utlin stood with his head bowed and the scroll he was
carrying held tightly to his chest.  He stood next to, Lord
Lang'OA Dowe Fin Dragma, Lord Commander of the Lin'hrlar
Protectorate Fleet.  Lord Dowe finished the work he had before
him then turned to Sir Utlin.
    Sir Utlin could hear the Lord's robes rustle as he turned.
"Sir Utlin, Welcome back to the Star Watcher."
    Utlin snapped his hand down and looked up at Lord Dowe
"Thank you, my Lord." he said then held out the scroll and bowed
slightly from the hips "I bring you the 'Pledge of Following"
from Commander Travois of the Star Controller."
    The 'Pledge of Following' was an ancient custom among
Commanders when they were about to follow a Lord into what was
considered a hopeless, but Holy, battle.  Commander Travois was
always the last to issue his pledge, because he never considered
a battle hopeless.  The more 'hopeless' battles Commander
Travois survived, the later his pledges became.  The pledges
had, for some Lords, however, become more of a vote of
confidence then an oath of 'willingness to die'.
    This final remittance of the 'Oath' from Commander Travois,
was, in fact, a very ominous event.  It was an admission from
the most seasoned Commander of the Fleet that he truly expected
to die in the coming battle.
    Lord Dowe took hold of the pledge but didn't take it.  His
red eyes looked through his beard at Sir Utlin.  "It will not be
long now, Sir Utlin."  he said then took the scroll.
    Utlin stood up straight "Yes my Lord," he said formally "I
know."
    An aid working at a console next to Lord Dowe spoke up "My
Lord, we will be within range in ten par."
    "Very good, alert the fleet, start charging the guns." Lord
Dowe then turned to Sir Utlin "You'll want to get back to the
Star Controller before the battle begins." he said.
    "Yes, my Lord."
    Lord Dowe formally opened the scroll and read it, then
rolled it back up and placed it in a rack behind his throne.  It
joined 13 other scrolls.  "Dismissed."
    "Thank you, my Lord" Sir Utlin said then made a sharp
about-face causing his cape to fan about him then headed to the
lift.

..........

    Half an hour after the shuttle had entered the leader's
ship, S'Erlet reported "Sir, the carrier is opening its door
again."
    The Vigilante had taken up a position even with the plane
formed by the formation of the alien ships.  From this vantage
point they could monitor the entire fleet.  The giant door on
the carrier had begun to open again, only this time the opening
was toward the front of the ship rather than the rear.
    "Sir," S'Erlet said "I'm reading movement on the lead ship."
    The shuttle doors on the lead ship had also opened.  The egg
shaped shuttle suddenly exited at a high rate of speed.  It
immediately turned back toward the carrier.  The ship was
breaking severely causing it to approach the carrier extremely
quickly.  It landed in the opened bay almost recklessly.
Because of the size of the bay, it was obvious that the
precision flying was not needed this time around.
    "There's something else," Commander Norton said after
checking his scanners "All ships are starting to show large
power build ups.  The lead ship is apparently charging its
phaser cannons."
    "Can those things be effective at warp 9?" Lieutenant
S'Erlet asked.
    "They must know what they're doing." Tarva said then hit the
red alert button.
    Commanders Norton and Tarva began issuing instructions for
the transporter rooms to retrieve survivors.  Tarva then
reported to the Captain "There are drop teams ready for
deployment in the 'cavern'.  There are also guards standing by
in Transporter Room II. "
    Anthony turned to Commander Norton "Mr Norton, what's our
status?"
    "Sir," Norton replied immediately "Shields are at full
strength, cloaking is on line, all phasers are at full power and
all torpedo delivery systems are loaded."
    Tarva then hailed engineering "Commander Norton, report
status."
    There was a slight delay then Dolittel's voice came over the
intercom.  "Sir, engineering is sealed for battle.  All
personnel are on station.  Repair contingency and rescue teams
are stationed through out the ship."

    Commander Dolittel sat in the rough duty chair in his
command center between the two engine rooms.  Through windows to
his right and left he could see both anti-matter mixing
chambers.  The chambers pulsed casually, in unison, as if
nothing out of the ordinary was happing.
    Right now, the only access between the two rooms were the
doors into his office.  Dolittel could see his technicians at
station.  Most were strapped into rough duty chairs, others were
tying things up before getting into theirs.  There were also
armed guards standing in strategic locations in both rooms.
These guards had the most hazardous stations since evacuation
was designed to drop the rough duty chairs to safety.  The
guards would have to make a run for it if an evacuation was
called.

    "Prepare to drop out of warp on notice" Tarva said to the
helmsman.
    They then waited for the action to start.  The first out
ward sign was from the carrier.  The round doors on the top of
the ship spun open.  Similar doors on the other smaller carriers
also began to open.
    "I have numerous small power sources in all carriers."
S'Erlet said.
    As if to punctuate what S'Erlet just said, thirteen small
craft launched from the newly open doors.  There were apparently
two different types, one was a single seater, the other seemed
to be a two seater.  The single seater had a long tubular body
with warp style engines held out to the side like out riggers.
The two seater was rounded but wider with the pilots apparently
sitting side by side.

............

              **********
              Then, through the ringing terror and sheer hate
              Leaped there a vision to me- Oh, How far!
              A face, Her face...through all my stormy fate
              A joy, a strength, a glory and a star.
              **********

    Upon returning to the Star Controller, Sir Utlin was
confronted by the confusion caused from the impending
deployment.  The shuttle was immediately snatched up by giant
lifts and moved to its storage bay.
    Normally all activity would cease for the passage of a High
Commander, but in times of war these courtesies were suspended.
Sir Utlin always considered most courtesies to High Command a
hindrance anyway.
    Sir Utlin strode confidently across the bay barely aware
that the platform was moving beneath him.  Utlin's cape flared
behind him as he rounded the corner to the lift.
    An operator at the lift immediately came to attention and
saluted, right hand to the chest and a slight bow of the head.
"Sir," he said "Commander Travois wishes a conference with you
before your launch."
    Utlin returned the salute, but without the bow, and said
"Thank you, please take me to the Command Center."
    The open air lift had room for a dozen warriors but non rode
with Sir Utlin.  They sped up past the hangers of hundreds of
fighters.  The fighters hung by great hooks to be more easily
lifted into launch preparation areas.  The system allowed for
hundreds of fighters to be launched in minutes.

    Sir Utlin walked into the small office without being
announced.  If any other crew member, even Command, had done
this, Commander Travois would have their head.  Sir Utlin,
however, being second in command, always had direct access to
the Commander.
    Commander Travois Beu'lrmt Van'derla wore an ornate version
of the black warriors uniform that his first officer wore.  Over
the uniform he also wore a red cape but once again more ornate
and much longer.  Sir Utlin always considered capes that hung
lower than the knees to be impractical and too bulky.
    Commander Travois had long brown gray hair and full beard of
a proper High Commander.  He had light brown skin like Sir Utlin
but had bright red eyes like Lord Dowe.  Though none would admit
it, this one small difference would always relegate Sir Utlin to
Second in Command, and HE knew it.
    Commander Travois looked up as Sir Utlin entered the office.
"Welcome my friend." he said and stood to welcome him.
    Sir Utlin came to attention and saluted with a slight bow
and said "Commander, you wished to see me before I launched?"
    Commander Travois returned the salute with the bow, which
surprised Utlin "Yes, with the Pledge of Following I have
acknowledged to all that I believe this is a hopeless battle.
Many, however, believe that we can win because this is a Just
War."  the worry in Commander Travois' eyes was evident.  He sat
down heavily and leaned back.
    "My friend," Travois continued "These creatures have already
destroyed everything we ever held dear.  They've destroyed
hundreds of ships and killed millions of people.  Our kingdom is
dead.  Lord Dowe believes we can defeat them, I do not."
    Sir Utlin shifted from side to side not knowing why
Commander Travois was stating the obvious "Commander, is there
something more?"
    "I want you to promise me something, between friends and
warriors." Travois said and leaned forward a bit over his desk.
    Sir Utlin stiffened and said "Anything my Commander."
    Commander Travois withdrew the long straight sword from its
sheath on the side of his desk. "Promise me that you will fight
this coming fight as you never have."
    "That goes with out saying." Sir Utlin said almost insulted.
    "I'm not done." Travois said unannoyed by the interruption.
He then handed the sword to Utlin, hilt first "I also want you
to promise me that when the battle is lost, that you will not
allow yourself to die uselessly.  Someone must live to tell
others of our great peoples and of the these evil creatures."
    This was not an easy thing to ask, their people never walked
away from a battle.  They had a strong tradition of winning or
dyeing, that is what they were doing here.  They had lost, but
they still lived.  Tradition and honor dictated that they had no
other course of action.
    "Take this sword" Commander Travois said "It was given to me
by my father and he his.  Its been in my family since the time
when it was our only weapon, when we truly lived and died by the
sword.  It was a time of true warriors and honorable foes.  Take
it now, in honor of my son who stands now, controlled forever by
those creatures."
    Sir Utlin stood for a moment, looking at the sword being
offered.  If he accepted it, he accepted the charge.  He was not
sure if he could accept it, it went against all that he had
lived by, every code, every oath.  Was it right for him to put
them aside when all around him would not?  Never before had one
day seemed so far away and unreachable.
    Utlin saluted again and said "What you ask of me, my
Commander, is the most difficult mission I could ever face."
With that he reached out and grasped the sword firmly.
    "I could have chosen none better for my second, you have my
leave."  Commander Travois said.  He then stood, saluted Sir
Utlin and watched him leave, red robe flowing out behind him.

              **********
              Beneath the pines, where lonely campfires gleam,
              In seas forlorn, amid the deserts drear,
              How I gladdened to that face of dream!
              And never, never had it seemed so dear.
              **********
                        "The Soldier of Fortune"
                             Robert Service


            to be continued..............


-----------




                   T H E   V I G I L A N T E

                              IVB

                        "Ring of Spears"
                          (continued)



              Must I now forever and forever go from you?
              Ah, yes I must...for if I do this thing,
              How can I look into your face again?
              Knowing you think me more than half a king
              I with my craven heart, my honour slain.
              ..........
                        "The Soldier of Fortune"
                              Robert Sevice


    Soon all carriers were blossoming an assortment of small
fighters.  The Vigilante had to pull further back to stay out of
the way of the growing swarm of small ships.
    "Sir," S'Erlet said "Current count of fighters is 1,238 and
growing."
    The Borg were currently visible only on high magnification
and holding warp 9.  Suddenly the Leader's ship glowed blue
around its gun ports.  It released two large beams of blue
light.  The beams continued long after they had disappeared into
the distance.
    The Vigilante was watching the ship and the Borg on a split
screen.  The beams had merged to one by the time they hit dead
center on the middle, left Borg cube.  The cube suffered no
obvious major damage, but its lights seemed to dim slightly and
some sparks erupted from the impact area.  All six cubes,
however, immediately dropped out of warp.
    "I think they just pissed them off." O'Malley whispered to
herself.
    "I think your right, Ensign" The Captain responded from
behind her.
    At warp 9.01, the fleet had to almost immediately drop out
of warp to keep from running into the Borg.  The fighters and
other ships leaped forward attacking all six cubes.  The
leader's ship had dropped out of warp as soon as it had fired.
It now approached at impulse speeds.
    The carriers stayed just out of standard Borg range allowing
their fighters to do the work for them.  The five undamaged
cubes started taking immediate tolls on the fleet.
    Each cube projected multiple tractor beams holding the
larger ships at a safe distance while their shields absorbed
what weapons that could be released on them.  The Borg then
initiated their cutting beams, one ship at a time.
    The fighters headed through the Borg's shields and fired
indiscriminately on the cubes.  The Borg's reaction was
immediate, they started firing energy charges into the swarms of
fighters.  The charges took out several of the fighters at a
time.
    "Sir," Norton said "I've got a message coming from one of
the Borg cubes."
    "Put it on the screen." Anthony responded.
    The screen changed to a scene of a bearded humanoid with
several Borg adaptations.  Sections of the mans hair and beard
were shaved to make room for an appliance.  Tubes lead from his
shoulders over his head connecting to the appliance.  His eye
that wasn't covered was bright red, like the man's they saw in
the message earlier.

    The voice was mechanical and sounded like several were
talking at the same time.  "The fighters are irrelevant." It
said  "You will all be assimilated like the rest of your people.
Resistance is futile."

    "Have we gotten any of the pilots yet?" Anthony asked.
    "No, Sir" Norton said "The Borg defenses against the
fighters are too quick, and the ships aren't well shielded we
have no way of knowing who to track.  When they're hit, they
explode immediately"
    "Tell them to keep an eye open, there might still be
somebody we can grab." Anthony looked back at the image on the
screen continuing to tell all how irrelevant and futile the
whole situation was.  "And get that off the screen."
    The on going battle reappeared.  One of the large ships that
had moved in on the cubes was beginning to break up.  The cube
had several tractor beams on it and was splitting it down the
middle.  So far, they hadn't seen any escape pods launched from
any of the ships.
    Then a new strategy became apparent, the fighters after
getting through the shields were able to blast holes in the Borg
ships.  They then flew into the ships.  The cube this seemed to
work best on was the one hit by the long range blast.  But
several others also appeared to have been entered by fighters.

.............

    By the time Sir Utlin had made his way to the launch deck,
his wing and many others had already launched and were engaging
the enemy.  His personal fighter was a modified (of course)
X1-90 single pilot attack craft.  It had dual warp blasters
mounted on the sides where the standard phaser cannons should
be.  There was a standard phaser cannon in the nose, taking the
place of survey equipment.  The survey equipment was meant for
peace time missions and war time surveillance missions, neither
of which Sir Utlin was involved in anymore.
    The craft was also fitted with experimental life support
equipment.  The equipment was said to extend life support time
indefinitely, but he'd never needed it.  As Sir Utlin waited for
the fighter to be prepared for launch it occurred to him that he
had no place to go if he did survive the battle.  His life
support may last indefinitely, but he only had limited food and
very limited room to 'live' in.  These things shouldn't concern
him at this point though, his first mission was to fight
valiantly in the battle.  If, in the end, he found that he was
still alive, he'd worry then.
    When the ship was placed on the launch line in front of him,
Sir Utlin placed Commander Travois' sword in the standard, but
never used, scabbard behind the seat.  He folded his cape and
also placed it behind the seat.  He then took the helmet off the
seat and put it on.   After he lifted himself into the cockpit
he connected the helmet's wires to the navigation and fire
control computers and secured the belts.  The straps pressed him
firmly into the custom fitted seat.  The g-suit he wore under
his uniform inflated to prevent high-g black outs.
    The launch sequence was projected into the face shield of
the helmet.  "Sir Utlin," came  the Voice from flight control
"You are cleared for launch." as soon as the voice ended, the
seat seemed to wrap around him.  The launch tube rushed at him
then suddenly turned to stars, black and mayhem.

.............

    The Vigilante had parked over-head looking down on the
action.  The Borg ships remained in their formation but the
damaged cube seemed to stray a bit.
    "Sir, I believe the lead ship is about to fire on the Borg
again.  I read the same power build up as before." Norton
reported.
    Soon the ships that were maneuverable broke from the attack
and away from the line of fire.
    "Keep us away from them." Tarva said as some of the swift
fighters headed in their direction.
    "Have any of the fighters come out of the cubes yet?"
Anthony asked.
    "I haven't read any exiting fighters" S'Erlet reported.
    As soon as the path was cleared, except for the two ships
still held by tractor beams, the Leader's ship fired again.
This time, it targeted the cube that seemed to have taken the
most damage from the fighters.  There wasn't even distance
enough for the two beams to appear to fully become one.  The
cube glowed bright blue as the energy from the beam dispersed
around its shields.
    As soon as the ship ceased fire, the fighters swooped back
in on the Borg.  This time, however, the fired on cube broke
formation and went after the leader's ship.  Apparently, after
firing the weapon, the leader's ship wasn't able to maneuver
quickly.
    A good third of the fighters broke off from the remaining
five cubes and attacked the one going after their leader.  The
four remaining maneuverable cubes seemed to take this as a cue
and spread out.  They stopped using the grab and cut technique
and started firing more energy charges.  The fighters and ships
quickly succumbed to the new method.  Even the carriers that had
stayed in the background were now targeted.
    The large carrier that had released the shuttle took several
hits in the side.  It had continued releasing fighters and had
even collected some damaged ones on the giant bottom door.  Now
it rocked from internal explosions as the fighters inside
ignited from chain reactions.

............

    When Sir Utlin launched from the Star Controller he had a
difficult time not being hit by any of the fighters.  He could
hear the constant chatter of the fighters from his command.  All
semblance of order or controlled attacks had disappeared.  The
Borg dealt with them in a very efficient manner, just destroy
anything that comes near.
    Before he had a chance to approach any of the cubes, he
heard the Star Watcher's warning of 'fire in the tube'.  He
didn't hesitate in following the other fighters pulling away
from the enemy.
    He thought that he could hear the shot, using the Star
Watcher at point blank, in the middle of battle, like this, was
unheard of.  When he swung around back toward the Borg he
expected to see only five ships.  Instead, he saw all six, only
this time one had broken formation and was going after the Star
Watcher.
    The Star Controller tried to divert the Cube but only
sustained damage as it passed.  Sir Utlin could see the his ship
rocking from exploding fighters and fuel.  It wouldn't be long
before Commander Travois made good on the Pledge of Following.
Many of the other fighters headed toward the Cube to protect
their leader.  Sir Utlin knew it was fruitless, they should
concentrate on the damaged ship.  Perhaps they could at least
destroy one.
    Diverting his course toward the damaged Cube, the last he
saw of the Star Controller was it lining up for its destiny.
"Good by my friends." he said aloud and accelerated to his own
destiny.

............

    The great carrier lumbered toward the cube attacking the
leader's ship.  As it approached, they could see that no escape
pods were being ejected.  The immense carrier, the pride of its
fleet, was dwarfed by the single cube.
    When the carrier was attached to by the tractor beam, Norton
looked up and said "She's powering up her warp engines."
    Before anybody could react, the carrier jumped to warp and
collided with the Borg ship.  The explosion rocked the Cube
causing most of one side to cave in and open to space.  They
could see debris flying from the opening.  Almost immediately,
the hole slowly started closing in.
    The leader's ship had taken sustained damage and didn't have
the power to pull away from the Cube while it was regenerating.
While the hole was still open, the fighters took the opportunity
to enter the ship.  Several small surface explosions could be
seen from the damaged caused by the fighters on the inside.
This was the first time fighters on the inside were obviously
doing something.
    The number of maneuverable ships had been greatly reduced.
Only five seemed in relatively good repair.  The rest were
either disabled like the leader's ship, or destroyed.
    The four remaining undamaged cubes strung out across the
battle area.  They began meticulously destroying all ships in
their path.  It was as if they had had enough of this game and
it was time to clean up.
    The Borg ship involved in the collision was only about two
thirds finished with its repair to the hole when it locked back
onto the leader's ship.  This time the cutting beam took obvious
chunks out of the haul.  As these pieces were absorbed into the
superstructure of the cube, the hole closed up a little more.
    The Borg's advancing destruction of the leader's ship was
evident, but still no escape pods were jettisoned.  Suddenly,
the Borg let go of the ship and moved away from it.  Just as the
Cube got some distance, the ship self destructed.
    Within a few more minutes, one of the remaining ships made
another suicide run on a cube that had grabbed it.  This time,
however, the Borg were ready for it and the ship exploded
harmlessly against the cube.
    The remaining ships and fighters took the same tactics, as
the Borg got a hold of them, they would implement some sort of
suicide maneuver.  Though valiant, none were successful.  The
Borg had learned from the first ship to do it and were prepared.

............

              **********
              No! No! my mind's made up. I gaze above,
              Into that sky insensate as a stone;
              Not for my creed, my country, but my Love
              Will I stand up and meet my death alone.
              Then though it be to utter dark I sink,
              The God that dwells in me is not denied;
              "Best" triumphs over "Beast" -and so I think
              Humanity itself is glorified....
              **********


    Sir Utlin flew wide around the other Cubes.  Through his
radio he could hear the reactions to the destruction of the Star
Controller.  The destruction also seemed to push four of the
remaining Cubes into action.  They fanned out and started
destroying everything in their path.
    One of the things he heard his comrades doing was flying
into the Cube the Star Controller had just rammed.  This sounded
like a good idea.  With his extra fire power he may be able to
open a hole big enough to get into the damaged cube.
    On approach, his sensors read no shielding from the Cube.  A
few other fighters were flying around the ship virtually
ignored.  They seemed to be indiscriminately firing on the
superstructure.
    He switched to a general scrambled frequency "Attention,
this is Red Wing Commander, what wing are you?" the ship to ship
signals had very limited range to keep down the confusion.
    "Go ahead, Red Wing Commander, this is Blue Wing, or at
least what remains of it."  Blue Wing was from Star Fire, a
small but highly decorated carrier, it was one of the first
destroyed.
    "Do you have any strategic targets on these things?" he
asked as he swooped over the massive ship.
    "No sir, not really, we've just been hitting anything that
looks important." returned the young voice.
    "Have they returned fire?" Utlin asked making a high-g turn
and flying back.
    "No Sir, We think Lord Dowe's guns shorted them out pretty
good.  They must be ignoring us to fix the damage."  Sir Utlin
couldn't tell which of the ships was talking to him since all of
them continued their strafing runs.
    "Well" he said "I think it's time we pay them a closer
visit."  Utlin said as he lined up for his run.
    "Sir, a couple of us went in, but we haven't heard from them
and we can't seem to make that much damage anymore."  The voice
came back.
    "I think I'll give it a try."  Sir Utlin said and powered up
all of his weapons.
    "Sir, if you open it, we'll follow you in."  the boy sounded
confident, confident that he was about to die.
    The ships stopped their normal runs and started gravitating
toward his position.  When their flight patterns seemed to be in
sync with his, he started his run.
    This time, instead of coming in parallel for the normal
strafing, he went straight at the ship.  His right index
fingered started pumping the trigger for the warp blasters.  The
fighter bucked every timed he fired its blasters.  He poured
full power to the front shield and continued to fire.  The
surface of the Cube disintegrated under the blasters.
    His scanner showed a large open area inside the cube about
30 finlars from the surface.  Debris had started flying out of
the hole from depressurization.  He continued to pump the warp
blasters causing explosions deeper into the hole.  He then
turned the phaser cannon onto automatic pulse, maybe it would
held chop up some of the debris.
    Just as he approached the opening, his first instinct was to
back off the throttle to hopefully navigate to the interior.
Instead, he punched the throttle up full and was pressed into
his seat from the acceleration.  He was tempted to hit the warp
engines but knew that was instant death.  He continued to pump
his warp blasters but all he saw were explosions and debris
hurling at him.  He let go with a primal scream as he flew into
the destruction.
    The promise to stay alive was the furthest thing from his
mind.
              **********
              "And now, my butchers, I embrace my fate.
              "Come! let my heart's blood slake the thirsty sod.
              "Curst be the life you offer! Glut your hate!
              "Strike, Strike, you dogs! I'll not deny my God!"
              **********

............

    Finally, the six cubes reformed and warped away.  The one
cube that had been struck originally seemed unable to maintain
the perfect formation.  The six, however, continued back on
their original course.  This time they held a much slower pace,
warp 8.6.
    Just before they warped away, Norton said "Sir, I read an
explosion on the damaged Borg ship."
    "On the screen." Anthony said.
    Norton put the six ship formation on the screen then zeroed
in on an area of the one cube that wasn't holding perfectly in
the formation.  On its surface were a series of explosions that
appeared to be initiated from the interior.  Finally, just as
the cubes jumped to warp, a lone, single seat fighter emerged
from the hole.
    The fighter emerged into a sea of debris.  Suddenly alone,
left behind by the ship it came from.  It limped slowly through
the devastation surveying for survivors that weren't there.
    Tarva turned to Anthony "Sir, I believe we have our only
survivor."
    Captain Anthony turned to Commander Norton "What's your
analysis of that ship?"
    Norton was already studying his tactical scanners. "Sir, I
read one life form, apparently uninjured.  The ship no longer
has warp capability, but has life-support."
    "Open hailing frequencies." Anthony said.
    "Hailing frequencies open." Norton returned.
    Anthony stood and looked at the fighter on the screen as if
he were talking directly to it "Attention fighter, this is
Captain Anthony of the United Star Ship Vigilante, do you read
me."
    There was a short pause then a voice came back "This is Red
Wing Commander, please state your position, I do not read you on
my scanners.  They could, however, be damaged."
    Anthony smiled, this was a pretty cool cat.  "I did not
state our position, but I do offer you our assistance."
    There was another pause "Your a bit late to be offering
assistance."
    "Does that mean you do not desire our assistance?"
    The small ship did a few turns and loops, obviously looking
for the source of this conversation. "If your really around
here, I would definitely appreciate your assistance."  He didn't
sound too committed.
    Anthony smiled "Okay." he said "Now, here's where your going
to have to trust us."
    "I don't like the sound of that."
    "Don't worry," Anthony said "have I ever lied to you."
    There was some nervous laughter in reply.
    "Now, what we would like you to do is shut down all power to
your weapons and engines." Anthony said very carefully.
    "And then what?" he was almost flip.
    "And then wait."  Anthony said then added "I must warn you
that if you power anything up, we'll be forced to interpret that
as a sign of aggression."
    "Is that all?"
    "That is all, do we have a deal?"  Anthony was beginning to
like this guy.
    "I don't seem to have much of a choice.  Powering off now."
The man still didn't seem too convinced.
    Norton looked up "He's powered down all main systems."
    "Okay" Anthony said "Tell Shuttle Bay Two to lock on to the
fighter with the tractor beam.  Have transporter room two stand
by, if he powers up, pull him out and destroy the ship."
    "Aye, Sir." Norton said as he reach to his comm switch.
    Anthony then added "Also, have security meet us in Shuttle
bay two."
    Norton grinned slightly and said stiffly "Of course, Sir."
    "Commander Tarva, Your with me." Anthony turned toward the
lifts with Tarva a step behind.

...........

    What was going on, were the Borg back? Was he dead and
talking to Lin'hrlar himself.  Was he just space happy and
hallucinating?  It was too soon for that.
    It didn't matter, with his warp drives out of commission, he
had no where to go.  He had enough supplies for a month but what
good would that do him at sub-light speeds?
    He breathed deeply whispered a short prayer to himself then
started shutting down his systems.  What ever was going to
happen he hoped it would happen soon.  How long should he wait
to power back up before they wouldn't take it as an act of
aggression.
    What if they just wanted him to power down so they could
attack him.  Some sort of pirates waiting to salvage what little
debris was left of the fleet.
    Suddenly his ship jerked, he almost reached up to power on
thinking he was being attacked, but hesitated.  There were no
explosions, there were no lights he wasn't under attack. The
ship was moving on its own.  This wasn't possible, unless
something was pulling.  He started looking around maybe he could
see something.
    The stars in front of him started looking blurry.  Some
seemed to be getting close too quickly.  The stars shimmered and
disappeared revealing a large dark gray ship.  He was extremely
close, his reflexes caused him to jerk the joy-stick hard to
port to avoid a collision.  It  didn't work, of course, since he
wasn't under his own power.
    He appeared to be heading directly toward the back of the
ship.  Four large, flatten, cylindrical, engines, spread out
from the body, two above him and two below.  The engines glowed
soft blue down the sides.
    Ahead of him the four engines swept away from a large
bulbous body.  The ship was smooth and symmetrical, there were
no gun turrets, or ports.  It was no wonder they wanted him to
power down, a lone fighter could reek untold damage on this
ship.
    There were three doors in the very back of the ship two
smaller ones side by side over a much larger one.  The door on
the right started opening and his craft was being pulled toward
it.
    "Well," he said to himself "that looks like my destination."
    Where the door had been, was replaced by a shimmering blue
force field.  His ship glided smoothly through the field and
into a well lit bay.
    There were two other ships in the bay, both looked like some
sort of transport one had star drives, the other did not.
Standing to the side were some people in baggy black uniforms,
must be this ships security.
    A couple appeared to be like himself, sons Lin'hrlar the
others were some creatures unlike anything he'd ever seen.  His
ship came to rest directly in front of the reception committee.
He pushed the canopy open button but kept an eye on the group
the whole time.
    One of the group stood out, he was wide shouldered with
non-alien features.  He had long hair like a High Commander, but
he was clean shaven, like a warrior.  He stood in the middle
flanked on either side by both dark skinned creatures and few
other non-aliens.  One thing he noted was that they all carried
side arms.  Another thing very strange occurred to him, some of
these creatures were apparently females.  What strange creatures
these were to not only bring females with them, but arm them
too.
    They continued to wait for him to conclude any business he
needed to, very courteous.  He disconnected his helmet and stood
up, then stepped down on to the ships built in ladder.  When he
was half way down, he removed his helmet and placed it on the
seat, then reached behind the seat took out his cape.  By the
time he jumped to the deck the red cape was flowing out behind
him.
    A dark skinned non-alien approached him and handed him two
small devices.  From the way he motioned it appeared that one
was to be place in his ear, and the other around his neck with
the disk on the front of his throat.
    It could be a trap, something so they could control him.
Sir Utlin hesitated, waiting for some kind of explanation.  He
also rested one hand comfortably near his battle blaster.
    Finally the man with the long gray black hair stepped
forward holding a small device in his hand.
    "Well come aboard the U.S.S. Vigilante." he said through the
device in his hand.  It was some sort of translator.  "I am
Captain Anthony, I believe we've already spoken."
    Sir Utlin snapped to attention and saluted, including a
slight bow of his head "I am Sir Utlin Robe'than, First Officer
of the Carrier Star Controller, and Commander of Red Wing
Tactical Fighter Squadron.  I am in your debt for your
hospitality, Captain."
    The Captain though obviously unfamiliar with the salute,
immediately returned it.  He then said through the box in his
hand "It would make communication much easier if you could use
the devices you were given."  He then indicated the objects Sir
Utlin still held in his right hand.  "They'll allow the computer
to translate automatically"
    Sir Utlin considered the devises carefully, they seemed
harmless.  He started with the piece for the ear.
    "A lot better then this contraption." the Captain said
apparently in Sir Utlin's own language.  What a marvelous
device.
    He then strapped the other piece around his neck, it fit
like a piece of jewelry.  "What is this piece suppose to do?" he
said.  The rest in the room smiled as if they recognized the
question, but he heard it in his own language still.
    "That device translates for the rest of us.  By
inconveniencing you slightly, the rest of the crew will not have
to wear the translators while you are with us." the Captain
said.
    "Now for the rest of the introductions."  The Captain
continued.  He indicated the short dark skinned female creature
standing next to him.  "This is my first officer Commander
Tarva."
    Sir Utlin looked at the creature, she almost looked normal
but her forehead rolled slightly and her hair started at about
the top of her head.  She looked like she was a cross between
the Children of Lin'hrlar and some of the even uglier creatures
standing about.  He considered 'her' for a moment then decided
that since she had been indicated as second in command he would
treat her as he would wish to be treated aboard the Star
Controller.
    He gave her his stiff salute and slight bow, the same as
he'd given the Captain, "Commander Tarva".
    She comfortably returned both, but didn't say anything.
    "If I may inquire," the Captain said "by what name are you
used to being addressed?"
    They had given him simple names, obviously how they
addressed one another.  He'd given them his full title, his own
people would know the proper salute, these people did not.
Their translator changed the words for them but didn't indicated
customs.
    "I am officially addressed as 'Sir Utlin'" he said formally.
    "Very good, Sir Utlin"  The Captain said as another creature
came in.
    He looked almost normal but he was completely bald, had
pointed ears and a very slight green complexion.  As the man
approached Captain Anthony indicated him and said "Sir Utlin,
this is Commander Norton, he is in charge of security on the
Vigilante."
    "Commander Norton." Sir Utlin said and repeated his salute.
    Norton retuned the salute without hesitation.  Then turned
to the Captain "Sir, if I may."
    The Captain looked slightly unsure then said "Of course."
    Commander Norton turned back to Sir Utlin "Sir, I'm going to
have to ask you for your side arm, for the time being."
    Utlin hesitated for a second then decided that they really
didn't have to ask.  He pulled it from his holster and handed it
Commander Norton, who took the weapon bowed slightly then handed
it to one of the creatures standing nearby.
    "Now," the Captain said "If you'll come with us we have much
to discuss before we can get you settled in."
    "I believe we do." Sir Utlin agreed and followed the group
out of the hanger.
    As they left, he noticed that technicians were circling his
fighter with scanning devices but appeared to be keeping a
respectful distance.  If this was a sign of how he was going to
be treated, it might not be too bad.
    They entered a nearby room with a long table at on end and
rows of chairs facing it.  It was some kind of seminar or
meeting room.
    Sir Utlin was ushered to one of the chairs then Captain
Anthony, Tarva, and Norton also took seats.  Two of the ugly,
ridged, dark skinned creatures took guard positions on either
side of the door.
    "To get started, perhaps I should tell you who and what we
are.  Perhaps I can answer some of your obvious questions before
asked." The Captain said.
    "That sounds like a good way to start." Utlin agreed.
    Before Anthony could begin a piping sound came out of the
ceiling. "Bridge to Captain Anthony." came a female voice.
    "Anthony here, go ahead"
    "Sir, we have the Borg back in scanner range"
    "Very good, maintain distance."
    "Aye, Sir." returned the voice then the speaker obviously
turned off.
    Utlin looked slightly alarmed "The Borg have returned?"
    "No" Anthony said "We jumped to warp to follow them as soon
as you were in the bay."
    "I didn't feel the acceleration." Utlin returned.
    The Captain smiled proudly "You rarely do."
    Captain Anthony then proceeded to tell Sir Utlin about the
Federation and their encounter with the Borg.  He also told him
about the development of the Vigilante to spy on them and gather
information.  Then finally about their presence during the
battle.
    This infuriated Sir Utlin. "You mean that you sat back and
watched the remains of my people get destroyed by these evil
creatures and did nothing?  How could you, what kind of
creatures are you?"
    The battle seemed to weigh heavily on the crew of the
Vigilante.  These allegations obviously disturbed them.
    "What would you have had us do?" Anthony asked coldly.
    "You could have helped us, you obviously have some sort of
weapons." Sir Utlin insisted.
    "Yes, we have weapons, very similar to what your ships had.
Do you think that in the end, we could have made a difference?"
Anthony was speaking very carefully.
    "You could have done something, maybe helped destroy one of
those things."  Sir Utlin knew now why they had taken his
blaster, they must have predicted his anger.
    Anthony sat back, obviously disturbed by the events.  "You
don't know how much this decision weighs on me and my staff.
All of us have been personally affected by the Borg."  Anthony
shook from some kind of memories.  "But we have a duty to our
own people.  They are depending on us to return with information
that they may be able to use to defeat the Borg once and for
all.
    "If we were to valiantly engage in a hopeless battle, then
we would have betrayed the whole Federation.  They are depending
on us to do our best to return with the intelligence they need."
Anthony looked at Sir Utlin carefully, hoping to see some sort
of understanding.
    Utlin sat back and considered Captain Anthony's argument, he
tried to put himself in their place.  As a warrior, it was tough
to understand sitting out such a battle.  But perhaps, they had
a point, to put ones own civilization over another dying one.
It was what he was doing, not caring about the needs of their
civilization.
    "I suppose," Utlin said slowly "I can understand the reasons
that would cause you to stay out of our battle." he hesitated
then continued "I can also understand the pain and helplessness
you and your warriors must have felt doing so."  With that said
Sir Utlin suddenly felt a closeness to these people and the
inner conflicts they must endure.  He prayed that Lin'hrlar
would look after them.
    "With that cleared up," Commander Tarva said "We must make
some decisions."
    "Such as?" Sir Utlin tried his best not to talk down to this
female creature.
    Captain Anthony spoke up before Tarva could answer "Sir
Utlin, I must excuse myself, there are other duties that I must
attend to."
    "I fully understand, Captain" Sir Utlin said and stood as
Anthony did.
    "I leave you in the very capable hands of Commander Tarva, I
know she will be able to help you find a proper place among us."
With that Captain Anthony turned and exited.  At the same time
Commander Norton excused himself and took the guards with him.
    Sir Utlin soon found himself alone with the creature who was
second in command of this ship.  He was very uneasy with the
thought of a Female on a war ship but a female alien in charge
of one would take some real getting used to.  He looked at her
as she took her seat across from him.  She seemed short even
compared to her comrades, but very confident.  There had to be a
reason she was second in command.
    After he took his seat she spoke again "As I said, we have
some decisions to make.  First we'd like to have permission to
examine and repair your fighter.  When we finally reach our
destination, you may wish to have use of it."
    "You mean you haven't examined it yet?" Sir Utlin sounded
slightly surprised.
    Tarva smiled "We've done all we can without touching it,
they have strict instructions to respect your property."
    "I have some personal property I'd like to retrieve before
your technicians start working on it." Utlin decided to see how
far he could push it.
    "Very good.  Now about what we're going to do with you.  I
figure there are several options you could chose from if you
wish."  Tarva said remaining very business like.
    "I get to chose my fate?" Sir Utlin asked surprised.
    "Of course, we do not want you among us if it is not where
you want to be.  That brings us to your first option, we could
repair your craft and send you on your way."
    Sir Utlin frowned at this thought.  There was literally no
place for him to go.
    "Now if you wish we could take you to the Borg and let you
fight your own battle, this is I guess very similar to the first
option."  Tarva was mentioning these options knowing full well
Sir Utlin probably wouldn't seriously consider them.
    "Do you have any less drastic options for me." he asked
giving her lead to continue.
    "We do not take observers on the Vigilante." Tarva said
"Therefore, if you chose to remain, you will have to join the
crew.  Our crew is made of a diverse number of different peoples
from different cultures, if you chose to join us, you will have
to accept that.  You will have to accept our mission and our
goals.  We will, however, try to work with you to find for you a
position worthy of your skills and experience.  Does this sound
acceptable?"
    "Just like that?" he asked "How do you know you can trust
me, that I won't work for my own agenda?"
    Tarva leaned forward, Sir Utlin could see a fire in the
creatures eyes that sent a chill down his spine.  "We will not
stand for any part of this crew not being part of the team.
There is no room out here to deal with infractions in any but
the harshest of manners."
    Sir Utlin had to keep himself from swallowing hard, perhaps
he would be better on his own.  "What if, in the future, I wish
to leave the Vigilante?"
    "As long as your departure would not adversely effect our
mission, we could not prevent you from tendering your
resignation."  Tarva said simply.
    "Can I have some time to think about it?" Sir Utlin asked.
Perhaps if he had sometime to get a better feel for what these
people were all about.
    "Of course, but we don't know when the Borg will get to
where their going.  So you may not have time to become a proper
member of the crew by the next emergency."
    "I'll just have to risk it."
    "Until then," Tarva said "Lets get you set up in your
quarters.
    "Very good." Sir Utlin said and stood with Commander Tarva.
    When they walked out of the room, the two guards that had
been in the room with them were waiting just out side the door.
The first place they went was to the shuttle bay.  Sir Utlin's
fighter was flanked by several guards who came to attention as
they approached.  Several techs continued to walk around the
craft with hand scanners.
    Sir Utlin climbed up to the cockpit and removed a few
things; first was a long straight sword from behind the seat,
the other was a pack of apparently personal gear.  He then
approached Commander Tarva who was talking with a large bearded
man.  Sir Utlin wore the sword in the seldom used loop on his
belt and carried the bag as he approached.
    "Sir Utlin," Commander Tarva said "this is Commander
Dolittel, he is our Chief Engineer and will in charge of the
repairs of your craft."
    Before Sir Utlin could properly salute Commander Dolittel
held out his hand and said "Welcome aboard."
    Not knowing the proper response, Sir Utlin held his hand in
reply.  Commander Dolittel took hold of his hand with a firm
grip and shook it saying "I can't wait to take a look at that
fighter of yours, don't worry, we can get it flying better than
new."
    "I hope you can." Sir Utlin said not knowing how to respond
to this man.
    "Now if you'll excuse me, with your permission, we'd like to
get to work."  Dolittel said after letting go of Utlin's hand.
    "Thank you." was all Sir Utlin could think to say.
    As Dolittel walked away, Utlin could see him motioning to
technicians and heading toward the fighter.  He then looked at
Tarva questioningly.
    "I must apologize for the informality of our Chief Engineer,
he is not a great military man, but he is a gifted engineer."
Tarva said, then headed toward a door.  "Now, lets see if we can
find proper quarters for you."

   Sir Utlin was assigned what was called junior officer's
quarters.  It had two rooms with two bunks in one of them.
Tarva explained that there were no singles available, but this
was the next best thing, since he would not have a room mate.
    Commander Tarva then took the time to show him the different
features of the room, including the 'replicator' and 'head'.
She showed him how to access the computer verbally to get a list
of foods and other things available through the replicator.  He
wasn't sure how it worked but was intrigued with the technology.
    Commander Tarva then took him on a tour of the ship,
including the very small bridge.  It would have been difficult
for him to believe a ship of this size could be run effectively
from such a small place, but it seemed to be working just fine.
He was also shown a shuttle bay they called the 'cavern'.  She
seemed quite proud of its size, but it paled in comparison with
the Star Controller.
    She also showed him several rooms she called transporters.
He wasn't quite clear about their function, but was sure he
would find out.
    He finally decided that of the functions shown him, he was
best suited for security or something they called the drop
ships.  He would have to look into them more closely.  They did
make it clear, however, that within their normal mission
parameters their was no place for his fighter.  Though it had
powerful weapons, it lacked other technology vital to
maintaining mission integrity.
    Tarva had assured him that unless somebody specifically
challenged him, he had access to the ship, within reason of
course.  He decided to visit a place of gathering Commander
Tarva had pointed out, some sort of cafeteria.  Tarva had even
suggested visiting the place on his own, to get a 'feel for the
crew'.
    He had sat in the place a short time when two non-alien
looking females approached him.  One he recognized from the
bridge, she had been introduced as a navigator the other was
unfamiliar.
    He stood as they approached "May we join you?" asked the one
with darker skin and straight black hair.  He found both
extremely attractive.
    "Of course," he looked at the red headed female "Ensign
O'Malley wasn't it?  But I don't believe we've been introduced."
he said to the other.
    She smiled "I'm Lieutenant Whitecloud, but you can call me
Anndrea." she held out her hand in the same way the engineer
had.
    This time he knew the gesture and gripped her hand and
shook.  The woman had an amazingly strong grip.
    Ensign O'Malley offered her hand and said "And please, off
duty, I'm Janice."
    As they sat down with him he decided that since they had
offered their personal names, it would be proper to offer his
too. "You may call me Ra'than" he said.
    He chatted with the two women quite a while and soon
discovered that they were roommates.  He was able to get a lot
of social information from them.  They told him about the
different species on the Vigilante.  They warned him about the
tension between the Klingons and the Kalonians, he promised he'd
watch what he said around them.  It didn't take long to realize
just what a diverse group this was and that he might actually
fit in.
    Soon they both had to excuse themselves, Ensign O'Malley had
to report for duty and Lieutenant Whitecloud had an appointment
in the Drop Team Training Room.
    "Would you like to join me?" Whitecloud asked as she stood
up.
    "What sort of training is being conducted at this time?" he
asked as they walked away from the table.
    "It's practice in hand to hand combat.  It may not be very
useful against the Borg, but it is still good for the mind and
body."  Whitecloud said.
    "And what are your duties, medical?"  They had discussed
many things but Lieutenant Whitecloud's position had never come
up.
    Whitecloud laughed, "Not exactly, I'll be leading the
exercises."
    They stopped in front of some crew quarters and Whitecloud
walked in.  Sir Utlin stayed outside.
    "Won't you come in," Whitecloud said "I've got to change
into my work-out clothes."
    Utlin hesitated for a second then stepped in.  He was just
in time to see Whitecloud disappear into the head with a bundle
of clothes.  The room had the first decorations he'd seen on the
ship.  Several paintings hung on one wall; one was of some
primitive people who looked vaguely like Whitecloud, the other
was of some kind of bird but it didn't look finished.
    "Do you like them?" Whitecloud said from right behind him.
    It surprised him because, as a bloodied warrior, he always
prided himself on being aware of what was going on around him.
"They are very intriguing." he finally said.
    "I apologize for the Eagle, I haven't had time to work on it
lately."  Whitecloud said.  She had changed into loose white
clothes that appeared to be made of the same material as the
uniforms.  "Shall we go?"
    "Yes, of course."
    As they walked down the hall Sir Utlin said still sounding
confused  "So your job is training the warriors?"
    "That's one of the duties I've taken on, but my official
designation is second in Command of the Drop Forces."
Whitecloud said trying not to brag.
    "I thought these Drop Forces were suppose to be elite
warriors, and a Female is second in command?" Sir Utlin said
finally unable to contain his shock.
    Whitecloud stopped and looked at Sir Utlin curiously "Is
there something about females in your culture you have failed to
mentioned?"
    Sir Utlin stiffened a bit "In my 'culture', we recognized
that there are certain roles for the males and females.  War was
not a role for females, neither was commanding warriors."
    Whitecloud looked at him and said "That's to bad, you
probably missed out on a lot of great talent by pre-defining the
roles of your society."  She then continued down the hall.  Sir
Utlin followed, his red cape flowing out behind him.
    When they approached the training room Whitecloud turned to
Sir Utlin.  "Would you like to join us for the workout?"
    "I don't think I am dressed properly." he said hoping to get
out of it.
    "Don't worry, we have changing facilities here."
    "ah....Great."

    The room was filled with an assortment creatures from the
Vigilante.  All were dressed in the similar white robes and were
extremely respectful of Sir Utlin and Lieutenant Whitecloud.  He
joined them for a grueling work out and then stood in for a
punching bag during the combat training.
    After an hour of humiliation at the hands these creatures he
finally admitted to himself that they were all skilled warriors
but protested "But this is a style of combat I have not been
trained in."
    Whitecloud looked at the him while the team fell silent, she
had barely broken a sweat.  "I heard that you carried a sword
with you." she said "Perhaps you have some proficiency with it?"
    "I've at least used one before." now he had her, though he
never had use for one in battle, he was recognized as one of the
best duelers in the fleet.
    Whitecloud turned and spoke to one of the Klingon creatures
who went to retrieve something from the supply room.  He
returned with two black poles with white handles, just longer
than an arm.  Whitecloud handed one to Sir Utlin, thick end
first.
    "These are a little contribution from the Klingon training
techniques.  The Federation doesn't have a tradition of using
'blades', however, the Klingon's do.  I felt that the
coordination developed through training with swords would help
in other areas of combat.  These devises are modified to be
harmless but deliver a slight electric shock on contact.  The
shock, however, does increase slightly with the force of impact.
Sir Utlin, are you game?"
    "Who shall be my opponent?"  Sir Utlin asked curiously.
    "Why me, of course."  Whitecloud returned.
    Sir Utlin almost declined he had never fought a woman before
and it didn't matter that she was second in command of such fine
warriors.  Finally, he decided that this was his new peer group
and it was time to become one of them.  "How do you turn it on?"
    Whitecloud turned hers on and took a casual on-guard stance.
The rest of the room gathered around and started cheering for
both.
    Sir Utlin took his standard stance which differed
considerably from hers.  He didn't know who should move first
but was answered by a sharp pain in his arm.  While he was
debating with himself, Whitecloud stepped forward, tapped his
arm and returned to her position.
    "Come on, wake up." she chided.
    The ensuing duel pitted the battle scarred veteran of
countless wars, Sir Utlin, against the merciless, Special Forces
warrior, Lieutenant Whitecloud.  When Whitecloud closed her
attacks Utlin could see the coldness in her eyes.  When he
gained the advantage, she never faltered she pushed a new
strategy.  He found that she could take and receive pain without
hesitation.
    At one point, they stood exchanging blows to the side, one
would take a full hit to the side then deliver one.  Pain surged
through him from the electric shock and the weight of the
weapon.  It was a test of endurance neither one would back down
from.  Sir Utlin didn't remember who broke the routine, but was
glad when it ended.
    Over an hour after they began, they knelt facing each other,
totally out of breath.  Sir Utlin could taste the blood drip
from his broken nose and pain surged from his throbbing side.
Whitecloud looked back at him with a wide smile, two different
shades of blood stained her workout clothes and a large welt had
started to rise on her cheek.  The room had filled with
spectators who watched in total silence.
    Sir Utlin surveyed the crowd, in the front of one group was
Commander Tarva standing in her formal at-ease position.  Seeing
the Commander, Sir Utlin struggled to his feet and faced her.
    "Have you made your decision yet?" Tarva asked.
    "Yes, Commander," Sir Utlin looked around "If they'll have
me."
    Tarva looked to Whitecloud who said "Welcome aboard." and
offered her hand.
    Sir Utlin grasped and shook it, then stepped back and gave
his own traditional salute.
    "Very good." Tarva said "Now we'll have to confer with
Lieutenant Golta and the Captain to assign a field commission
and position in the team.  Until then, Lieutenant Whitecloud
will issue, and train you on the equipment you'll be using."
    "Thank you Commander." Sir Utlin said.
    Tarva nodded then walked across the mat toward the door.
The crowd parted more then sufficiently to let her through
without slowing down.

    Sir Utlin sat stripped to the waist in an examination room
in the medical section.  Lieutenant Whitecloud was in an
adjoining room, probably getting the same treatment.  A large
bruise had formed on his right side from just under his arm to
just above his thighs.  There were a number of other bruises and
cuts over his body.
    "What the hell were you doing sparring with Lieutenant
Whitecloud?" The medic asked as he started to work.
    Sir Utlin looked at the man, he looked like a seasoned
warrior, what was he doing working as a medic.  "Is there a
problem?"
    The man ran a scanner done the bruised side "It's just that
most people know better than to fight with the Lieutenant."
    "Why is that?"
    The man quieted down a bit and said "I worked on the ship
that she was first assigned to, after she left Special Forces.
She kept us very busy, most incidents, however, were never
reported.  The guys she fought with were mostly too embarrassed
that such an attractive woman had bettered them in a fight.  It
was lucky for her, she would have been thrown out a lot sooner
than she was."
    "What kind of incidents?" Sir Utlin normally didn't care for
any kind gossip but he found Lieutenant Whitecloud extremely
intriguing.
    The man ran some kind of bone knitter over the broken ribs.
"It's just that she likes to hurt people.  Well I guess it's
better than killing them like she used to."
    Sir Utlin looked at the man unbelieving.
    "Its true, one of the reasons she had to leave Special
Forces was that the underworld had a price on her head.  She
couldn't be effective as an undercover agent with her face
plastered all over the place."  The medic then turned to mending
the broken nose.
    "She had a price on her head? How did that happen?"
    "It's rumored that when she was undercover, she would sooner
kill someone than fight with 'em.  You kill enough of a crime
lords best people, he gets annoyed."
    "The more I hear about the Lieutenant the more I like her."
Utlin said with a smile.
    "Well I'm glad to hear that, but if your going to keep
training with her, we'll be seeing you again."  The medic said
as he started working on the large bruise.

-----------

    Lieutenant Utlin stood in the back of the drop ship, his
back against the stern bulk head.  The troop door lay open next
to him.  He held the phaser pointed to the roof and waited.  He
listened for the  go signal from the receiver in his ear.  The
darkness around him was complete but the goggles he wore gave
everything an eerie off color glow.  The sound of phaser blasts
told him the action was approaching his position.
    Utlin thought back on the past weeks; the Vigilante kept up
its relentless warp nine pursuit of the Borg; and he learned.
He learned to speak Federation 'Standard', he learned to work
with all of the creatures on this ship, and he learned his new
job.
    They were troubled by where to place him in the Drop Team
structure.  At first they thought he would actually be best
suited for Drop Ship pilot, but he was a fighter, not just a
pilot.  He best fit in with the ground troops, the real front
line warriors.
    His field commission was a tricky thing, he was obviously an
experienced warrior and leader.  They felt like he deserved to
be highly placed.  There were, however, many on the teams who
had worked hard for their positions.  It would be difficult to
suddenly have them answering to someone who, until just weeks
ago, hadn't ever heard of Star Fleet or The United Federation of
Planets.
    They gave him the rank of lieutenant(junior grade).  At
first he thought it was much below his naturally born position,
but birth-right seemed to hold little importance to these
creatures.  He would have to earn further promotions and
importance.  This couldn't be too difficult in an organization
that allowed so many females to rise to such importance.
    He heard the signal as the team approached the ship, it was
time to give cover so they could get to safety.  He leaned out
low, looking for his comrades. They were coming in from the
right, phaser blasts following them.  He stepped out and fired
at the sources of the blasts.  When the last of the team was
aboard, he turned and followed him them in.  A sharp pain
exploded in his left arm and side causing him to drop the phaser
and throwing him across the ship.
    When he came to, one of the Klingon creatures was looking
down at him.  "You'll do better next time,..Sir." it said
gruffly.
    These live fire exercises must have been Whitecloud's idea.

-----------

    Four weeks after beginning their pursuit, Tarva was awakened
by the yellow alert.  She heard Lieutenant S'Erlet saying
"Command to the Bridge."
    When Tarva got to the bridge Captain Anthony was just
arriving on the other lift.  Commander Norton was already in his
chair and S'Erlet was busy at his station.  Ensign O'Malley sat
staring at the image on the screen.
    It was a single Borg cube, obviously at an extreme distance,
but it was just one cube.  It was also obvious that they had
dropped out of warp.
    Tarva looked at the cube "What happened to the other five?"
    Ensign O'Malley turned and looked back at Commander Norton.
O'Malley had gone ghost white.
    The Captain looked at Norton, "Well, what happened to the
other five?"
    Norton looked up at Captain Anthony "Sir, all six Borg ships
entered this one."

              **********
              I saw the spears that seemed a-leap to slay,
              All quiver earthward at the headman's nod;
              And in a daze of dream I heard him say:
              "Go, set him free who serves so well his God!"
                        "The Soldier of Fortune"
                            Robert W. Service
              **********

                                  to be continued............


-------



                   T H E   V I G I L A N T E

                               VA

                           "Outpost"


Since all that is was ever bound to be;
Since grim eternal laws our Being bind;
And both the riddle and the answer find,
And both the carnage and the calm decree;
Since plain within the Book of Destiny
Is written all the journey of mankind
Inexorably to the end; since blind
And Mortal puppets playing parts are we:
......
              "Faith"
         Robert W. Service





    Captain Anthony looked at the Borg Cube on the screen, it
looked like all the others.  Scanners, however, indicated that
this one was bigger, much bigger.
    "What do we have?" Tarva asked.
    "It appears to be a Borg space station." S'Erlet
volunteered.
    "Perhaps, it's their home." O'Malley suggested
optimistically.
    "What's your Analysis." Captain Anthony said to the bridge
crew.
    "Sir, I estimate that this cube is 2 million times the
volume of a standard Borg ship." S'Erlet reported.
    Captain Anthony whistled in appreciation of the size.  "What
kind of scans are they emitting, is there any sign they may be
able to see us?"
    "Negative, Sir." Commander Norton said "They are emitting
standard Borg signals."
    "Okay, keep a close watch on all activity, I don't want one
of those cubes running into us."
    "Aye, Sir." O'Malley and S'Erlet said in unison.
    Anthony then turned back to Commander Norton "Let's go to
complete battle stations, repost all guards, and have away teams
ready to scramble from transporters and drop ships.  I want
primary teams, again, to be prepared with out the armor, lets
keep our technology a secret as long as possible."
    Norton stood saying "Aye, Sir." then exited the bridge.
    Anthony looked at Tarva "What do you think?" then back at
the cube on the screen.
    "We're going in, aren't we?" Tarva said with a half smile.
    "That's what we've been training to do." Anthony responded
then sat down in his chair.  He leaned back and clasped his
hands across his chest.
    Tarva sat on the edge of her chair, turned to look at the
Captain.  "When?"
    The Captain looked at his First Officer "I know, we have to
study it, get an idea what it really is and so on, but we'll go
in, ......we will go in."
    "Just try not rushing it, sir." Tarva said quietly "We've
got time."
    Anthony looked up at his navigator "Ensign O'Malley, set a
course to take a closer look, standard orbit."
    "Aye, sir" O'Malley responded "Plotted and laid in."
    "Engage." Anthony said.
    "Aye, Sir." the Helmsman returned.
    The Vigilante headed toward the Borg cube.  They quickly
started backing off the magnification to keep it on the screen.
Once they were close enough to get a good look without
magnification, they cut the impulse engines and went solely with
maneuvering thrusters.  It was the same kind of technique they
used for orbiting a star base.
    "Sir," S'Erlet said "Every indication from the object is
that it is not a ship.  It appears to have stabilizers only,
there is no means of propulsion evident."
    "What about the sub-space 'Borg Link' that the Enterprise
logged, what kind of patterns are there?" Anthony asked.
    "I've started the analysis but it will take some time before
any conclusions can be made." S'Erlet said.
    "Very good, but I want you to take any technicians you need
to complete the analysis quickly." Anthony said.
    "Sir," S'Erlet looked up from his console "I may be able to
do a more complete analysis with facilities in engineering."
    "Dismissed." Anthony then turned to Tarva "Commander I'd
like you to be in charge of mapping the cube.  We need to know
where the entrances are and other vital areas.
    "Aye, Sir" Tarva said "I'll get right on it."  She then
started contacting the survey specialists from the Drop Teams.

-----------

    Lieutenant Utlin stood in his armor looking out over the
'Cavern' below him.  It didn't come near the majesty of The Star
Controller but from this distance it did seem quite far down.
    "When ever your ready, Lieutenant." came Whitecloud's voice
over the intercom.
    He only had to do one thing, and that was step off the
platform.  If the suit worked, it would automatically fire its
rockets and lower him safely to the ground.  If it didn't work,
and he was lucky, he wouldn't spend too much time with the
medics this afternoon.  He was used to being in control, if the
rockets were suppose to fire, he wanted to fire them.  A
computer deciding to turn something on didn't sit well with him,
he wanted the control.
    "Trust the technology." he whispered to himself and stepped
of the ledge.
    He could immediately feel the suit vibrate slightly and stop
his decent.  He soon landed gently on the deck.  The suits
weren't made for flying about in a gravity situation but would
safely lower the occupant.  In zero gravity, however, they told
him, that they did have maneuverability.
    Utlin looked about, the team he was training with waited for
him.  Since Commander Dolittel retrieved the flight recorders
and cameras from the fighter they held him in much higher esteem
as a warrior.  They did, however, find it amusing that he seemed
scared of heights.  It wasn't that he was afraid of heights, he
just didn't trust alien technology.  Put him in his fighter, and
they'd see fearlessness.
    Lieutenant Whitecloud met Utlin in the suit room.  "We've
found a Borg outpost."
    "What?" Lieutenant Utlin had just gotten into his uniform.
He had switched to ship's standard, it was only proper.  They
did tell him that for formal occasions Star Fleet allowed
traditional, cultural dress.  There, however, would be very few
formal gatherings on the Vigilante in the near future.
    "The Borg ships all entered a much larger Borg Cube which
appears to be stationary."  Whitecloud said in obvious
excitement.
    "Is there some way we can get a look at it?" Utlin said in
total fascination.
    "Of course." Whitecloud said "It's on the view screen in the
meeting room right now."
    The meeting room was crowed with drop team personnel.  The
Borg cube was prominently on the screen.  When they walked in
Whitecloud spoke up.  "Okay, the Captain has ordered us to
prepare for deployment."
    There was a resounding cheer from the gathering.
"Lieutenant Golta has ordered that teams five and six remain on
call and suited.  Teams one and two are to be prepared in class
1 mission uniforms.  That's why you are here, five and six are
already on station in Shuttle bay three waiting for orders to
board and deploy.  We are to suit for deployment and await here
for orders."
    As second in command of drop teams, it was Whitecloud's
honor to lead the most likely team for deployment.  Lieutenant
Utlin had been assigned to Whitecloud's team until his training
was complete.

    Class one mission uniforms were the standard ship uniform
with gear added.  The teams sat in the rough duty chairs in the
meeting room.  There were 32 in all, two teams of 16.
    Each wore their standard uniform with a black 'mission'
helmet added.  The helmets included face shields with tactical
'heads up' displays and built-in communicators.  The extra
equipment included, technical gear for mapping and surveying.
Half carried analytical tricorders, the others carried 'extra'
fire power.  All carried their new larger phasers.  These
phasers reminded Lieutenant Utlin of his own battle blaster,
which now hung like a trophy in his quarters.
    As soon as the Captain wanted to see if the Borg reacted to
them, he'd send this group in.  He wouldn't use the suited
warriors unless he had to, he wanted to guard the technology of
the suits as long as possible.

    After five hours the Captain ordered a stand-down and the
drop teams off full readiness.

-----------

    After stand down, Lieutenant Utlin went down to the shuttle
bay to inspect his fighter.  A week after he had arrived, he was
summoned to a meeting with Commander Dolittel and the Captain.
    They met in the shuttle bay to discuss the future of the
fighter.  At the time, it lay in pieces around the bay.  Its
stripped frame was barely recognizable.  Commander Dolittel
stood over one of the star drives conducting some form of tests.
    Dolittel looked up as Utlin approached "Hello, Lieutenant."
he said pleasantly "How are you to day."
    "Commander, what have you done to my fighter?" Utlin said in
shock.
    "The technology used in your fighter is unfamiliar."
Dolittel said "My technicians were unable to make sufficient
progress on the repairs, so I've been forced to do the job
personally."
    Utlin couldn't say a word, he did not believe that the
damage to the ship had been this severe.
    Dolittel continued to talk as he worked "I've spent every
spare minute I've had since your arrival to learn your systems."
He looked at the mess around him "To do that, I've had to do a
little dissecting, but don't worry, everything I've taken apart
has been meticulously documented."
    Dolittel looked over Utlin's shoulders "Ah, here's the
Captain now."
    Utlin instinctively came to stiff attention and had to force
himself not to give his traditional salute, those days were
over. "Captain, Sir" he said in greeting.
    Anthony looked at the debris scattered through out the bay
"I hope you'll have this cleaned up before we need this bay
again."  he said with a smile.
    "Yes, Sir." Dolittel answered.
    "What's the status with the fighter?" Anthony said as he
started a walk around.
    "Sir, I've just finished repairs on the warp drives, and am
currently running systems checks.  By combining our two
technologies, this ship should be able to maintain warp 9 for an
extended period of time.  The ship seems to have been
retro-fitted with some extremely powerful blasters that
integrate warp technology."
    Anthony looked at Utlin, apparently for an explanation.
    Utlin smiled proudly "A friend of mine designed them based
on the technology used by Lord Dowe's cannons."
    "They will make an excellent thesis for my next submission
to Star Fleet Research and Development." Dolittel said with a
smile then said  "This ship, however, must have bucked like a
son of bee every time you fired the things."
    Utlin wasn't sure of the exact reference but understood the
meaning "That is why they weren't considered for standard
equipment.  If I wasn't securely strapped in, I'd be thrown
against the canopy every time I used them.  They also tended to
knock the ship off course."
    Dolittel smiled "With your's and the Captain's permission I
can fix that.  A simple inertial dampening field should do the
trick.  I can tie it directly to the firing mechanism so there
won't be any lag.  You'll only feel a slight vibration when you
fire. "
    Utlin looked at the Captain for his reaction "Do what ever
you wish, as long as your other duties are not neglected.  Just
remember, that unless Lieutenant Utlin relinquishes owner ship
claims to the ship, only use standard Star Fleet technology."
The Captain then dismissed himself.
    "What does that mean?" Utlin asked.
    Dolittel looked at the debris around them "That means that I
can upgrade your phaser, your shields and other systems using
commonly available technology.  If you want me to cover the ship
with the same composite material used for the Vigilante's hull
and include cloaking, you'd have to agree to the fighter
becoming a permanent part of the Vigilante's resources."
    "And if I don't?"
    "Then I'll fix it up, close it up and pack it away until we
get back to the Federation."

    It had been a tough decision, if he had given it up, they
would have assigned it to him, but it wouldn't have been his.
If he kept it, he wouldn't be able to fly it again until they
finished their mission and returned to the Federation.
Everybody on board knew that they may never return.  Now as he
stood looking at the ship he was glad he made the decision he
had.
    The fighter stood in the middle of the bay looking better
than it had the day it was delivered.  The paint was bright
white, all of the old patches were gone, replaced by new metal.
The red stripe down the nose was bright and crisp like it was
when he had painted it after arrival on the Star Controller.  It
was a fighter to be proud of.
    Lieutenant Utlin watched as hoists were fitted to the ship
and it was hauled away to storage.  It seemed as though the
final page on that chapter in his life was finally being turned.

He knew though, that if they survived, he would once again have
the freedom it offered.


-----------

    The complete command team sat in the Command Room off the
bridge.  Golta and Kartang sat at opposite ends of the table
with  Captain Anthony, Commander Norton, Commander Dolittel and
Lieutenant S'Erlet between them.  Commander Tarva stood at the
head of the room to give her presentation.  On the screen was a
full picture of the Borg 'outpost'.
    Tarva looked at the gathering "We have finished the
preliminary survey of the structure.  There appears to be a
primary entrance to it here."  A large portion of the cube was
highlighted near the bottom of the top half of the cube.
    "This is the entrance the ships we were following entered.
There are other apparent entrances but the structure appears to
be built around this point."  She then pushed another button and
a rotating, graphic depiction of the cube appeared next to the
current picture.
    "We have logged fifty existing 'standard' Borg ships docked
to the outside of the station.  There are also apparent 'niches'
for two hundred more ships."  The displays had zeroed in on a
docked Borg cube.  "We can only deduce that this is a major Borg
center."
    Anthony looked up "Commander, is there any indication if
this is the Borg home?"
    "I'll let Lieutenant S'Erlet answer that." Tarva said then
nodded to S'Erlet.
    S'Erlet stood "Thank you Commander.  I have been studying
the patterns of the 'Borg Link' since we arrived here.  It is
apparent that there are three major sub-space carriers
emanating from this station.  We, however, are unable to
determine the purpose of these signals but are continuing
studies.  My best hypothesis is that these carriers connect
similar Borg stations."
    "Do you have any proof of this theory?" Anthony asked.
    "No, Sir." S'Erlet said "What we do have, is that this is
the first major Borg installation encountered.  It is emitting
unique signals to specific locations.  These signals are not
going to standard ships, therefore, they must be going to
similar installations.  I do not believe that this is the Borg
'home' because their home must be a planet.  There isn't even a
star system near by.  If this is the center of the Borg empire,
then they have abandoned their home planet."
    "I concur." the Captain said "We must, however, explore this
facility to determine its place in the hierarchy."
    Golta and Kartang grunted their approval of 'exploration'.
    Anthony turned to Commander Norton "Commander, I'd like you,
Golta and Kartang to work with Commander Tarva and Lieutenant
S'Erlet to develop a plan to systematically explore this
structure.  Find specific locations to target such as computer
centers.  I want a plan to explore the important areas
efficiently.
    "In order to do this, we're going need a much closer look,
so we're taking the Vigilante into the station.  Commander
Dolittel,  we'll need all systems in top order.  Commander
Norton, I'll want all guards reposted and all weapons systems
ready for battle.  Before we send in large parties, we'll send
in a couple teams just to get an idea of how they'll react to
us."
    Anthony looked around the room "Any questions."
    "How long before we go in?" Norton asked.
    "We'll begin the approach as soon as this meeting is over."
Anthony sat back in his chair, very relaxed "Anything else."

    The Vigilante was dwarfed by the Borg station.  They entered
the opening along a bottom corner, great pipes and conduits
stretched out beneath them.  Above them, more cubes were docked
along the walls.  Further into the station, the top half opened
up revealing that it was mostly hollow.
    The Vigilante was brought about and faced back toward the
opening.  Captain Anthony decided to survey the interior before
making another move.
    The six cubes they'd been following were soon spotted docked
together above them.

    "There are two areas we want to get a closer look at."
Anthony was saying to Commander Norton.  "We need to study what
they do with the remains of a civilization.  I'd also like to
find out what is in the bottom half of this thing.  There is no
exterior opening, it ought to be interesting."
    "So the first teams should be deployed in the area of the
docked cubes so we can trace what the do with the cargo."
Norton said.
    "Correct." Anthony stared at the display of the cubes
"Another team should be sent below to chart that area."
    "Very good, Captain."  Norton transferred his phaser from
its holder on his chair to his holster "We'll begin making
plans."

    The first step away from the Vigilante was a drop ship
flight to the upper reaches of the docking bay.  The drop ship
being used, was the same one originally retrofitted with extra
scanning gear.  Equipment had been added in the troop area to
extend its scanner capabilities.  Commander Dolittel had
designed six operator stations to be added to the ship to expand
its ability to run detailed passive and active scans.  They had
the ability to map every nut and bolt within their scan range if
they wanted to.
    Drop Ship Seven floated up through the expanses of the Borg
structure.  Around it the cavern was totally still, if they
hadn't seen the cubes enter, they would have thought the station
abandoned.  There were none of the support or repair craft so
common in any Federation space dock.
    Upon the return of Drop Ship Seven, plans for the first two
away missions were finalized.  Team one with Whitecloud and
Utlin, was chosen to explore the interior while team two would
examine the activity dealing with the returned Cubes.
Lieutenant Utlin had requested to be assigned to team two but it
was decided that his connection to the subject may jeopardize
his objectivity.
    The first incursions into the station would remain small.
Even though the Borg had ignored the Enterprise's away teams in
the past, they had been aware of the Enterprise.  It was not
known how they would react to intruders from an unknown source.

-----------

    Drop Team One appeared in what scanners had indicated as an
access area just below the surface the dock area.  The team had
their class one mission uniforms.  Each member had a locator
implant for quick retrieval.  The implants had originally been
designed for the teams during use of the mission armor.  After
the incident with the Delphi, all away team members had been
implanted.
    The sixteen appeared with drawn weapons in full cover
formation.  They faced in all directions with the ones in front
squatting low so those behind had clear fire over them.
    The tunnel was 200 meters wide, had rounded sides and was
ribbed from the joining of sections.  The top and bottom were
flat and smooth.  Many scratches and gouges led up and down the
faded green passage.  The tunnel reached into the distance in
one direction but obviously opened on to an area several hundred
meters away.
    Lieutenant Whitecloud flipped open her visor and looked
around as several scientific members began taking scanner
readings. "They put us down in an obscure location so we would
have some time to get our bearings."  She looked at the
tricorder users.  "Is there any reaction to us yet?"
    "Nothing obvious, Sir." said a medium built dark skinned
human.
    "Team One leader to home." Whitecloud said to her mike.
    "Team One, this is home, go ahead." Came Golta's rough
voice.
    "Beginning mission status check." Whitecloud said.
    There was a slight pause as each team member coordinated
with control on the Vigilante.  They each made voice and visual
tests then confirmed transponder coordinates.  Each member had a
camera built into their mission helmets and transmitted
continual visual and related audio.  The audio was not team
member chatter but from a mike built into the helmets like the
camera.
    "Okay" Whitecloud said after the tests were completed
"Spread out and lets head to the opening."
    The team separated into pairs and started down the tunnel,
leaving foot prints in the thin layer of dust that covered the
deck.  One member of each pair proceeded with drawn weapon only,
the other also took readings with their tricorder.  They allowed
several meters between each pair for safety of the group.  They
would all randomly turn to check their flank.
    The tunnel opened in to a large storage facility.  Piles of
large beams towered above team.  Beyond, they could faintly hear
the hum of machinery that brought a strong acrid odor with it.
    "What are they for." Whitecloud asked.
    "Unknown." replied one of the technicians.
    Whitecloud then used a quick hand signal telling the team to
spread out though the area.  In the middle of the room, one of
the pairs found a control panel on a raised pad.  Whitecloud
quickly found her way to the area.
    Two other pairs were already on the scene and two techs
stood on the two meter high pedestal, looking at a control
panel.  She could hear inspection instructions coming from the
Vigilante to the technicians.
    Whitecloud turned to Lieutenant Utlin who was with her,
phaser in his left hand and tricorder in his right.  "Stay here,
keep an eye out, we may draw their attention."
    "Agreed." Utlin said and put his tricorder in its holster.
    Whitecloud holstered her phaser and climbed the flat U
shaped rungs on the pedestal to the control panel.  The panel
stood at the top of the pedestal without any railing around it.
It was a single panel on a thick stem, it was dark gray, almost
black with many buttons and display screens on it.  The pedestal
and panel were covered with a thick layer of dust and the panel
was dark.
    "What ever it was used for, it's not used any more."
Whitecloud said.
    "Perhaps we can use it to access their computer system."
Lieutenant Utlin suggested from below.
    "To access their computer system, is to access them."
Whitecloud returned.
    "Perhaps that is why this panel is not used." said one of
the techs.  "If they have direct computer interface, they would
no longer need this kind of individual control over a function."
    "Of course," Whitecloud said looking out at the stock around
them.  "they don't use this kind of control now, but there had
to have been a time when they did."
    "Well, at least it gives us some kind of idea how old this
station is."  Tarva said over the radio.  "Do not try to
activate the panel.  Leave one pair to study and record it and
continue survey."
    "Aye, Sir." Whitecloud said and pointed to one tech who
would remain on the pedestal, her and the other climbed back
down to the deck.  "Continue survey to the far side, toward the
machinery."
    They split up again and continued to head toward the heat
and noise at the far side of the storage room.  The temperature
rose slowly and the noise and smell also increased.
    When the opening to the next room came into sight, those
that had their face shields up had to lower them.  The bright
light coming from the room was blinding without the protection
of the tinted shields.  The opening towered above the team and
dry heat blasted out.  The team could not get closer then 100
meters from the opening, and even then, they felt like they
would be burned.
    "What is it." Whitecloud asked above the din.
    "It's a foundry." replied one of the technicians.
    They then looked back at the stacks of beams they had been
walking through for the past hour.  "This must be some kind of
repair facility." Lieutenant Utlin said.
    "Repair or Construction." Whitecloud corrected.
    "Perhaps." Utlin agreed.
    "We need to get in there and get a closer look at what
they're doing."  Whitecloud said.
    "It sounds like a job for the armored pressure suits." Utlin
said.
    "That it is, that it is, my friend." Whitecloud responded.
    "What do we do until we can return with them?" Utlin asked.
    "We'll check the length of the room, perhaps we can find
another way down to the next level."  Whitecloud said.
    Lieutenant Utlin used hand signals to direct the team on a
course parallel to opening.  They continued scouting the area
staying just out of the worst effects of the opening.  Skirting
around and under the stacks of giant beams they soon found
another, much smaller opening out of the store room.
    The dust from the access tunnel was mostly absent from the
store room but was again apparent in the new access.  The access
was an apparent elevator shaft.  The channel seemed to reach
indefinitely above and below them.  Next to the shaft was
another control panel, similar to the one they had found in the
middle of the room.
    "What do we do now?" One of the techs asked.
    "Well," Whitecloud said "we could continue to be afraid of
revealing ourselves by experimenting with these panels we keep
finding, or we could see what happens."
    She then signaled the Vigilante "Team one leader to home,
request permission to experiment with current control panel."
    Unexpectedly Captain Anthony's voice came over the intercom
"Team leader, you are authorized to attempted to access all
computer terminals you encounter.  This mission is to gather
knowledge and your current mission is to see how their going to
react to us.  Don't be afraid to push buttons."
    "Aye, thank you, Sir." Whitecloud said with a smile.
    "Home out." Anthony said and signaled off.
    Whitecloud immediately signaled one of the techs toward the
panel.  A skinny woman slightly shorter than Whitecloud
approached.  She began a close scan of the panel with her
tricorder.  "Sir," She said "It appears that there is power to
this panel, we should be able to get a response from it."
    "Very good," Whitecloud said "make it so." She always wanted
to say that.
    The tech started with a couple of larger buttons but didn't
seem to get any response.  She then saw what looked like a
scanner just above the panel, after placing her hand over the
scanner, the panel lit up.  She then pushed the largest button
on the panel and waited for a second for some kind of response.
A yellow light lit up on the top of the panel and movement could
be heard coming from the shaft.
    "You did something, Ensign." Lieutenant Utlin said.
    Soon something rattled in the shaft and a large, open air
grate elevator appeared.  There were no railings, just a flat,
dust covered grate and a glowing control panel sticking up from
a pedestal.
    "Is it safe?" one of the techs asked.
    "Who wants to go first?" Whitecloud asked with a grin.
    Lieutenant Utlin stepped forward "I'm game."
    "Home, be ready to transport Lieutenant Utlin on his
signal." Whitecloud said before Utlin started testing the grate.
    He started by prodding it with his foot.  Though the
tricorders said it was stable, they had a tendency to
misdiagnose where the Borg were concerned.  He then walked
across the grate to the control pad.
    "Which way, up or down?" Utlin said while studying the
controls.
    "Down, of course." Whitecloud said.
    "Okay." Utlin pushed a button on the pad and was thrown to
the grate as the elevator accelerated upwards.  "By the cape of
Lin'hrlar, I think I pushed the wrong button." he screamed as
the elevator flew up the shaft.
    "Do you request retrieval?" came a voice from the 'ship to
shore' intercom.
    "Negative, lets see where I'm going first, but stand by." he
said loudly though he didn't have to.
    The elevator stopped at the first opening it came to,
hundreds of meters up.  The door revealed the first Borg they'd
encountered.  There were narrow passageways crowed with the
mechanical lumbering Borg.
    Most seemed to be in their regeneration stations but others
occasionally stepped away and made adjustments to nearby
equipment.  The passages weren't regular, they flowed
organically in and around equipment.  An obvious contradiction
from their precedence of meticulous regularity and geometric
precision.
    Utlin pulled out his tricorder and began doing scans of the
area.  He really didn't know what he was scanning, that was for
the techs to analyze later.  He wanted to explore the new area,
they'd finally found the Borg, but he was alone and the team was
waiting for him.  He would be back though.
    Utlin walked over to the pedestal and leaned his helmet
camera towards it and lifted his visor.  "Well, Home, do you
have any suggestions for my next trick?"
    "The button you pushed the first time was the oval towards
the top of the panel." came a voice over the communicator.
    "That's correct." Utlin was impressed with the astute
observation.
    "We suggest the oval at the bottom half of the panel."
returned the voice.
    "Sounds good to me." Utlin said and reached for the panel.
    "Lieutenant, Sir," came the voice quickly "We would also
suggest that you secure yourself to the elevator before pressing
the button."
    It was too late, the elevator dropped away from under
Utlin's feet as soon as he pushed the button.  Lieutenant Utlin
felt as if he were flying for a second, before the elevator
shaft shifted into the Vigilante's transporter room.  The
transporter pad came up and smacked him in the face.  Laying on
the transporter pad with blood gushing from his nose, he wished
he hadn't lifted his visor before pushing the button.
    The medic on duty immediately came over to treat Utlin.
Within minutes, he was ready to return to the current location
of the away team.
    Utlin looked toward the tall blond female working the
transporter "Thanks for the fast work."
    The woman smiled "I was going to let you fall a bit, Sir,
but figured since your still new, your allowed one mistake."
    "Thanks." Utlin said.
    "But remember, only one." she smiled then disappeared,
replaced by the away team and the Borg station.
    Whitecloud looked at Utlin with a bit of a frown "Well," she
said "I don't think that elevator is going to work to get us to
lower levels."
    "There were other controls on the panel." Utlin returned
"Perhaps one of them regulates the speed."
    Whitecloud turned back to the tech at their panel "Do any of
those controls appear to be incremental?"
    "No, Sir." replied the tech after inspecting the panel for a
few seconds.
    Whitecloud then turned to Utlin "Did any of the controls on
the elevator appear to perform that function?"
    Utlin looked out at the elevator sitting in the shaft.  His
foot prints and other marks were barely noticeable in the dust
on the edges of the grating.  "I don't remember, perhaps I
should go out and take a look."
    Whitecloud and several others looked out at the elevator
"Your as good of a choice as any," she said "now that you are
experienced with the thing."
    Utlin flipped down his face shield and walked back on the
elevator.  The control pad had the two ovals on it with thumb
prints in the dust, it also had several other controls.  One
control was a graduated dial.  The dial had regular marks around
it with heavier lines forming an open bottom V at the top.  The
single mark on the dial was pointing straight down away from the
V.
    "If this is the speed control," Utlin said "it appears to be
at half speed.  Which way should I turn it?"
    "Turn it slightly one way," Whitecloud said "then ride it up
again.  Your tricorder should be able to tell us if it goes
faster or slower."
    Utlin turned the dial a couple of centimeters to the right,
sat down then pushed the top oval.  He didn't even feel the
contraption begin to move.  It just felt like the grate came up
and smacked him in the back of the head.  When he came to, he
was looking up at the face of the medic on the Vigilante.
    "What happened?" Utlin whispered.
    "You passed out from a blow to the head, and sever
g-forces." The Medic said "It's a good thing you were wearing a
helmet."
    The medic then had Utlin remove his uniform jacket and
shirt, both of which were shredded and soaked with blood.
Utlin's upper back was cut in a grid pattern from slamming back
on the grate.
    Twenty minutes after stepping into the elevator shaft the
second time, Lieutenant Utlin reappeared among his comrades.
They had retrieved the elevator a third time and were studying
its control pad.
    "You had a fifty, fifty chance." Whitecloud informed him.
"We've just finished tests on the elevator and are prepared to
proceed down to the next level.
    Half of the team stepped onto the elevator and rode it down
to the next level.  They had set the speed control a centimeter
in the opposite direction then Utlin had chosen.  The elevator
slid down the shaft at a very comfortable pace.
    The next level was a large open area.  High above them, they
could see the structural support of the previous level.  The
level, however, was cordoned off by 3 meter high walls and a low
humming sound could be heard.
    After the team was together, they made their way through the
corridors which soon revealed many 'work stations'.  All
stations were unmanned but appeared to be ready for use.  The
stations had a combination of standard Borg computer interfaces
and manual interfaces.  At the first computer interface port,
four personnel were left to attempt access.
    The noise became louder and more distinct as the team
proceeded through the maze.  Even though they hadn't encountered
any hostility, they turned each new corner in a two-by-two cover
formation.  One stayed high and the other low giving mutual
cover.  The rest of the team lined the walls with weapons drawn
and pointing up.  They snapped around the corners and moved
quickly through the area.
    Eventually, they reached a wide open area.  The place was
filled with giant working machines.  Many stretched over fifty
meters into the air.  All of the machines were painted the
normal dull Borg gray.  Most were connected with a series
conveyers and robotic tracks.  At the ends of the machine lines,
the parts coming off were enveloped by the green glow of the
Borg transporter and disappeared.
    The outside edge of the room was lined with standard Borg
interface stations.  Most of the stations were occupied with
assorted Borg.  Some Borg wandered about the machinery making
adjustments.
    "Lieutenant Whitecloud," came a voice over the team
intercom, it was one of the techs left behind to access the
computer port.
    "Go ahead" Anndrea responded as she watched the Borg wander
about, doing their insignificant duties.
    "We have accessed the first layer of security, we currently
have access to the functions of this work station.  It appears
that these abandoned ports have been neglected for so long that
there is no significant protection.  We are about to attempt
accessing the second level which appears to be the data
transmission level."  The young male voice said.
    "Very good," Whitecloud said "proceed."
    While the access was attempted, the rest of the team waited
at the entrance to the manufacturing area.  Soon, one of the
Borg stepped away from its station and headed for the team.
    The Borg had pale, ashen skin and was dressed with partial
armor like plates.  Servomechanisms could be seen opening and
closing driving the creatures legs.  Its respirator could be
heard opening and closing as it approached.  A ribbed tube ran
up behind its head from an apparatus on its back.  The tube
connected into its face just to the left of its chin and behind
the jaw.  The tube could then be seen under the skin merging
with its windpipe.
    "Looks like we have company." Lieutenant Whitecloud said.
    Several of the team took aim at the Borg but Whitecloud
waved them down.  "Let's see what it does." she whispered.  Then
said "Sub Team One, disengage the port, you've attracted some
attention."
    "But, Sir," returned the young voice "we have accessed the
data layer.  We've only just begun down loading."
    "Ensign, its coming for you.  Disengage immediately and
vacate the area.  Understood?"  Whitecloud said firmly.
    "Acknowledge." returned the voice.
    The whole team flattened against the walls as the Borg
walked between them.  Whitecloud signaled to the two at the end
of the line to follow the creature as it disappeared around a
corner.
    Golta's voice came over the ship to shore intercom: "Sub
Team One, you were given direct orders to disengage with the
port, comply immediately."
    "We just need a couple more minutes." the young tech's voice
returned.
    "Negative, disengage immediately.  We can not have the Borg
see us doing something that they object to so early."  Golta
practically growled.
    "Beam them out." Whitecloud said.
    "Negative, for security reasons, this early in the mission
we will not beam them out while they are under observation or
their equipment is accessing the Borg computers."  Golta said
gravely.
    "I can't disengage the tricorder from the port."  Came the
young voice now starting to panic.  "The ports must have
magnetic locking."
    "Set the self destruct on the tricorder and prepare for beam
out." Golta growled back.
    "Acknowledged."
    There was a slight pause when Golta came back "Beam out
completed."
    Then one of the team that had followed the Borg said "The
Borg is approaching the tricorder."
    Suddenly, in the direction they had come from, they could
hear a popping sound.   Sub Team Two reported back "The
tricorder exploded as the Borg attempted to access it.  The Borg
and the port were both destroyed."
    "Sub Team two report back to this position."  Whitecloud
said coolly.
    "Sir" One of the other team members said "You'd better look
at this."
    Whitecloud looked out at the machine area.  The conveyers
and the robotic arms were shaking.  Many of the lights around
the area were flickering.  As this was happening, the Borg
started stepping off their stations and several were already
heading for the team's position.  Some of the Borg were heading
toward them but most were heading into the machinery to check on
the malfunction.
    "Back to the elevator." Whitecloud order and started herding
the team before for her.
    "What if they're going to ignore us this time?" One of the
techs asked.
    "I have a hunch." Whitecloud said "Move it."
    The remaining members of the team headed back toward the
elevator ahead of Whitecloud and Utlin.
    Whitecloud and Utlin were several meters and few turns
behind the rest of the team.  They heard the lead say "They've
beamed into the damaged area.  Look out...arrrgh.."
    When Whitecloud and Utlin turned a corner they saw two of
the team firing at a Borg that had grabbed and injected one of
their comrades.  The Borg was beaming out just as the bright
blue of the phasers hit.  It exploded in a green and red flash
throwing the shooters back into the soldiers who had come up
behind them.  The room and the team were covered in green and
red gore from the Borg and the team member.
    "Home, this is Team One, eleven to beam out, now."
Whitecloud said loudly.
    "Negative." came Golta's gruff reply "The Borg have raised a
force field in your area, we are unable to transport."
    "To the elevator." Whitecloud said.
    The away team rushed through the twisting corridors back
tracking their way to the elevator.  This time, however, they
maintained the two by two cover formation rounding the remaining
corners.
    The elevator was in the shaft, but this time two Borg stood
on either side of the entrance.  When the first two came around
the corner, the Borg activated and started heading toward them.
    "Standard phaser power this time." Whitecloud warned from
behind them.
    "Aye, Sir." one of them said as they adjusted the large
weapons.
    Whitecloud watched the Borg advance slowly toward them.
"Fire."
    The two phasers each emitted a short red beam at a separate
Borg.  The Borg stumbled backward as a green patch glowed on
their torsos then fell over back wards.
    "Lets go." Whitecloud said then jumped forward leading the
team onto the elevator.  As soon as they were on the elevator,
Whitecloud nudged the speed control back toward center then
pushed the top oval.  They could just see the first Borg round
the corner when the elevator flew upward.
    Before they reached the level they had come down from they
felt the inertia seem to lift them away from the elevator.  The
shaft shifted and turned into the transporter room of the
Vigilante.  As a group, they seemed to jump together and land
clumsily on the pad.
    "Where's that fool?" Whitecloud demanded.
    "Ensign Peterson is waiting in Conference room A1." came
Lieutenant Golta's reply.  He had been standing next to the
control panel waiting for them.
    "What about the other team?" Lieutenant Utlin asked.
    "The Borg have continued to ignore them, so they will
continue their explorations."  Golta said then turned back to
Whitecloud "You, Lieutenant Utlin and myself are required in
Conference Room A1, immediately."
    Whitecloud dismissed the rest of the away team, then the
three exited the room.  Utlin and Whitecloud remained in full
mission gear and carried their helmets under their arms.

    Conference Room A1 was the 'court' room Captain Anthony and
Commander Tarva had used to meet the away team from the Delphi.
Ensign Peterson sat in the single chair facing the U shaped
table.  Captain Anthony occupied the chair in the middle of the
U and Commander Tarva was next to him.  Golta, Whitecloud and
Utlin took seats on the side of the U closest to the door.
    Ensign Peterson still wore his mission gear, his helmet sat
at his feet and his phaser was still in his holster.  He was a
young skinny human, slightly taller than Whitecloud.
    When the three were seated, Commander Tarva looked up from
her computer council directly at the ensign.  "Identify."
    The boy put his hand on a pad on the arm of the chair.  The
computer came on and started listing his name and history.  It
told of his graduation from Star Fleet Academy with honors just
two years earlier.  Five commendations were listed for
accomplishments in surveillance work and code decryption during
his previous/first tour along the Romulan Neutral zone.  It was
the file of a rising star in Star Fleet.  All in the room could
see the pride in the boy's face as the accomplishments of his
budding career were listed.
    Tarva continued to look directly at the Ensign "Ensign
Peterson, you are charged with disobeying a direct order,
resulting in the death of a team mate and jeopardizing the
entire mission of the Vigilante.  What is your defense to these
actions?"
    "Sir, the information I was collecting could have been vital
to our mission." Peterson said nervously "All I needed was a few
more minutes to accumulate enough data to be useful.  I could
not have predicted that the tricorder would become locked into
the access port.  There is also no indication that I would have
been able to disengage it if I had tried immediately after being
ordered to."
    Tarva continued to stare at the Ensign who was trying to
maintain his composure.  "Do you agree, that if you had
discovered that the tricorder was locked you could have
initiated the self destruct sequence earlier."
    "Perhaps." The boy admitted.
    "Do you agree that if the self destruct had been initiated
earlier the Borg unit that was damaged by the explosion would
not have been harmed?" Tarva continued coldly.
    "Yes."
    "Do you agree that if the Borg unit had not been harmed,
they would not have had a chance to act so severely toward the
Team member that had run into the replacement?"
    "Sir, there is no proof that the original unit would not
have attacked in the same way the second one did." Peterson was
continuing to stay calm.
    "But Ensign Osborne would have been aware of its presence
and not run into it." Tarva said as if concluding a complex
argument.
    "Ensign Osborne should not have been moving so recklessly
through a hostile environment." Peterson sounded as if he were
grasping at straws.
    This time Lieutenant Golta snorted then said "Excuse me
commander," Tarva nodded, Golta continued "We have the video
from the incident.  Perhaps, we should examine him 'moving
recklessly'"
    "Proceed." Tarva said after glancing toward the Captain.
    The screen on a side wall lit up showing the shaking video
of someone walking quickly down a hall.  The bottom of the
screen showed Osborne's name, the time and stardate.  The side
of the screen showed a readout of simple vital signs; pulse,
heart rate, respiration, and basic brain wave patterns.  He was
not moving in the standard two by two cover formation but was
stopping at each corner and checking the room before stepping
quickly into it.
    The room of the explosion was empty, including no sign of
the Borg caught by the explosion.  Ensign Osborne had checked it
properly and was half way through when a Borg materialized
directly before him and simply reached around him.  All of the
vital signs on the screen immediately went flat.  Soon after,
the screen shimmered green then went blank.
    Tarva said "Do you have anything else to say, Ensign."
    Ensign Peterson looked ill "No, Sir."
    The Captain looked at the young man "Please wait out side."
    Ensign Peterson stood stiffly and walked out of the room,
carrying his helmet professionally under one arm.  He stood
outside the room by himself in a very stiff at-ease stance.
Several minutes later, Lieutenant Utlin came to the door and
escorted him back in.
    "Please remain standing." The Captain said.
    All five at the table stood and faced the Ensign.  Commander
Tarva spoke first "For disobeying the direct orders of a
commanding officer while on a hazardous mission, you are
sentenced to exactly thirty hours in the brig.  You will also,
of course, have a notation made in your permanent record for
disobeying a direct order in a hazardous situation."
    Peterson didn't seem phased by the announcement "Is that
all, Sir?" he said emotionlessly.
    This time Golta spoke "No, that is not all.  You will also
be reassigned to duty in engineering.  The Drop Teams no longer
have use for your skills.  This reassignment also means
relocation to new quarters.  Before severing your time in the
brig, you will pack your gear and move to your new billet
location near engineering."
    Peterson had gone ghost white "But, Sir..." he mumbled.
    Commander Tarva cut him off "Dismissed."
    Golta, Utlin, and Whitecloud escorted Peterson back to his
quarters.  His roommate, thankfully was not there.  Golta
entered with him and collected the Drop Team gear.  Then stepped
outside while he packed his few possessions.
    When Ensign Peterson stepped back into the corridor he was
greeted by two lines of personnel facing into the center of the
hall, standing at stiff attention.  They were the total Drop
Team personnel less the current away team.  There was just
enough room for him to walk between them.  The lines started
about two meters from his door and were led by Golta and
Whitecloud.
    Ensign Peterson stiffened his back, sucked in his gut and
walked proudly toward the gauntlet.  As he approached,
Whitecloud and Golta snapped stiff, formal about faces and faced
away from him toward the bulkheads.  The rest of the personnel
did the exact same maneuver as Peterson approached.

--------------

    Several hours after returning from their mission, Whitecloud
and Utlin were reviewing the tapes and records in the drop team
meeting room.  They used the screen to replay key sequences of
the team members video.  Their goal was to reason out what the
purpose for the lower half of the station was.
    The most obvious function for the station, was
manufacturing.  Apparently, the Borg used the facilities to
repair massive damage to their ships.  There was some suggestion
that new cubes were also manufactured.  There was, however, no
indication that there were any cubes currently under
construction.
    The door to the room slid open allowing in Lieutenant
Commander Golta.  Utlin and Whitecloud stood as their immediate
superior approached.
    "The away team has returned." Golta said when he reached the
table.  "They have returned with something we think you may both
be interested in."  Golta looked directly at Utlin "Especially
you Lieutenant."
    "What is it?" Utlin asked curiously.
    "They've found what appears to be an unassimilated female
from your species."  Golta responded coldly.

-----------

    Whitecloud, Tarva, Anthony, Golta and Utlin stood watching a
monitor of a room in sick bay.  There was a single bunk with a
woman sitting on it.  She sat with her back against the wall and
had her arms wrapped around her legs hugging her knees to her
chest.  She sat with her face buried and rocked slowly back and
forth.  She wore a long heavy dress and robes, all appeared to
have once been highly decorated and ornate.  Now, they were
ripped and dirty.  She had dark skin and long dirty brown hair
that appeared that it might reach the floor.  From her current
position, they could not see her face or make out much about her
size or body structure.
    "She does look like a Child of Lin'hrlar." Utlin whispered,
very shaken "Do we have any pictures of her."
    Golta pressed a few buttons and the screen switched to some
mission footage.  The video showed the view from a point leader
slowly going through a Borg area.  The audio was the standard
sounds of machinery with occasional comments from the team
member.  Soon, he turned a corner and saw a mass of cloth and
hair huddled in a corner.
    He called for back up and approached the object carefully
with trained phaser.  When it was obvious he was being ignored,
he put his phaser away and gently made the woman look up at him.

Her face was dirty and gaunt, but there were no obvious signs of
injuries.  She had dark skin, darker then Utlin's, and she had
bright red eyes.  Her eyes, however, seemed totally blank.  The
rest of the video showed a tech doing a medical check then
finally the woman disappearing to the Vigilante.
    A medic had joined the group at the view screen.  She spoke
directly to Tarva "The woman is malnourished and dehydrated, but
otherwise in pretty good physical condition.  We've given her
some nutritional supplements, she won't let us get closer to do
anything else.  After what she's been through, we don't want to
force anything on her, at least not yet."
    Tarva turned to Lieutenant Utlin "What can you tell us about
her?  Is she one of your people?  Anything you can do to help us
contact her would be appreciated.  She may have information we
could use."
    Utlin sensed the coldness in Tarva's comments but ignored
it.  "She is 'One of Us'.  She appears to by high born and was
probably pampered and spoiled.  Her people are from the planet
Riganilus, you can tell from her darker skin and red eyes.
Riganilus was one of our ruling planets and a center for our
religion."
    The group could see Utlin's mixed emotions.  He was looking
at the only other known Child of Lin'hrlar, but apparently did
not care for her based on her heritage.
    "Do you think you could contact her?" Tarva asked "So far
she has not responded to any of our attempts."
    Utlin looked at the creature huddled on the bunk.  "I'll
try." he said simply.

    Sir Utlin dressed in his battle uniform.  It had been
cleaned and mended by the ships computer and looked better then
it had in years.  He carried the ceremonial sword in the loop on
his belt and wore his battle blaster securely strapped to his
left hip.  His hair was cut short and spiked like a warriors.
His red cape flowed brilliantly out around him.
    He marched into the small sickbay room and snapped to
attention then bowed deeply from the hips.  "My Lady." he said
in his own language "We are pleased to have found you alive and
well."
    The woman slowly looked up over her arm.  There was dirt
smeared across her face and greasy stringy her fell across her
face.  Her red eyes showed a glimmer of recognition at the
figure that stood before her.
    "Who are you?" she whispered hoarsely.
    "I am Sir Utlin Robe'than, formerly First Officer of the
carrier Star Controller and commander of Red Wing, Tactical
Fighter Squadron."  Utlin spoke very carefully. "And please, My
Lady, what is your name?"
    The woman looked up and down at the warrior before her.  It
was obvious she was inspecting the propriety of his
presentation.
    "I am Lady Purlerna Von Hather'fon of the House of Pulerna,
Second House of Lords in the Lin'Lolar region of Riganilus."
She stated.  As she spoke, she straightened herself out and
tried to look dignified.  "Where is my father?"
    "My Lady," Utlin said "we do not know were your father is."
    The woman looked about her "The creatures have been
defeated, we have won?  You must return me to my home, they must
be worried for me.  Where am I?  How did I get here?  My father
must be looking for me, when will I see him?  Is this one of my
Father's ships?  I didn't know the Star Controller followed my
father.  Is this the Star Controller?  Who are those creatures
who were here before...I must have been dreaming..."  She looked
at Utlin with a blank stare.  Her questions were still coming,
but her voice was gone to the dehydration.
    Sir Utlin helped her lay down flat then left the room.  He
went immediately to the Chief Medic.  "Are there any human
females who can treat her?"
    The Chief Medic looked at Utlin confused "Why human and
female?" he asked.
    "Humans look the most like our people." Utlin said "And a
woman of her breeding, would have only been tended by other
females.  I believe this would make her most comfortable."
    "It can be arranged." He replied.
    "Very good, also, please only allow humans and preferably
females in to see her.  The different species on the Vigilante
are beyond anything she would have ever encountered before."
Utlin thought to himself that they were beyond anything he had
ever encountered before.
    The next day Utlin returned to sick bay dressed again in his
traditional clothes.  Lady Pulerna paced her room, still wearing
her tattered robes and still quite dirty.
    The Chief Medic turned to Utlin "She has been very
uncooperative.  She refuses to bathe or change out of her rags.
She will not talk to her medic and barely acknowledges her
presence.  We are about to sedate her so we can get her cleaned
up and get some proper nourishment into her.  We were hoping you
could talk some sense into her before we took that step."
    Utlin signaled at her door then entered when she said
"What?"
    "I did not give you permission to enter." she spat at him.
"What is going on here, who are these people?"
    "My Lady" Utlin said after bowing "You were no condition
yesterday for me to explain, perhaps I should have."
    "Yes, perhaps you should have." She agreed angrily.
    "My Lady, you are on a space vessel called the 'Vigilante'."
Utlin started.
    "Vigilante" she hissed "What kind of name is that, I have
never heard of it.  Is it from one of the border fleets?"
    "My Lady," Utlin said gently "Perhaps you should sit down."
    "Why, what is wrong?" She insisted.
    "Please." Utlin said trying to be as calm as possible.
    The woman sat on the edge of her bed and looked at Sir
Utlin. "Out with it nave." she said "I'm getting tired of your
game."
    Utlin hung his head for a second then looked the woman in
the eyes "This is not a vessel of the Fleet.  It is an alien
vessel that was pursuing the creatures that attacked our
people."
    "Where are the rest of the Children of Lin'hrlar?" she asked
softly.
    "All was destroyed by the creatures known as the Borg."
Utlin said distantly "We are all that is left of the Children of
Lin'hrlar."
    Lady Purlerna started to slowly rock from side to side
humming some incoherent tune.  Her eyes were closed and her face
returned to its blank expression.
    Utlin took Lady Pulerna by the shoulders and shook her "You
must accept this." he said "They need you, I need you.  You must
be strong and make your Father and ancestors proud.  Do you hear
me?"
    The woman's burning red eyes suddenly flew open "How dare
you touch me, you Tregamalin." she snapped.
    Utlin stepped back and looked at the woman.  Had she
snapped, was she lost forever, or had Lin'hrlar reached out and
cleared her mind.  He would soon know.
    "What manner of creatures are these that we are among?" She
asked.
    "There are many different creatures on this vessel.  They
come from a place they call, The United Federation of Planets."
Utlin hoped that she had broken through the barriers she had
erected to protect herself against the Borg.
    "Where are they, I demand an audience with their Lord."  She
said imperially.
    "That can be arranged, but first, perhaps, you should get
cleaned up."  Utlin observed.
    The woman looked down at her robes then held herself up
straight.  "Perhaps that would be best.  You are dismissed for
now, but remain available.  I will require at least three
attendants to help me prepare for my meeting with the ship's
Lord."
    Utlin smiled, he couldn't wait to see this unleashed on the
Vigilante, they thought the Borg were tough to deal with.  He
bowed deeply from the waist "Very good my Lady." then exited the
room.
    The next few hours were a very trying time for the medics
assigned to Lady Purlerna.  She treated them as servants and
took minimal direction from them.  She refused to wear the
devises for the universal translator, insisting they were
beneath her.
    With the guidance of Lieutenant Utlin, they were able to
design clothes for her she wouldn't simply drop on the floor
saying "Unacceptable."
    Finally, she was cleaned and dressed in new flowing, blue
and red robes.  They were not nearly as ornate as what she was
used to but they would do, for now.  Her hair was cleaned and
flowed over her shoulders past her knees in front and behind
her.
    Utlin looked at her through the monitor, marveling at her
sudden beauty.  He did, however, notice that he was not as awe
struck with her royalty as he once would have been.
    "You will instruct Sir Utlin that I require his presence."
she said to one of her medic/attendants.
    "Yes, I will inform him." said the medic as she left.

    "I've had enough of Lady Purlerna." said the Medic as she
passed Utlin who was standing at the view screen.
    Utlin couldn't contain his smile, but didn't say a word.  He
headed into the Lady's 'chambers'.  "My Lady."
    "My attendants leave a lot to be desired." Lady Purlerna
said.  She was sitting in front of a mirror that had been
installed for her.
    "They are not attendants." Utlin said "They are highly
trained and dedicated Star Fleet medical officers."
    "Ha," Purlerna scoffed "Officers? You've got to be kidding.
Female officers, and did you see how light their skin was? I
don't even know what they're doing on a space craft."
    "My Lady," it was becoming very hard to spit that phrase out
"There is much for you to learn about the species that make up
the crew of the Vigilante.  Some of them are quite different
then anything we have ever seen in our part of the Galaxy."
    "Of course." Lady Purlerna said "Lin'hrlar exiled all
sentient creatures that were not in his image.  This Federation
must be the remains of those out casts.  Is it not written that
'All of the creatures known and unknown shall bow down and give
homage to the true children of Lin'hrlar?'"
    Utlin sighed, he'd forgotten that the High Lords of
Riganilus still followed the later writings of the Overseer of
Lin'hrlar.  If she truly believed that stuff, it would be very
difficult to get her to behave properly for the Vigilante.  He
was afraid that if she proved too bothersome, they would confine
her to quarters and ignore her.
    "Listen to me, My Lady." Utlin said very seriously "The
people on this ship had never heard of the Children of Lin'hrlar
before finding me.  They do not recognize birth right, only
actions and achievements.  They are very proud of the fact that
they do not restrict a person simply based on their heritage.
They will treat you with respect but they will not treat you as
a better."
    "Blasphemous." Purlerna said loudly "It is written that all
creatures will bow down before the Children of Lin'hrlar."
    "Please." Utlin insisted "They have not read the writings of
the Overseer.  You must remember that you...we are only guests
here."
    Lady Purlerna stiffened a bit then said "You are correct, we
are guests, we must behave as such.  Now I wish to meet our
host, please tell the Lord of this vessel that I will see him
now."
    Utlin hung his head and sighed "I will inform him." he then
turned crisply and left the room.
    Utlin returned to Lady Purlerna within five minutes and
escorted her to her new quarters.  He explained that the Lord
was not available immediately.  The Lord, however, wished that
she take the time to get acquainted with her new cabin.
    She walked slowly around the two rooms. "Why are there two
beds, is one for my attendant?  It shouldn't be in the same room
as mine.  Perhaps this is just the front chamber."  She walked
into the head and back out "What is the meaning of this? Where
are the rest of my chambers?"
    "This is all there is." Utlin said "You will not have an
attendant.  The second bunk is here because the quarters were
design to be shared by two people.  Junior Officers, to be
exact."
    "How will I get along, what if I need something."  She
asked.
    "Just ask the computer." Utlin then demonstrated.  "If there
is anything thing you need the computer can provide it for you,
or direct you to it."  He then demonstrated the replicator.
    "I have my own computer to do this for me?" She asked
suspiciously.
    "That's right." Utlin said.
    They were interrupted by a piping sound "Bridge to
Lieutenant Utlin."  came a female voice out of a wall speaker.
The intercom in the room had been modified to translate
automatically.
    "This is Lieutenant Utlin," he said "go ahead."
    "The Captain will see our guest now." returned the voice.
    "Thank you, Utlin out."
    "Bridge out."
    "Please explain something to me." Purlerna said.
    "Yes"
    "What is this 'Captain'?"
    "It is their title for ship's Lord." Utlin replied.
    "And 'Lieutenant'?" this time she sounded suspicious.
    Utlin smiled sheepishly "I must apologize, I have not been
totally honest with you.  I am no longer a guest on the
Vigilante.  I have accepted a commission in their organization.
I am part of the crew, and my rank is Lieutenant.  I have been
wearing this uniform so that you would feel comfortable with me.

I must admit, however, that it feels good to be in it again."
    "You are highly placed, perhaps second or third in command?"

She sounded impressed.
    Utlin looked about the room. "The room I'm quartered in is
exactly like this one.  I share it with a science officer, also
a lieutenant."
    She said no more, just followed him out of the room.  He
escorted her to the bridge.  They met very few people in the
corridors and Utlin was thankful for that.  She still had not
seen anybody but himself and humans.  He was not sure what her
reaction to her first alien would be, especially a Klingon, they
were just so damned ugly.
    Lady Purlerna paid little attention to the bridge.  She
seemed very unimpressed by it and the crew she saw there.  They
then walked into the room known as the Command Room.  It was
mostly filler with a long table, slightly rounded to fit the
room.
    One person sat at the table, a heavy framed man with long
gray/black hair pull back in a tail and thinning on top.  He
stood as Purlerna and Utlin entered and said "Welcome aboard the
Viglante."  He spoke into a devise he held in one hand that
translated for him.  "I am Captain Anthony, Captain of the
United Star Ship Vigilante."
    "Thank you." Purlerna said she then sat down in the chair at
the head of the table.
    The Captain reclaimed his seat and said "We have.."
    Anthony was interuppted by his guest "I did not give you
permission to be seated..Captain." she spat the last word.
    Captain Anthony sat back and laughed heartily.  "Lieutenant,
you warned me of her arrogance but I did not beleive you.  I
appolagize for that."  He then turned back to the Purlerna "My
Lady, you must understand that you are aristocrat without a
court.  I am the Captain of this vessel and that means I am
incharge of everything, includeing all crew and passengers.  If
I desired to have you returned to the place you were found, you
would be there before you could blink an eye--literally.  So
please behave yourself, we offer you life beyond the certain
death the Borg offered."  Anthony's face was totally serious.
    Purlerna was furious "How dare you speak to me that way, you
low class alien."
    Anthony sighed "If that's the way you want it.  Lieutenant,
please escort Miss Purlerna back to her quarters.  She will
remain there until she wishes to treat the crew of the Vigilante
with proper respect."

-----------

    Lieutenant Utlin entered Lady Purlerna's quarters after
signalling.  Ths time, he wore the standard ship's uniform with
the large black phaser replaceing his blaster.  It was twenty
two hours since Purlerna had been confined.
    Lady Purlerna's hair was tied back in a long tail.  She wore
some loungeing clothes she'd been able conjure up from her
replicator.  As soon as Utlin entered she turned on him furious
"Where have you been?" She yelled "I signalled for you more then
two hours ago."
    Utlin had been instructed to be civil to her.  They still
hoped to get though to her and get some information about the
Borg.  First, however, she had to learn to be a member of the
crew, or at least a gracious guest.  Anthony knew that if he
treated her like the royalty she had been, she would always be
impossible to deal with.
    Utlin looked at the woman and said sternly "I have duties
aboard this vessle.  I can not and will not drop what I am doing
everytime you 'signal'.  Now what is it that you signalled me
about?"
    Purlerna turned her back on him "It is unimportant, NOW."
    "In that case I would like you to meet a colleage and friend
of mine.  The Captain thinks that if you were to meet and talk
with some of the crew, you would learn to fit in better."
    Purlerna turned back around to look at Utlin "I do not care
to meet any of your warrior barbarian friends."
    "That's too bad." Utlin returned "She was very interested in
meeting you."
    "Really, how close a freind is She?"
    Utlin knew what she was implying and purposely ignored the
question.  This would just reinforce what she was thinking, what
ever got her interested.  Utlin leaned out into the hall and
signaled.
    Lieutenant Whitecloud came in dressed in standard uniform.
Her hair, however, instead of being simpley tied back, was held
back with a fancey silver clip with a large turquise stone in
it.  She had also applied a small amount of makeup, very
uncharacteristic for her.  Utlin had suggested the makeup, he
felt it might help Purlerna relate to her better.  Whitecloud
also wore the necklace and hearing aid used by the universal
translater.
    "Lady Purlerna this is Lietenant Whitecloud, my immediate
superior."  Utlin said formally.
    Whitecloud bowed very slightly and said with a pleasent
smile "I'm very pleased to meet you."
    Purlerna looked at the dark skin female who just entered.
The woman wore a very pleasent smile but her steal gray eyes
seemed cold and distant.
    "Of course your pleased." Purlerna replied then turned to
Utlin "Your dismissed, I'd to talk with Lieutenant Whitecloud
privately."

    Fifteen minutes later, Whitecloud met Utlin at his quarters.

She looked very confused another rarity for Lieutenant
Whitecloud.  "I don't know whether to laugh at the creature or
vent her."  She said as soon as she walked in.
    Utlin started laughing uncontrollably.
    "You set me up, what did you tell her?" she said finally
starting to smile.
    "I implied that we may be, how do you say...an Item."
    Whitecloud glanced at her painting of the soaring eagle
hanging on Utlin's wall.  "I suspected you may have said
something like that."
    "What did she say?"
    "She told me that I should stay away from you.  She said
that even though you are from Tregimalis you were from proper
enough breeding for her.  She said that an 'alien' such as
myself has no business with a Child of Lin'hrlar.  I was also
informed that it is your duty to take her as your 'Companion'
since you two are the last of your kind.  She also said other
things about the obvious inadequacies of my heritage which I do
not care to repeat."
    "I told you she could not be changed." Utlin said.
    "She was bred this way since birth.  They all are.  Why do
you think I chose the life of a warrior?  My own father had
arranged a match for me with a creature just like her.  I was
barely an adolesent, so I lied about my age and joined the
academy."  Utlin smiled at the memory.
    Tarva had gone into the head to remove the makeup as Utlin
spoke.  "You know," she said as she came out drying her face
with a large towel.  "I was thinking about what she said about
you taking her as your Companion.  I think she is quite right.
In fact, I think the sooner the better."
    "What?"
    "Perhaps if you spent a lot more quality time with her, she
would eventually be able to fit in."
    "No way," Utlin said starting to panic "I am not not going
to spend the rest of my life with that creature.  She may be
able to lose the edge enough to fit in, but she'll never
change."
    "You may not have a choice in the matter." Whitecloud said,
then quickly left the room.

                        to be continued...........
   ----------



                   T H E   V I G I L A N T E

                               Vb

                           "Outpost"
                          (continued)

......
Then lets have faith; good cometh out of ill;
The power that shaped the strife shall end the strife;
Then lets bow down before the Unkown Will;
Fight on, believing all is well with life;
Seeing within the worst of War's red rage
The gleam, the glory of the Golden Age.
                "Faith"
             Robert Service



    Captain Anthony had hoped to learn more about the Borg's
reactions to Lady Purlerna before he sent another team into the
station but soon gave up on the idea.  It was determined that
any information that may be gleaned from Purlerna would simply
have to be included in the mission report.
    The next missions were planned.  Drop Team One, led by
Lieutenant Whitecloud, would return to the foundry in mission
armor.  Drop Team Two, this time led by Lieutenant Commander
Golta, would again inspect the upper levels.  Drop Team Three,
led by Lieutenant Utlin, would return to the elevator shaft and
continue the investigation of the lower levels.
    After the incident earlier, the Borg had closely scanned the
vicinity outside of the station.  Probes the Vigilante had left
in orbit around the station reported high intensity sensor scans
exactly the same as those encountered by the Enterprise during
its encounters with the Borg.  Within six hours, all unusual
activity had ceased and the Borg returned to their normal
operating conditions.  Normal conditions also included the
dropping of the shields they'd erected around the incident site.

    "What if they have regained control of the elevator?" Utlin
asked.
    "Then we'll beam you out like we did last time."  Tarva said
simply.
    "What if they're just waiting for us to use the elevator
again then they'll have us." Utlin continued considering the
possibilities.
    "Lieutenant Utlin," Tarva said "if you do not wish to lead
this mission, or feel you are not ready, we will find a
replacement for you."
    "Sir," Utlin said formally "I am merely considering
contingencies."
    "Lieutenant Utlin, I don't have to remind you of the
contingency for getting captured by the Borg, do I?"  Tarva
queried.
    "No, Sir." Utlin returned immediately.  Fighting to the
death, was a tradition among his people and it still ran strong
within him.

    Drop Team One materialized outside of the Borg foundry.
They had beamed in with phasers drawn and in standard cover
formation.  After determining they were being ignored, they
started advancing on the foundry.  The tinted visors with EVE
(Electronic Vision Enhancement) revealed much more of what lay
just inside the entrance.
    The level they beamed in on turned out to be an overlook.
Below, were gigantic vats of molten iron and other ores.  The
furnaces seemed to be cranked to full volume, but no activity
was evident.  Standard Borg stations were immediately evident on
their level.  All stations were currently occupied.
    Whitecloud signaled for them to split up in standard paired
teams.  The first order of business for her, was to examine the
Borg of this area.  She approached the nearest station with
phaser drawn and trained on the occupant.
    The Borg was not the 'standard' model but was highly
modified.  Most Borg tended to have only part of their face
modified with implants.  These Borg, however, had totally
covered faces, in fact, every part of their bodies were covered.
    Another major difference was that they all had large back
packs.  The packs were made of many layers of small tubes that
were fused into their backs.  The stations the Borg stood at
were  larger then the standard stations to allow for the bulk of
the packs.
    "Why the back packs?" Whitecloud wondered aloud.
    The technician with Lieutenant Whitecloud ran scans on one
of the Borg.  "Sir, it appears that the back packs are cooling
units.  The modification would be necessary for the Borg to be
able to operate in this environment."
    "I agree." Whitecloud commented "I can think of no better
explanation."
    The level they were on, was more like a catwalk.  It
consisted of grating similar to what the elevator was made of.
The catwalk slowly spiraled down to the bottom of the foundry.
From their current position, though, the team could not see the
far side of the area.
    The Drop Team reassembled and started down the catwalk in
their standard two by two cover.  So far, they hadn't seen
any movement in the area but weren't going to take any chances.

--------------

    When Team Three tested the elevator, they found it still in
perfect working order.  Their fist stop was the level they had
visited previously.  The first goal was to try accessing one of
the ports.  This time, however, they would only monitor the
first data level.  There was no apparent response after ten
minutes so they disconnected and headed to the machinery.
    In the machinery area, the Borg continued to ignore the
team infiltrating directly among them.  The new objective was to
study the shop and determine what was being made.  Another goal
was to determine the level of technology being employed.  Were
the Borg manufacturing at a level above what the Federation was
capable of, and if they were, could they learn from it.
    It was apparent that the Borg could see the team members.
As the Borg wandered about performing their tasks, they would
adjust their paths so as not to run into anyone.
    The group had split into four sub-teams to more effectively
chart the area.  They were soon lost in the machinery that
towered above them, making most feel like insects.  It was soon
discovered that there were walk ways connecting the taller
machines.  Giving all a new perspective on the area.
    One of the subteams climbed to the catwalks for a better
view of the area.  The ladders were actually only long,
flattened U's built into the sides of the machines.  From the
catwalks it was obvious that this manufacturing area stretched
out for hundreds of meters beyond their entry point.  Beyond,
was what appeared to be another series of partitioned rooms,
similar to what they had just left.
    "Lets make for the far side." Utlin said "Maybe there are
more relics."
    The team gathered on the far side after two hours of
negotiating through the maze of machinery.  None had been
harassed or in anyway noticed by the Borg working in the area.
They fanned out and walked quickly across the fifty or so meters
of open area before the partitions.
    The new area was different from the partitioned section on
the far side of the level.  The area was not only walled but
covered.  The walls were sturdy and seemed thick.  The
tri-corders could not scan through the material and could not
positively identify it.  Where the partitions they had
encountered originally were open and easily accessible, they
could not immediately find an opening or door.
    "What is it?" one of the Techs asked.
    "Perhaps it's a storage facility." another volunteered.
    "Perhaps," Utlin said "We should find an entrance and find
out."  He then pointed to half the team and sent them in one
direction while he and the rest headed in the other.
    "Let us know if there are any changes in the tricorder
readings."  Anthony said as the teams separated.
    The walls were in panels of the same size as the dividers on
the other side.  These walls were dark green, almost black and
covered with a thin layer of dust.
    After ten minutes, the other team hailed Utlin.
    "Sir, we've found an area of the wall that appears to be a
sealed door."  Said the head tech with the group.
    "Acknowledged," Utlin returned "do not attempt entry.  We
will be with you shortly."
    Lieutenant Utlin then addressed the Vigilante "Home, this is
Team Three, requesting transport to sub team location."
    "Prepare for transport." came Chief Swanson's brief reply.
    The area around Utlin shifted and he and his team  found
themselves standing with the sub-team.
    "Report." Utlin said as soon as he arrived.
    "Sir," one of the techs said "we have found a seamed area of
the wall that reads thinner than the rest.  It is my opinion
that it is an opening of some kind."
    Utlin examined the seams then the surrounding wall.  "Are
there any scanners or releases in the area?"
    "No, Sir." The tech returned "We've done a complete scan of
the area and there are no other panels or any kind of scanning
devices."
    "What can you tell me about what's on the other side of this
wall?"  Utlin had stepped back and gazed at the 'door'.
    "Sir, our tricorders were unable to make accurate readings
through the material but since the door is thinner than the rest
of the wall we can make some cursory readings."  The Tech
responded.  "The atmosphere is breathable but uncirculated.  I
would describe it as 'stale'.  The door opens on to a hallway,
but we can't tell much beyond that."
    Utlin pulled out his own tricorder and pointed it at the
door.  He made a few adjustments then touched a button on the
control pad he wore on his right arm.  The team members with
their face shields down could see the MV Light ring come on
around Utlin's face shield.
    Utlin drew his phaser and held it in bent arm, pointing
in the air, the standard ready position.  "Team Three Leader to
Home." Utlin said.
    "Go ahead, Team Three Leader."  Came Commander Tarva's
reply.
    "Requesting transport to tricorder projected coordinates."
    "Prepare for transport." Tarva replied after a minute.
    Utlin touched a button dropping his face shield and said
"Energize."
    The standard, indirect, off-yellow Borg lighting
disappeared, replaced by the soft blue of MV radiating from
Utlin's helmet.  A long hall stretched into darkness in front of
him.  At the end of the light, he could see a connecting
corridor.
    Utlin turned around to examine the door, now behind him.
The difference in thickness between the door and wall were quite
evident.  The door was set into a meter deep alcove, this time
Utlin found the scanner they'd been looking for.
    "Home, this is team three leader." Utlin said formally.
There was, however, no answer.  "Home, I am not receiving your
reply." Utlin continued "I will, however, continue as if you can
read me.  I am inside the protected area.  There appears to be
no source of light.  I was hoping that my presence would trigger
automatic lighting but it has not." Utlin started shaking
slightly trying to fight back panic.
    "The area has obviously been sealed for a long time.  There
is atmosphere, but it is extremely stale.  There is minimal
dust, I can only assume that it indicates that the whole area is
tightly sealed from the rest of the station.  My first task will
be to open the door now that I appear to have access to the
control panel."
    Utlin pointed his tricorder at the control panel and fumbled
with its still relatively unfamiliar controls.  From what he
could tell, there appeared to be low voltage power to the panel.
The panel appeared to be a combination of previous control
panels and access terminals.  Utlin punched a few buttons and
looked for the scanner that the elevator had, but got no
response.
    Finally, Utlin decided to try the computer access. His
tricorder had been fitted with a 'standard' Borg style
connecter, so it plugged right in.  The tri-corder's automatic
diagnostics immediately began trying to access the port.  After
a couple of minutes it beeped indicating it had found a possible
access.  Utlin then had to press a button allowing it to
continue with a set of precoded, random access, algorithms.
    Within minutes, the panel lit up and the tricorder beeped
again.  Utlin now had two choices, he could try to access the
panel's functions manually or he could allow the tricorder to
continue its analysis.  Sick of playing with the tricorder,
Utlin reached out and pressed the largest button on the now lit
control panel.
    There was a pause after he pushed the button that made Utlin
think nothing was going to happen.  Then the door moved in
toward him and slid slowly into the wall.  When the door started
to move, Utlin lifted his face shield, eliminating the effects
of his MV light, and looked around.  Hidden lights in the top
corners of the walls had come on slightly illuminating the tops
of all of the walls.  It made for an eerie effect, like a
pathway leading into inky nothingness.
    As soon as the door opened enough for them to fit, the rest
of Utlin's team pushed their way in.  Four immediately formed a
standard cover formation facing down the hallway.  The rest
lined the walls, all with weapons drawn and safely pointed at
the ceiling.  The lights continued to brighten, illuminating the
team and the hallway.
    "Sir," Ensign Morris said "we were unable to read your
transmissions while the door was closed."
    "I thought as much since I could not raise you or home."
Utlin replied to his second.  "Post two guards outside the door
so we can maintain contact with the Vigilante.  Also, before we
move further in, we must determine how our signals are being
blocked.  Is it part of the structure or is it aimed at us."
    Utlin then stepped outside and signaled the Vigilante.
"Home, this is Lieutenant Utlin."
    "Report." Tarva said simply. "We have lost signals from all
personnel inside the new area."
    "The material appears to absorb all communication signals.
The tricorders were only able to penetrate at the thinner door
area.  I suggest that if we enter further into the area we'll
have to proceed with extreme caution."
    "Agreed," Tarva said "We'll beam down communication relays
so that we can maintain contact but we will be unable to get a
proper lock for transport.  If you go in, your going to have to
get yourselves out."
    "Agreed." Utlin returned.
    "One other thing." Tarva continued "Our scans are blocked
for over two hundred meters down.  You have a lot of area you
can explore, and only one known exit."
    "We'll proceed with caution."  Utlin said, "Out".
    Utlin saw a number of backpacks appear.  Each pack contained
twenty relays about the size of a tricorder.  They would simply
activate and place the relay on the floor when their connection
with the Vigilante began to fade.
    When Utlin returned to the hall, the lights were bright
enough to see to the end of the hall.  The lights were not
bright, just the standard off yellow indirect light that was
prevalent in the rest of the level.
    The five packs of relays were distributed to the technicians
then the group started down the hallway.  Twenty meters in, they
came to the first intersection.  Utlin split the group in half
and each took a corridor.

-----------

    Captain Robert Anthony stood in the Away Team command
center.  The center looked like the bridge of a Starship.  There
was a commander's chair in the middle of the room with
operator's stations in front of it.  Each operator could monitor
several team members at a time and the commander could direct
any of the video to one of five screens on the front wall.
    When Anthony had first visited the center during one of the
training missions, Lt Commander Golta had instinctively offered
the center chair.  Anthony, however, refused telling Golta that
in this room he was in charge of activity unless specifically
relieved.
    Now the command center was busy.  With the most away teams
yet deployed, most of the operators had reported even though
they were not needed.  The area had been designed to follow and
coordinate over 300 personnel, if needed.  Currently there were
only 48 deployed.
    Tarva sat in the commander's chair.  With Golta taking this
early opportunity to join in on the fun, Tarva had to cover for
him.  Anthony smiled to himself, he wished he could be out there
with them, that's why he was here now.

-----------

    Soon after splitting up, Utlin's team found the first room.
The lights in the room came on as they entered.  The room was
filled with bunks holding mummified Borg.  These Borg were
different than the ones Starfleet was used to.  They where
obviously Borg but not nearly as heavily implanted as standard
Borg.  Also, the stations they were on appeared to be only sleep
areas.
    "Sir," one of the techs said to Utlin after examining some
of the bodies.
    "Yes, Lieutenant." Utlin replied.
    "I can not find any of the standard Borg circuits in these
bodies." The tech said.
    "Elaborate." Utlin said as he approached the young woman.
    "Sir, all Borg we have encountered have two main kinds of
interfaces.  The first is the main power connector, which allows
them to feed.  The other is the Borg link, which keeps them
connected to the whole.  These Borg do not have the circuits for
the Borg link.  In fact, it is my guess that these units were
never part of the link.  I wish I had the facilities on the ship
to do a proper analysis."
    "Team leader to Home." Utlin said to his mike.
    "This is home." came Tarva's voice.
    "Can you read the Borg units in the area?"
    "Only through your transmissions, we are unable to
accurately scan the area."
    "Would it be possible to transport some of the bodies to
home for closer inspection?" Utlin sounded more curious then
anything.
    "If you triangulate with the location function on three
tricorders we may be able to get a proper lock."
    "Permission to attempt transport?".
    "Hold." was Tarva's reply.
    There was a few minutes of silence then Tarva returned
"Proper isolation fields have been activated.  Prepare for
triangulation."
    Utlin motioned for three techs to surround one of the
bodies.  "Sending coordinates..now". Utlin said when all three
signaled ready.
    There was a slight pause then the body was gone.  They did
the same with two other bodies that appeared to be different
models.
    Utlin's team continued to survey the new area.  They soon
found areas that appeared to be living, dining, even recreation
and computer interface areas.  It was slow tedious work, but
Captain Anthony decided in order to understand an enemy, one
must know as much about its past as possible.

-----------

    Anthony stood in an observation room looking at one of the
Borg bodies.  They had turned out to be extremely well preserved
and were providing unprecedented information on the inner
workings of the implants.  Though the Enterprise had made
extensive examinations of a captured Borg, named Hugh, and
Locutus, there had never been a chance to actually dissect one.
    It was the Vigilante's third shift and a smaller staff was
on duty in the science section.  Two of the other Borg were
currently being examined, this one was alone.  Anthony saw
movement out of the corner of his eye.
    A woman entered the exam room.  She wore the standard, red
uniform of command and commander's pips.  Her wavy blond hair
barely touched her collar and was held off of her face by a
couple of simple clips.  With her hands clasped behind her back,
she slowly walked around the creature.
    Anthony watched in fascination as the woman circled the Borg
several times.  Finally, she stopped and looked at Anthony
through the one-way window.
    "It's close," she said "very close, but not exact.  It was
never part of the link.  You need to be able to access the link
without them knowing.  If you can do that, they can be
defeated."
  Anthony watched the woman approach then fade as she reached
the window.  He continued staring into the room as a tear
formed in his eye.  Blood dripped from his palms from squeezing
his finger nails into them.

-----------

    Lieutenant Utlin sat in his quarters examining recordings of
the days explorations.  His roommate had been transferred closer
to the science section so he again lived alone.  He was not
reviewing his own team's records, rather he was looking at Team
One's records of their explorations of the top half of the
station.
    There was occasional evidence of his own civilization.  The
artifacts were coldly presented, but they were there.  Remains
of familiar structures and workmanship, Children of Lin'hrlar
raped and twisted by these evil creatures, all could be seen in
these cold records of the days journey.
    Utlin had wanted to spend this time in the Command Center
but had been ordered to his quarters.  They wanted him fresh to
lead the expedition to the next layer of the 'Barracks', what
the new section had been named.
    As survey teams continued the exploration of new areas,
Utlin found it irresistible to stay away from the Command
Center.  Now, he sat in his quarters examining what records he
did have and making plans for his next shift.
    Since the Captain had ordered a fourth team into the outpost
to explore the next level down they were already suffering from
information overload.  With all of the information coming in, it
was impossible to analyze all of it.  It was quickly becoming
obvious that they would not come near to having a complete
understanding of the outpost during their time here.  The
technicians of the Command Center had become more like
librarians of the new data rather than analyzers of it.
    As Utlin stared at the images before him his door signal
chimed.
    "Come." he said without looking up.
    He heard the door open and someone walk in.  He looked up to
see Anndrea standing just inside his door.  She wore her
standard uniform but her straight back hair hung loose about her
collar.  Somehow, she seemed softer than usual, almost, but not
quite, peaceful.
    Utlin stood out of courtesy "Good evening, I believe is the
proper greeting." he said with a smile. "How are you tonight."
    Anndrea managed a soft smile then said "I'm fine, just came
to see what your impressions of today's events are."
    Utlin motioned to one of the rough duty chairs near his work
station and waited for Anndrea to sit down and let the chair
form to her.  "The working areas that Team one explored are
fascinating and quite disturbing to me but they don't seem to
hold many surprises."  Utlin began.
    "How integrated have your people seem to have become with
the Borg?"  Whitecloud said carefully.
    Utlin sat back and looked at the images scrolling by on his
screen.  "Their behavior or duties don't seem to be any
different than the rest of the Borg units.  The impression is
that they have become fully assimilated into the society.  Other
than that, I really don't have any special insights, they are no
longer Children of Lin'hrlar, they are Borg."
    Whitecloud sat back in the chair and closed her eyes.  Her
legs moved slightly as if she were trying to swing the chair
from side to side.  "Has there been any progress with Lady
Purlerna?"
    Utlin cringed at the thought.  "She's changed, she no longer
acknowledges the existence of the Borg, she thinks she's on a
long cruise.  We sit in this accursed outpost and she looks at a
view screen and sees stars streaking by."
    "Haven't the counselors been working with her?" Whitecloud
asked.
    "The counselors on this ship are trained to help warriors
find their lost metal.  They are no not what you would call
xenophysicologists, trained to guide an alien mind back from its
depths.  From the cases I'm familiar with, when one of my people
was lost, there was no retrieving.  Perhaps it is Lin'hrlar
protecting her from the terror we face now."  Utlin had
obviously given this a lot of thought.
    "What is going to be done with her?" Whitecloud actually
sounded concerned.
    "It's still undecided," Utlin replied "She has named her
computer interface and now thinks it's her attendant.  She never
leaves her room and I am the only person she even acknowledges,
all others she ignores."  Utlin had learned to like Purlerna in
the past couple of days but it was more out of pity.
    "She has only been like this for a couple of days, she could
still come back."  Utlin continued.  "Like I said, once a Child
of Lin'hrlar is lost, they usually can't be retrieved except
through the grace of Lin'hrlar himself."
    "You will continue to try to talk her out of it?"
Whitecloud asked.
    The thought was obviously an unpleasant one, but Utlin
nodded simply and said "Yes, I'll continue to visit her when I
have time."
    "Very good, now, tomorrow we have a big day ahead of us.  I
plan to join you in the exploration of the next level of the
barracks."  Whitecloud looked as if she had just delivered very
good news.
    "Your taking command of my team?" Utlin asked defensively.
    "Not at all, we've just decided that Team two should join
you in the Barracks.  It is too large of a place to be explored
by only sixteen people at a time."
    "And the other areas?" Utlin asked.
    "Teams six and seven will join Team one in the upper half
and Team five will join Team four on the next level.  You know,
Team four seems to have found some sort of communications array
but they're holding decision on that until we get more
information."  Whitecloud replied.
    "We really should get some rest before the expedition."
Whitecloud said after a moment of silence.
    "Perhaps your right." Utlin agreed.
    Anndrea stood and walked into the other room, removing her
uniform jacket.  Utlin followed her, saying "Computer, lights
intensity 2."
    The lights dimmed.

-----------

    The two teams appeared outside of the only known entrance to
the Barracks.  Team four had looked for sign of it on their
level, but could not track it down.  The further into the
outpost they got, the more interference they encountered in all
of their tracking equipment.
    The third shift teams were just emerging from the structure.
Their leader immediately reported to Lieutenant Whitecloud.  The
report basically told them that there were no new findings, only
Borg in various states of decay.  They hadn't even found any new
specimens worth beaming aboard the Vigilante in almost four
hours.
    The only new thing that had been found since Utlin had left
was the elevators they planned to take down to the next level.
They were easy to find, just follow the main hallway to its end.

The team that found the elevators had tested one but had not
ridden it, that would be the privilege of their superiors.
    Utlin felt a strange feeling as the double team approached
the bank of elevator shafts.  There were 30 personnel in the
group, one person from each team had been left at the door as
guards or look outs.
    He looked up at the top of the shaft just above his head.
"I don't think we want to go up."
    The controls on the two panels were identical to the ones on
the earlier elevator.  They had already been tested, and were
suppose to be properly set for use.  Utlin hesitated then
stepped onto the grating.
    "I guess I'm still the logical choice." he quipped "I've got
the most experience."
    "Remember," Whitecloud reminded him "the Vigilante's
transporters are not there to pull you out this time."
    "Thank you Lieutenant," Utlin said with a smile, "I'm aware
of that."
    There were twenty five elevators along the back wall.  The
two teams would use three of them.  Two team members were chosen
to stay at the top level to maintain the communication relays.
Relays were also being attached to the top of the shafts and to
the elevators.
    The second level looked like the one above, a main corradore
down the middle with connecting corridors about every twenty
meters. There were no immediate differences, but all felt the
cold isolation and age of the area.  It was like opening an
ancient tomb.
    Once everyone was off the elevators they split into their
original teams.  The plan was for each team to explore half of
the level, using the main corridor as the divider.  It was soon
discovered, however, that this level was quite different than
the first.
    The area to the right of the corridor was one large open
room.  It was divided off by standing containers, supporting
wires and other hardware.  The containers were large enough to
hold a large size humanoid, they were black with metal trim and
partial glass fronts.
    The containers could not be seen over, because of their size
and the support cabling running to them.  The team could tell,
however, that this half of the barracks was filled with them.
    "Sir," one of the technicians said "The containers hold Borg
units apparently in stasis.  I read a very small trickle charge
to all of the chambers."

--------------

    After two days of exploring the lower levels of the
'Barracks', Whitecloud and Utlin were ready to make a formal
presentation to command.  Captain Anthony and the rest were in
the Command Room.
    Whitecloud stood by the main screen with a cut away
schematic of the Barracks.  "Sir," she began "The Barracks is
filled with a different model of Borg then we have yet
discovered.  As you know, the top level was filled with
mummified Borg that do not appear to have been part of the 'Borg
link'.
    "Most of the Borg in the lower levels, however, do appear to
be in some kind of stasis.  The Borg in stasis do seem to be in
perfect condition.  There are some units that appear to be in
defective containers.  These Borg show extreme signs of
decomposition."  The picture on the view screen then split to
show a pile of Borg attachments and what appeared to be humanoid
remains.
    Whitecloud turned and looked at the remains "We have begun
an analysis of all Borg attachments.  Because of the age and
micro-fine wires, the job of safely collecting the pieces is
extremely tedious."
    "What about the undamaged units?" The Captain asked.
    The remaining schematic of the Barracks was replaced with a
picture of a Borg in its container.  "We are not certain what
the reaction might be if we disturb the viable Borg units.  We
are waiting for your go ahead to open some of stasis units."
    The group began discussing the pros and cons of opening some
of the containers.  It was obvious that the computer systems on
each level monitored the Borg, but it was impossible to
determine to what degree.
    Robert Anthony listened to his officers discuss the merits
of opening the stasis tubes.  It occurred to him that there was
only one decision he could make.
    The Captain cleared his throat and the room immediately fell
silent.  Anthony stared at the ghostly Borg image on the screen
for a second then said "You've been discussing weather or not to
open some of these containers, there is no choice."  Anthony
looked at his officers for a second then continued.  "The
containers MUST be opened.  Our mission here is to gather
information, nothing else.  This gives us only one plan of
action, that is to open the containers and discover as much
about these units as we can.  The choice then becomes..How do we
do it?"
    Anthony looked at the group again, they were all nodding
agreement.  "Now, what I want you to do is analyze as much as
you can about these units and the stasis system before we try
opening a chamber.  I will be kept abreast of all progress on
the analysis and will maintain the final go ahead for opening,
is that clear?"
    "Yes, Sir." the group responded, practically in unison.

--------------

    Lieutenant Utlin stood in an observation room looking at
Lady Purlerna.   She sat hunched in a corner of her room, slowly
rocking back and forth.  Her arms were wrapped around her knees
hugging them tightly against her face.  "How long has she been
like this?" he asked an attendant.
    "We found her that way this morning." a female Ensign
replied.  This one was different from most, she had short,
straight, black hair and pointed ears.  Whenever Utlin spoke to
her, which wasn't often, she seemed cold, almost mechanical.
    "Did anything happen that could have caused this reaction?"
Utlin continued to stare at Purlerna.
    "The surveillance cameras show that she woke in the middle
of the night and crawled into the corner."  The pointed eared
female continued to talk to him emotionlessly.

    Utlin approached Lady Purlerna then knelt in front of her.
He reached out and slowly stroked her hair from in front of her
face, soon he could see her forehead over the top of her knees.
She had stopped rocking as soon as he touched her.  He gently
placed his hands on either side of her head and made her look up
at him.
    Half of Lady Purlerna's face was covered with a black mask.
A multi-prismed goggle covered her right eye, wrapping around
the side of her head, embedding into her skull just behind her
ear.  A small red laser was attached to the appliance along the
jaw line and flashed across Utlin's face as the woman looked up
at him.
    Purlerna's good eye widened in recognition, she spoke in a
mechanicle imitation of her own voice "Resistance is futile,"
she said "surrender for assimilation and serve the greater good
of the collective."

    Utlin sat straight up in bed trying to chase away the dream.
With his movement, the cabin lights brightened slightly.  He
looked around trying to remember where he was.  Utlin could
sense warmth next to him, he looked down on the bronze, muscled,
V shaped back of Anndrea Whitecloud.  The sheets covered her to
her waist and her straight black hair partially hid her
shoulders.  She hugged a pillow under her face and looked at him
with her one exposed eye.
    "Was it the dream again?"  She sounded slightly groggy but
very coherent.
    "Yes."
    "Is it still the same."
    "No, she spoke." Utlin shook his head trying to clear the
remaining threads of the dream.
    "And" Anndrea still hadn't moved.
    "She said that resistance is futile and we should just
surrender."  Utlin had leaned back on his elbows and was looking
at the painting of a four legged creature on the ceiling.  "Do
you think they know where we are?" He asked.
    "I don't think so, they'd be in here after us." Anndrea
responded. "Besides, there isn't much we could do about it if
they did."
    Utlin continued to study the ceiling and the poem Anndrea
had included:
        Go to the Wild that waits for me;
        Go where the moose and the musk-ox be;
        Go to the wolf and the secret snows;
        Go to my fate...who knows, who knows!
                                          R.W.S.
He finally understood.

--------------

    Transport areas were set up on each level of the barracks.
Standard pattern enhancer pylons were used and were tied into
the communications relays.  This allowed the crew to stand in
the field defined by the pattern enhancers and be beamed back to
the Vigilante as if a transporter had been installed.
    Utlin and Whitecloud watched as technicians started running
tests on the room's computer terminals and on five viable Borg.
One of the tricorders connected to an interface port began to
beep indicating a break in the code.
    "Has it accessed the terminal?" Whitecloud asked as she
stepped toward the tricorder.  As she spoke, the other
tricorders also began to signal.
    Several technicians were monitoring the tricorders with the
larger analytical tricorders.  "Negative." one of them said "The
tricorders appear to have activated the computers."
    "Home, this is team one, should we discontinue experiment?"
Whitecloud said immediately.
    After a slight pause, Commander Tarva replied "Negative,
continue data collection, but upgrade to defense condition two."
    The teams had entered the barracks under defense condition
one; drawn weapons, mutual cover formations etc.  They were
currently under def-con 3; holstered and locked weapons, helmets
off or visors up, generally a more relaxed working atmosphere.
Def-con 2 called for charged weapons, helmets on with lowered
visors where appropriate and nonworking personnel taking
positions to provide more security.  The security personnel were
always under a defense condition that was one higher than the
rest of the crew.
    The computer panels began to light up and seemed to begin
running diagnostics as lights and displays began flashing in
increasingly complex patterns.  Within minutes, all levels began
reporting that their computers were going through the same
sequences, even those that they had not tried to access.  Soon,
the rooms began to light up as the support cabling running to
the stasis containers began to glow.
    When the stasis containers began being effected by the power
up, Tarva ordered all tricorders disengaged.  The removal,
however, had no effect on the activation.
    All teams except for teams two and three were immediately
evacuated.  Teams two and three remained behind to monitor the
new activity.
    All remaining team members had gone to def-con one.  The
team couldn't do much about the activation,just monitor and try
to remain close to the beam out points.  Lieutenants Utlin and
Whitecloud remained by the computer centers as the technicians
continued to monitor the changes.
    "Sir," one of the techs said "There's something happening in
one of the canisters."
    A canister that had stood off to the side from the rest had
lit up and began to hum.  All phasers were immediately aimed at
the lone container.  Whitecloud, however, signaled for them to
relax slightly.
    Soon, the front of the canister jerked open releasing steam
and an acrid odor.  The Borg standing inside could be seen
unmoving through the smoke.  It didn't move for several seconds
then began to take deep breaths.  Bellows built into the Borg's
sides  constricted and expanded to force each breath.
    The Borg was built different from other units, it had a full
head appliance that didn't cover any part of its face, the body
armor was thicker than normal and more angular.  The unit's
attachments for the arms were connected on top of the arms
leaving the hands free.
    Its eyes snapped open and it stepped out of the canister
walking directly toward the group.  They thought it would ignore
them as usual, instead it stopped and stared at its reflection
in the Utlin's face shield.
    The Borg spoke to Utlin in a cold mechanical voice that the
universal translator automatically translated to standard
"Identify."
    For want of something better to do, Utlin opened his face,
bowed slightly, never losing eye contact with the Borg and said
stiffly "Sir Utlin, at your service, Sir."
    The Borg stood with his head tilted to the side for a second
then said in perfect mechanical Federation Standard "Why have
you awakened me..us..Sir Utlin At Your Service Sir."
    Utlin hesitated for a second then said simply "Identify."
    The Borg did a stiff imitation of Utlin's bow and said
"Offensive Unit One of ten kil.  Why are you awakening us, Sir
Utlin At Your Service Sir."
    The Borg tilted its head to the side again and stared past
Utlin for a second then said "RESISTANCE IS FUTILE, YOU WILL BE
ASSIMILATED...." the Borg looked confused for a second then
spoke again "The link has been expanded, this must be
investigated."  He turned to the computer terminal making a fist
of his right hand causing a long metal rod to telescope from the
underside of his wrist, then connected to the terminal.

    There was a call from one of the guards on the first level
of the Barracks "Attention, this is sentry one, we have company.
Three Borg have just materialized outside the Barracks and are
heading in."
    Tarva's response was immediate "All teams, evacuate
immediately." Tarva hesitated for a second then added "Defend
yourselves with extreme prejudice."
    As Tarva spoke, so did the old Borg "You are intruders."
    The Borg then moved faster then anyone had ever seen.  His
left arm connected with a device attached to his hip, bringing
it up pointed at Utlin.  Before they had a chance to react, the
thing fired a burst of yellow energy striking Utlin just below
the right elbow as he jumped out of the way.  The blast severed
Utlin's arm and blew a large gash in his right side.  Utlin's
dark red blood splattered in all directions as the blast
continued on striking a much slower human tech.  The tech to
simply blew apart as he flew back against several stasis
canisters.
     Utlin was the first to fire back at the Borg.  He had fired
as he jumped out of the way, still taking the hit.  The Borg was
hit low on its right side.  It staggered back a step but it took
aim again.  Through the ensuing commotion Lieutenant Utlin could
still hear the whirring and beeping of the tricorder clutched in
his right hand.
    This time the Borg's shot went wide as it absorbed ten more
red phaser blasts.  The team could hear the Borg's shot strike
something behind them with a loud explosion.  The Borg stumbled
back from the phaser strikes, with wires sparking from dry
wounds.

    <This is Chief Swanson,>
    Came the voice of the usually quiet transporter chief.
    <We've just lost signal from transport area A, repeat, we've
just lost signal from transport area A.>

    The Borg fired again, this time the shot went totally wild,
destroying several stasis containers and showering the team with
sparks and debris.  It was the last thing Offensive Unit One of
Ten Kil did as a bright blue phaser beam struck the creature,
instantly vaporizing it.

    The radio-intercom was soon filled with disjointed
confusion...
    <The Borg are still coming>...
    <Team Three withdraw immediately>...
    <Team Three, report status>...
    <The door is closing>...
    <We're going to be trapped>...

    None of the team members had had the presence of mind to
change their phaser settings except Lieutenant Whitecloud.
Anndrea knelt over Utlin holding a triage pad over the wound,
her phaser still leveled at the spot where the Borg had been.
The rest of the team held similar cover positions all kneeling
or crouched giving 360 degree cover.
    <Team Three....withdrawal....level one.....Quad A... extr..>
Commander Tarva's transmission and all other's from the
Vigilante ended with the closing of the Barrack's door.
    One of the techs who was still monitoring his tricorder
spoke up "Other canisters are powering up."
    Whitecloud quickly looked at the lights on all of the
equipment. "Lets move toward the elevators."  She thought for a
second then added "Target all equipment and make sure we get
those analytical tricorders out with us."  With that she fired
an extended beam into the main computer station near them.
    The team got to its feet and started firing on all computer
terminals, canisters and conduits.  They were soon being
showered with sparks, fire and debris.  The closest canisters
and equipment vaporized while other equipment started exploding
from chain reactions.
    Team Three started down the hall toward the main corridor.
Lieutenant Whitecloud held Lieutenant Utlin to her side holding
the triage patch in place.  Utlin's stumped didn't bleed, it was
cauterized by the blast.  The rest of the team split into their
standard two by two cover formation.
    Borg units started to appear from around the banks of
canisters.  Each was slightly different from the next but all
appeared to be heavily armored and lumbered more than the
standard Borg.  Many had full face appliances and carried
accessories strapped to their sides.
    The new units were immediately targeted but were barely
effected by the standard red phaser, even at full power.  Many
of the team, however, had already switched to blue which
vaporized the creatures.                          .
    "Full power to blue spectrum." Whitecloud yelled through the
confusion.
    With the whole team now firing in blue, large areas started
to clear around them as everything vaporized.  The phasers
however, started to over heat and shut down, Whitecloud's was
the first to go.
    Anndrea Whitecloud holstered her phaser and took Lieutenant
Utlin's.  Using the aiming systems built into the weapon and her
helmet, Anndrea drew down on another emerging Borg.  Left handed
firing was always one of Anndrea's weak points but she still
drew marksmanship honors.  Now, with the weight of Utlin at her
side, the pressure of having to keep moving, the intense heat
from the fire fight and moving targets, Whitecloud missed.
    As soon as she missed, Whitecloud called a warning, dropped
the Lieutenant and jumped to the side, re-aiming.  Before she
could regain her target, however, the Borg fired at her and the
two team members that had stayed with her for support.  The two
others were hit by the full force of the blast disintegrating
them in a blaze of red.  Anndrea felt the remains of her
commrads splash against her as she vaporized the Borg.
    Utlin lay face up on the deck clutching his side, slowly
rocking back and forth.  Anndrea couldn't see his face, but
could still feel his pain.  She helped the Lieutenant back to
his feet and headed into the curtain of smoke and fire ahead of
her.

--------------

    The communications on the bridge of the Vigilante had
erupted into a sea of confusion as soon as the door to the
barracks closed.  Captain Anthony was suddenly bombarded with
information from every survey support team on the ship.
Anthony's attention, however, was focused solely on Commander
Tarva, Lieutenant Commander Kartang, and Lieutenant Commander
Golta.  Golta and Kartang were in their command centers and
shared a split main screen.
    "Sir, all teams except team three were safely evacuated
before the door closed." Tarva reported.
    "Were the evacuation coordinates successfully relayed."
Anthony sounded like he was grasping at straws.
    "I don't know what good that will do." Golta growled "even
if they make it to the coordinates, there's no way we can
transport them out.  The Borg have raised the transport shields
again."
    Anthony scanned the faces on his main screen then turned
slightly to also look at his first officer.  "That's our next
mission, to retrieve the lost Drop Team and their tricorders."
    "Sir," Tarva said formally, "I must remind you that our
mission guidelines clearly state that we should not jeopardize
the mission of the Vigilante for the life of any member of the
crew."
    Anthony smiled slightly "The key word there is 'guidelines'.
The over ridding mission command is that the Captain has
complete authority to follow his own judgment."
    Tarva sat up a little straighter, she never wanted to leave
the team behind.  It was, however, her job to remind the Captain
of mission regulations.
    Anthony turned back to the screen "Now, I want suggestions
for the rescue, and I want them within ten minutes.  We have
people dying down there."
    Ten minutes later, Anthony and Tarva met Golta, Kartang and
Lieutenant Valerta in the 'Cavern'.  "Okay, what's the plan?"
Anthony asked as they approached.
    The two Klingons and the Kalonian came to attention as the
Captain and First Officer approached.  "Sir," Kartang said "we
have devised a plan to retrieve Drop Team Three."
    "Lets hear it."  Anthony said immediately.
    "We recommend sending in a drop ship to retrieve the team."
    "How do you recommend we get the drop ship in there?" Tarva
asked.
    "If we blast our way through the deck directly below us and
the underlying walkway it would be a straight drop to the
Barracks."  Kartang said enthusiastically.  "The drop ship
should have enough fire power to blast a hole in the barracks
and allow retrieval of the team."
    Anthony looked at the warriors in disbelief this was a
suicide mission if there ever was one.  It would also, without a
doubt, give away the position of the Vigilante.  He then looked
at the female pilot "I assume you have volunteered to pilot the
drop ship."
    The female Klingon came to stiffer attention and said
proudly "Yes Sir."
    Anthony then looked at Tarva who was scrutinizing the Pilot
"What's your opinion Commander?"
    "We'll have to move the ship as soon as she drops."  Tarva
said contemplatively.  Then to Valerta "You'll have a real rough
ride."
    "I can handle it." the Klingon said threateningly.
    "Okay, contact tech, find out exactly what we'll need to do
to punch a hole big enough to drop through."  Anthony said and
started to turn back toward the door.
    "They're already working on the calculations." Golta
informed the Captain.
    Anthony smiled slightly again "Very Good, we'll set a
tentative time for the drop in exactly twenty minutes."  Anthony
paused in mid turn and said "I'll want a second drop ship
prepared as a backup."
    "Sir," Kartang said "Lieutenant Valerta is the best pilot we
have besides myself.  As commander of the drop ship fleet, I
recognize it is my duty to remain with the command center but if
the mission proves too hazardous for even Lieutenant Valerta, I
request the honor of piloting the second drop ship."
    Anthony stood in his half turn and looked over the group for
a second "Permission granted." he said simply and exited the
Cavern.

--------------

    Through the EVE system built into her helmet, Whitecloud saw
the computer generated outline of the tail end of her retreating
team.  The figure was providing back cover for the rest of the
team continuing ahead.  The soldier's phaser trained directly on
her as she approached, then aimed high and fired over her
shoulder.  She could smell the ionization and feel the intense
heat as the shot barely missed her head.  Whitecloud never
flinched from the shot, just kept moving.  She did duck,
however, as she felt debris land about her.
    "Report." Whitecloud commanded as she approached the sentry.
    "Sir, including you two, I can account for seven." the
sentry said without diverting his attention from the
surroundings.
    Whitecloud cringed, she had lost half of the remaining team.
How many more would die, rather, would any of them survive?

    Whitecloud found the remaining four just inside the entrance
to this half of the level.  They were providing mutual cover and
watching the main corridor and elevators.  Anndrea laid Utlin
with the group then crouched with them against the wall.
    "What's the situation?"  She asked as she looked out at the
elevators.
    "The Borg in stasis in this section seem to have stopped
reviving."  One of the warriors said  "The Borg by the elevators
appear to be the ones that came in from outside."  The man
nodded toward three Borg standing stiffly by the center of the
bank of elevators.
    "I wonder how long they've been there?" Whitecloud mused.
    "They arrived just after we did." one of the four
volunteered.
    "From above?"
    "Aye, Sir" They came down on the elevator.
    "Sir," the remaining tech said "I'm picking up a lot of
movement in here, the Borg are still waking up."
    "We'd better get out of here." Whitecloud said.  She then
motioned for someone to pick up Utlin and they started heading
toward the elevators.
    Just as they started along the wall, the three Borg
separated forming a large triangle.  Immediately, cylinders of
green light appeared as more Borg beamed into the triangle.
    "They're using the three to triangulate for beaming." one of
the techs said.
    "That means their sensors can't read in here either."
Whitecloud responded.
    Soon, ten Borg were in front of the elevators and were
heading toward the stasis room.  Several of the team immediately
drew down on the Borg, but Whitecloud waved them off.  "Lets see
what they're going to do."
    The team continued toward the elevators, hugging along the
wall.  When they were about half way, one of the tail guards
called out "We've got more company."
    Five old Borg had emerged from the stasis room and were
facing the now advancing Borg.  The Borg had passed the team and
totallyignored them.  The two groups of Borg stood staring at
each other for a few minutes.
    Whitecloud had the group hold its ground waiting to see what
would happen.  Finally, one of the old Borg spoke.
    "The Link has been expanded beyond its original intent."
    "THE INTENT OF THE LINK IS IRRELEVANT" One of the newer Borg
said in a mechanical voice that sounded like many voices.
    "We have been awakened, there are intruders to deal with."
    "INTRUDERS ARE IRRELEVANT, YOU ARE OBSOLETE YOU MUST BE
REASSIMILATED."
    "We have been awakened, there are battles to be won,
intruders to be eliminated."
    "THE INTRUDERS ARE IRRELEVANT, BATTLES ARE IRRELEVANT,
WINNING IS IRRELEVANT, YOU MUST BE REASSIMILATED."
    More old Borg had begun to emerge from the stasis room and
columns of green light started to appear bringing more newer
Borg.  "We'd better get out of here while we can." Whitecloud
said.
    As soon as the team started to move, one of the old Borg
pointed its weapon at the group.  Before it could fire, however,
one of the other Borg grabbed the weapon with one hand and
removed a circuit from the creature's neck with the other hand.
The Borg immediately fell to the floor.
    The old Borg units immediately responded by firing on the
other Borg.  As soon as the firing began, the team broke into a
dead run toward the elevators.  The newer Borg were being cut
down by the old Borg but replacements were beaming in.  The
replacements, however, had shielding that could withstand the
blasts of the older Borg.  By the time the team was on the
elevator, the hallway was filled with both older and standard
Borg.  The standard Borg at first seemed to be taking a beating
but looked like they would eventually overwhelm, as usual.

--------------

    Lieutenant Valerta sat alone in the drop ship.  She wore
full pilot armor phasers strapped to both hips.  She sat tensely
in the snug pilot's seat with a half snarl on her lips.  The
signal over the door counted down eternally slow, her world seem
to be passing by in slow motion.
    Drop ship command and the bridge heard Lieutenant Valerta's
Klingon primal scream as the drop ship launched.  As soon as DS
Twelve cleared the bay, The Vigilante began a fast assent toward
the top of the Outpost.  DS Twelve had its own flight path,
straight down toward a solid deck.
    Everything had to be timed just right, as DS Twelve
approached the surface, the Vigilante beamed photon torpedoes
into place.  The torpedoes appeared and detonated seconds ahead
of DS Twelve.  The cloaked drop ship's egg shaped shields could
be seen against the fire and debris of the explosions as it
passed nose first through the holes the Vigilante had just
punched in the outpost.
    Valerta struggled against the turbulence of the explosions
as she passed through the outer hull and the access tunnel the
first team had originally beamed into.  The turbulence from the
depressurization reminded Valerta of piloting a star glider
through the solar winds of the Omicron Dellon.
Once Valerta cleared the access tunnel it was a straight
drop to the machine room and the top of the barracks.  Valerta
fired her thrusters swinging the ship toward the barracks then
immediately activated the targeting systems.  The drop ship's
fire control computers where preprogrammed with strike
coordinates and evasion maneuver sequences.
    The drop team had been ordered to extraction point alpha
which was the corner of the barracks to the right of the main
door.  Valerta was to target the wall to the left
ofthe door so as not to jeopardize the team.
    The drop ship approached the barracks in extreme
acceleration with shields at maximum and cloaking engaged.  As
soon as she was within range, Valerta fired a full volley of
photon torpedoes at the barracks.  The cloaking peeled away from
the drop ship to allow the firing then immediately reappeared as
extreme evasive maneuvers were taken.
    When Valerta finished her turn and roll, she came about to
allow full sensor scan of the area.  The floor outside the
barracks had a giant hole in it but the walls merely seemed
discolored.  The ships sensors read no cracks or other kinds of
damage to the structure.

--------------

    When the elevator arrived at the top level, the team was
greeted by the two guards that had originally been posted there.
Leading the group off the lift, Whitecloud turned to the guards.
    "Report."
    "Sir," A Klingon said "three Borg came in then rode the
elevator down, no other Borg have entered since the door
closed."  As he was saying this, he continued to cover the other
elevators.
    "Sir," the other guard spoke up "what is going on down
there."
    Whitecloud had stepped away from the group trying to get in
the full picture of the situation.  "The old Borg have come out
of stasis, they appear to be designed for a single purpose."
    "What purpose?"
    Whitecloud turned and looked at the guard raising her face
shield "They're warriors."
    "They're designed for battle." one of the others added.
    There was movement in one of the elevator shafts.  The group
immediately dispersed from the area then turned back to cover.
    "It's from one of the lower levels." the Klingon noted.
    A lift holding ten Battle Borg arrived just as the Klingon
finished.  The Borg immediately started firing on the group,
cutting one of the techs in half.
    The response was immediate, with the team firing an array of
red and blue phaser blasts at the Borg.  Several Borg took
direct blue hits, causing them to stumble and burn but not
disintegrate.  The red phasers did no obvious damage.
    Whitecloud then yelled "Aim for the lift."
    Three of the Borg had gotten off of the elevator before a
blue phaser disintegrated it.  The seven Borg still on the
platform dropped out of sight.
    Whitecloud made an adjustment on her phaser before the three
could get too far from the shaft.  This time when she fired,
bright white fire flared from the sides of the phaser muzzle and
the Borg where hit with a solid blast of energy and blown back
into the shaft.
    "Use the photon grenades," Whitecloud yelled "destroy the
elevators before we have more company!"  As she said this she
stuck Utlin's phaser in her belt and ran toward the shafts
already pulling grenades from her equipment pack.
    "Set them at full power." Whitecloud added.  The remaining
members of the group followed suit, pulling out grenades and
making adjustments on the go.
    They spread out and started dropping the remote controlled
grenades down the shafts, even the one that had just been
destroyed.  They weren't quite done when one of the control
panels lit up.
    "Another one's coming up." someone yelled.
    Whitecloud pushed a few buttons on the controller on her
left arm and yelled "FIRE IN THE HOLE".
    The seven ran from the shafts, all watching the countdown
displays in their helmets.  They hadn't even made it back to
where they had left Utlin when they dove for the deck covering
their heads.  Twenty-one of the twenty-five shafts immediately
blew yellow and blue flames over the team.  A shock wave threw
everyone over six meters further down the hall.  The team
recovered quickly and came up with phasers in hand.  The control
pads for two of the remaining four shafts lit up.
    Whitecloud headed for Utlin and commanded "Take cover!"  The
rest of the team stumbled to their feet and headed down the hall
toward the nearest connecting corridors.  Anndrea had Utlin by
one arm dragging him towards cover when the Borg arrived.
    Both lifts were packed full of battle Borg who immediately
started to spread out.  The blue phaser blasts that met them
only damaged them, but didn't destroy any.  After laying down
several barrages, Whitecloud pulled out more photon grenades.
    "Set to full power." Whitecloud said as she adjusted the
dial on her's.
    "But Lieutenant," one of the techs said "full power?"
    "DO IT" Whitecloud yelled then leaned around the wall and
started throwing her grenades over the heads of the advancing
battle Borg.  She then turned toward the Klingon guard and said
"Target the undamaged elevators."
    As soon as the grenades rolled into the elevator shafts,
Whitecloud called again "Fire in the hole!" then detonated them.
    The team stopped firing and dove down the hall away from the
doorway.  Whitecloud never had a chance to take proper cover
when the flames, shockwave and deafening roar from the
explosions blasted down the side corridor.  The explosion lifted
Anndrea from the deck and threw her over the rest of the team.
    Lieutenant Whitecloud landed clumsily rolling sideways with
flopping arms.  Her back, arms and legs smoked from the flames
but she was saved from major damage by her fire retardant
uniform.

--------------

    The Borg response to Valerta's attack was immediate.  The
interior was soon filled with white flashes of probing energy
beams.  Valerta expertly flew evasive maneuvers and lined up for
another attack, this time on the door.
    Two volley's of triple photon torpedoes struck the door and
surrounding area with a blinding flash.  Valerta began her roll
and retreat before the cloaking was totally reengaged but this
time took her first hit.  The drop ship shuddered from the
strike but didn't suffer any damage.
    When she was finally able to check the damage of the last
attack, the results were the same, major exterior deck damage
and discoloration at the impact site.  There was, however, no
discernible damage to the barracks or the door.
    The drop ship shook from another hit, and even harder from
two shots that immediately followed.  Valerta cut power dropping
and rolling the ship to the right, trying to keep the probing
beams from zeroing in on her.  After the roll and another turn,
she accelerated and climbed straight up the side of the room.
    Before Valerta could start another run on the door, five
more energy beams found her.  The drop ship shook violently as
the shields failed and the ship took its first direct hits.
    Valerta struggled to maintain control with secondary systems
failing.  She then accelerated making abrupt turns and dives
trying to avoid the net of energy bolts.  Many of the shots
continued to miss as the Borg tried to adjust to the low scanner
profile of the now uncloaked drop ship.
    Valerta got the ship positioned for a third attack then took
more hits, four to the engine area, several glanced off the body
and others struck the cabin over the copilot's seat.  Power to
all systems began to fail as sparks and smoke filled the cabin.
Valerta had no recourse, she set the impact destruct mechanism,
accelerated toward the barracks, then hit the eject button over
her head.
    Since the Borg had raised beam out shielding, Valerta was
ejected mechanically.  The pilot's chair was ejected through the
top of the drop ship.  The top clam shelled around the pilot to
form an ejection pod.
    Valerta's ejection pod was thrown high over the machinery
below.  The pod was nearing its zenith when the drop ship struck
the barracks and self destructed.  The blinding white flash
damaged the outer machinery below and threw the pod further
across the room, crashing into the partitioned area.

--------------

    Kartang sat strapped into the pilot's seat of his drop ship.
He could hear the confusion of the situation through the
intercom but didn't say a word.  The bitterness of his own blood
slid down his throat as he bit his lip trying to maintain his
focus.
    "Drop Ship One," came Tarva's voice "prepare for
deployment."
    "Drop Ship One standing by." was Kartang's gruff reply

    Captain Anthony and the rest of the crew sat strapped into
their rough duty chairs. The main view screen showed the
expansive outpost hold stretching out below them.  The Vigilante
sat in a high corner of the outpost above the coordinates it had
occupied since arrival.  Now they had to perform a tricky Z-axis
drop back to the bottom to deliver more photon torpedoes and
Drop Ship One.
    "Sir" Lieutenant S'Erlet spoke up.
    "Yes, Lieutenant." the Captain replied immediately.
    "I'm reading a large number of low energy beam discharges in
the hold below us."  S'Erlet said as he studied the readouts in
front of him.
    "What purpose do they have." Anthony asked adjusting his
console to show S'Erlet's station.
    "They are similar to what Valerta reported before she
crashed."  S'Erlet said.
    "They're looking for us." Anthony said coldly.
    "What do we do, Sir?" Ensign O'Malley asked as she prepared
for the drop.
    Anthony's reply was simple "Hold our position."  then to
S'Erlet "Lieutenant, is there any sequence to their search
pattern?"
    S'Erlet worked quickly at his console trying to guide the
ship's computer through its analysis.  "Yes, Sir"  he then
anticipated the next question "Now predicting gaps in coverage
for next ten minutes and plotting possible course for Z drop."
    "Very good."  Anthony smiled then added "feed earliest
possible course to helm.  Ensign, initiate Z drop by S'Erlet's
feed."
    "Aye, Sir" O'Malley said and began making the proper
adjustments.  Immediately a two minute eighteen second timer
appeared on the screen. "Z position adjustment maneuver in two
minutes." O'Malley reported just as the timer reached the
marked.

    Kartang watched the new countdown progress, his own launch
sequence held at twenty seconds.  Kartang had been in numerous
skirmishes and raids along many of the empire's borders but
never before had he felt such fear.  He sat alone in an unproven
piece of Federation equipment waiting to dropped like a rock
into an alien space station to retrieve possible survivors of a
science expedition.
    He watched the sequence near its end, waiting for some sign
of the descent.  Of course he knew there would no discernible
movement but he still expected it.

    The Vigilante started its descent through the station.  It
made wide sweeping turns and sudden drops to stay in the gaps of
the energy beams.  Ensign O'Malley closely monitored the
computer's course choice and stood ready to redirect the
Vigilante in an emergency.
    "Ensign," the Captain said to his navigator "prepare a
course for emergency withdrawal from the station."
    "Aye, Sir." O'Malley said hesitantly then started pushing
buttons.
    "And the survivors?" Tarva asked.  She wasn't questioning
her Captain's judgment, just needed to know what to prepare for.
    "I will not risk anymore personnel or equipment for possible
survivors."  Anthony replied  "And we definitely can not risk
the Vigilante any further at this point."  he hesitated for a
few seconds to wipe sweat from his forehead.  "We have another
destination to reach beyond this outpost.  We must complete our
mission."
    "Sir," O'Malley reported "approaching drop point."
    S'Erlet was the next to speak up "Captain, I'm reading extra
structural reinforcements at original drop site.  They also
appear to have extended the beam out shield to that area."
    "What's the closest beam in site available?" Commander Tarva
asked.
    S'Erlet put a diagram of the area on part of the screen.  He
then highlighted the section covered by the Borg's force field.
Pointing to an area outside the force field S'Erlet said "We
could beam in the torpedoes here, along with direct firing we
should be able to punch a new hole in the deck."
    "Will there be enough room for the drop ship to maneuver in
that area?" Captain Anthony asked.
    "Yes, Sir." S'Erlet replied.  "From our surveys there should
be enough room for the drop ship to safely navigate to the
access tunnel which the Borg don't appear to have repaired."
    "Very good," the Captain said with a nod. "notify Commander
Kartang of the change."
    S'Erlet pressed a button on his console sending the changes
to the drop ship.

    Kartang's launch count-down had already commenced when he
heard a beep from his navigation computer.  New directions were
being fed for the drop.. He was able to glance at the new plans
just as he was pressed into his seat from the acceleration of
the launch.
    The drop ship cleared the Vigilante and immediately nosed
down toward the deck of the hold.  A small area directly in
front of DS One erupted into flame blowing debris at it.  The
cloaked shields shimmered from the destruction around them as DS
One passed into the outpost.

--------------

    Once the blast from the photon grenades settled, the drop
team crawled to their feet and surveyed the damage.
    "Lieutenant!" one of the techs called when he saw Whitecloud
sprawled on the deck ahead of them.  He ran up to her and shook
her lightly yelling "Lieutenant Whitecloud, are you okay?"
    Anndrea slowly started to move then struggled to her side as
the tech helped her up.  "Did we get them all?"
    "Affirmative." replied the Klingon.  "All Borg appear to
have been destroyed."
    "Very good, are there any bodies still intact?"  Whitecloud
was leaning on the tech and heading toward the still form of
Lieutenant Utlin.
    "Yes, Sir." The Klingon grunted back.
    "Very good, bring it with us, it may still prove useful."
Whitecloud reached Utlin just after one of the other techs
reached him and had begun a medical scan.
    "How's he doing?" Anndrea asked gently lowering herself to
the deck next to Utlin.
    "He's alive." the Tech replied as if it were the only
conclusion he could reach.
    "Can we move him?" Anndrea asked softly relying on the Tech
to keep her from falling over.
    "We're going to have to."  The man said simply.
    Anndrea nodded slightly and said "Lets go then."
    Whitecloud had just gotten to her feet and had two of the
team carrying Utlin when the Klingon came back with a Borg body.
"What now?" he huffed as he approached the shrinking clan.
    "Now." Anndrea said "we get our butts to extraction point
alpha and hope the Vig can get in here."

    Approaching the far corner of the barracks, the team could
hear a distant rumbling noise.  "What was that?" one of the
guards asked.
    The team was in the hallway just off the main corridor
closest to the entrance to the barracks.  The rumbling came
again a few minutes later, only this time it seemed to be right
next to them.  "There it goes again."  The guard said.
    Whitecloud looked up from her support and slowly turned
toward the corridor.  "Its the Vigilante," she said hoarsely
"they'll try to punch through the door, it's the weakest point."
    "What'll they use?" someone asked.
    Then one of the techs had a revelation "I don't know," she
said "but I don't want to be standing here when we find out."
    With that, the team looked at each other for a second then
grabbed their wounded started running down the hallway away from
the main corridor.  The walls and ceiling suddenly shook
violently and a blinding white flash blew down the main corridor
carrying the door, adjacent walls, ceiling and part of the floor
with it.

--------------

    The escape pod thundered open from explosive bolts allowing
a black suited figure to roll clear of the contraption.  She
crawled to a near by wall and sat against it trying to run
diagnostics on her pressure suit.  Most EVE systems were down,
greatly limiting her vision.  The suit's communication systems
were also off line.  After running all of the diagnostics,
Valerta opened her pressure suit to the environment, no need to
waste life support.
    Valerta stood up with a phaser in hand, she leaned against a
wall still dizzy from the fall.  A large path of destroyed
dividers stretched out in front of her, flattened by the crash.
    Then hopefully Valerta said "Home, this is Lieutenant
Valerta, over."
    Harsh static was the only reply "Now what?" Valerta said
aloud but still there was no reply.
    "First order of business." She started thinking to herself.
"Figure out where I am.  Then how am I going to get out of here?
Okay, one thing at a time, are there any landmarks I recognize
from the reports?"
    Valerta looked around, trying to see beyond the debris of
the dividers.  She could see nothing obvious so she started
climbing through the trail of destruction she'd made in her
landing.  If she could find the elevator, she may be able to get
beyond the beam out shielding.  Then all she would have to do
would be to figure out a way to signal the Vigilante.
    All corridors seemed to connect to a center passage which
lead Valerta to the elevator.  She was soon on the next level up
and dwarfed by the massive girders in storage there.
    Things had changed from the reports she had seen.  The
girders and beams were no longer neatly stacked but tipped over
or at least listing.  This was the main level she had dropped by
on her way to the barracks, the stacks must have blown over from
the decompression in the tunnel.
    Valerta continued to try to raise the Vigilante but to no
avail, her systems were either too damaged or the Borg had
raised more interference shields.  She was about to take off her
flight suit in the hopes that she would become visible to scans
when something stopped her, a sixth sense told her she was
forgetting something.
    The middle of the room was suddenly filled with explosions
but the distance and stacks of beams protected the pilot.  The
ceiling high above Valerta's head was engulfed by flame.
Instead of debris crashing down into the room, a strong wind
started blowing towards the destruction.  Valerta barely had
time to grab the edge of a beam as she was picked up by the
sudden fury.  The stack of beams she clung to shifted some but
wasn't about to be lifted or moved.
    There was a new noise, a roaring sound was quickly growing
from above.  Out of the flame and debris from the explosions.
Valerta could see the egg shaped shields of a drop ship shimmer
and disappear.  Lieutenant Commander Kartang in DS One was on
his way to finish what she had started.

    Kartang watched the maze of girders approach.  The auto
navigation systems immediately oriented the ship toward the
entrance to the tunnel.  Kartang accelerated toward the opening,
skimming across the stacks of girders with the shields sparking
as he glanced off them.
    DS One cleared the girders then nose dived to fit the
entrance of the tunnel.  The Borg had not repaired the tunnel as
it was irrelevant so the drop ship had a straight drop to the
Barracks.
    Kartang's scanners immediately told him that there was a
large hole where the door to the barracks used to be.  There
also appeared to be signs of life but there was a lot of
interference.
    "Team Three," he said hopefully "this is DS One do you
read?"
    There was a brief pause as the drop ship rushed toward the
Barracks.  "DS One, this is ....three...dr" came the broken up
reply from Lieutenant Whitecloud. "Six survive."
    "Prepare for extraction." Kartang said as he swung the ship
around to drop the back into the hole in the barracks.
    "Acknowledged." came Whitecloud's simple reply.

    As soon as they punched the second hole in the deck, the
area the Vigilante was in came under heavy fire from the probing
energy beams.  For all of its advance technology, the Vigilante
did not have the ability to manuver quickly in a tight spot.
For all of its tremendous size, in galactic terms, the outpost
was still a tight spot, a very tight spot.
    The Vigilante shuddered as another energy beam glanced off
its side shields.  The near hit was immediately followed by a
series of much stronger beams in the same area.  Ensign O'Malley
was barely able to get the ship out of the epicenter of the
strikes but the Vigilante still shook under more direct hits.
    "Damage report" Anthony yelled as his ship took the first
hits of its career.
    Commander Norton immediate responded "Sir, the shields are
holding at ninety five percent, no damage reported so far."
    "Do the Borg appear to be trying to adapt to our shield
frequencies?"  Anthony asked leaning hard in response to a hard
evasion turn.
    "Yes, Sir," Norton said "they are using new frequencies in
an apparent attempt to predict our random shield frequency
shifts."
    The evasive maneuvers O'Malley was using were basically
random but designed to keep the Vigilante in the general area
for drop ship retrieval.  The Borg, however, soon figured this
out and a wall of energy appeared ahead of them and started
sweeping in their direction.
    "Captain," S'Erlet said from OPS "the curtain of energy the
Borg have put up consists of thousands of energy beams all
rotating frequencies.  When it contacts us, the odds are ninety
five point two to one that more then one beam will penetrate our
shields."
    Anthony's response to this new development was immediate
"Helm, set course out of this place, warp five."
    O'Malley turned and looked at the Captain "But Sir.."
    "But nothing!" Anthony said loudly "Engage!"

    DS One landed heavily in the ruins caused by the destruction
of DS Twelve.  Before the ship had fully rebounded on its
shocks, the troop door in back dropped open.  The remains of the
drop team three, with their Borg souvenir, scrambled aboard
before the steam from the troop door's release valves had
cleared.
    As soon as all of the team was on the door or further, they
were yelling "Go, go, get us out of here."
    The troop door had just snapped shot and Kartang was
applying power to the thrusters when the outpost shook
violently.  Kartang looked up in time to see the upper deck blow
away.

    The hole DS One had come through was sealed soon after the
drop ship had found its way out of the store room.  Valerta
immediately began formulating plans to attract attention.  She
would use a high power break down sequence in one of her phasers
to attract the attention of the Vigilante's scanners.  She was
running toward the center of the room setting the self destruct
when the Vigilante jumped to warp to escape the outpost.

    The Vigilante's four powerful warp nacelles instantly
propelled the ship out the hold.  At the same time, the deck of
the outpost was caught in the warp field.  A path from the
Vigilante's position all the way out immediately lost structural
integrity and blew apart.

    DS One was blown toward the rupture with along with
everything else that wasn't securely bolted down.  Kartang
struggled to maintain control over the rapid ascent and stay
clear of the other debris.  He figured he was doing an adequate
job since all systems were still on line.

    Valerta, never knew what happened.  Everything in her area
was instantly blown out of the Outpost.  Hurtling helplessly
into the immense hold of the Outpost, Valerta totally forgot she
was still holding the phaser she had set to self destruct.  She
was sure she could see DS One heading right for her just before
everything went white.

    Kartang averted his eyes slightly from the explosion.  He
thought that he had seen a drop ship pilot's pressure suit, but
it was gone now.  He quickly returned his attention to his job
and accelerated through the remains, aiming toward what looked
like the exit.

    The Vigilante skipped through space stretching its warp
muscle for the first time in quite a awhile.  Ensign O'Malley
had set a wild randomized course away from the outpost then
back.
    "When we get back to the outpost, take up a parking position
below the thing and begin scans for the drop ship."  Anthony sad
as soon as they had determined that they had not been followed.
    "And Ensign." the Captain said almost as an after thought
"I'd like to see you in the Command Room as soon as we've taken
up station."
    "Aye, Sir." O'Malley responded stiffly.

    Janice stood stiffly just inside the command room.  The door
snapped shut just behind her, brushing her baggy uniform.
    Captain Anthony sat leaning back in one of the chairs with
hands gripping the arms of the chair.  He was turned looking at
his reflection in one of the windows.  "Ensign." he said coldly.
    "Yes, Sir."
    Anthony turned slowly and looked at the skinny red head.  "I
recognize that it is part of the bridge crew's duty to remind me
of any facts I may have missed."  He leaned forward slightly
glaring at her. "However," he continued "don't ever question an
order in an emergency.  Is that understood?"
    "Yes, Sir." O'Malley repeated in almost a whisper.
    Anthony turned back toward the window and continued staring
at the closed blast shields.  "Dismissed."
    Captain Anthony sat looking at the blank window.  His
imagination filled the darkness with flames and destruction.
Amongst the confusion he could see the woman he loved trying to
maintain control of a dying ship.  She stood at the weapons
station directing fire while the Borg cube cut The Nielson to
pieces.....
    Anthony felt a shaking sensation and the visions in his head
disappeared.  As his heads cleared the face of his first office
formed in front of him.
    "Sir," She said.  "Sir, are you all right?"
    "Yes, Commander." Anthony said very alert now "I'm fine."
        "We've picked up the transponder from DS One." Tarva
said "At least we know it has not been destroyed."
    "Have they responded to the hail yet?"  Anthony hoped Tarva
wouldn't notice him trying to worked the cramps out of his hand
from clenching the arms of his chair.
    "No, Sir.  We are only trying standard drop ship frequencies
so as not to jeopardize the Vigilante.  We are also broadcasting
our docking transponder in hopes that they will be able to
follow it in if they have lost communications."  Tarva watched
her captain massage his twisted hands but didn't plan to
question his state of health.
    "Very good, maintain present position until drop ship
coordinates can be confirmed or we make contact with DS One."
Anthony continued to look the Kalonian in squarely in her black
eyes. "Is that clear?"
    "Aye, Sir." Tarva said formally.  She then snapped a perfect
right-face and marched out of the room.

-----------

    After clearing the immediate debris from the decompression,
Kartang hung close to the out side of the Outpost.  He had no
idea what to do from here.  If the Vigilante had left them, it
would have been for the good of the ship and the mission.  What
would they do then.  A drop ship didn't have warp drives and the
nearest star system was years away at sub warp speeds.  Besides,
it was probably another system raped clean by the Borg.
    Kartang explored the endless side of the structure then
finally chose a spot to make plans from.  They needed to
consider their options then make a plan of action.  They didn't
have many choices, but wanted to make the best choice for the
overall mission parameters.
    They really didn't have time to come to any real decision.
After a day, the ship's computer indicated that "the Vigilante
was ready for them to complete final docking maneuvers".  The
computer's simple message came from intercepting the Vigilante's
docking beacon.  It was all Kartang needed to find the Vigilante
and finally complete the rescue mission.
    It wasn't long before Kartang completed his final approach
to the Vigilante.  Medical and technical teams were all on hand
to meet them.  Utlin was transported directly top sick bay, he
had fallen into a deep comma and some on the drop ship had
thought he was dead.
    Whitecloud was conscious but showing signs of extreme
illness from her injuries.  She was taken with the rest of the
drop team to sick bay.

    Tarva entered the command room and stood at attention at the
head of the conference table.  Captain Anthony sat in his usual
place at the other end studying reports from the technical
surveys.  "What's the prognosis".  Anthony said after finishing
the current screen of text.
    "Sir," Tarva said formally "of the six surviving members of
Drop Team Three, only Lieutenant Utlin has any permanent
injuries."
    "Will he be able to resume any kind of active duties?"
    "Physically, yes, mentally, we can not tell.  Its only been
five hours since the rescue and he is still in a deep coma."
Tarva sounded deeply concerned.
    "Do we have any facilities for fitting him with
prosthetics?"  Anthony seemed distracted by the information
still on his screen.
    "No Sir," Tarva replied "the Vigilante does not have the
facilities to properly fabricate the bionics or tissue cloning
most commonly used in cases like these."
    "Are there any other options?" Anthony continued to page
through the notes on his terminal.
    Tarva hesitated for a second.
    Anthony sensed this and looked up "What is it?"
    "Sir," Tarva said apprehensively "some of the Med-Techs have
suggested using some of the mechanisms from the collected Borg
relics to build a replacement for Lieutenant Utlin's arm."
    Anthony sat back tapping a light pen on the table.  "He
might have objections to such an idea, for both personal and
religious reasons."
    "We are aware of that Sir, that is why I hesitated putting
the option forward."
    Captain Anthony sat back in his chair and stared at the
ceiling.  Then finally said "tell the Med-Techs to begin
researching and preparing the project.  But also tell them not
to do any work on the Lieutenant until he can competently give
his permission.  They should, however, be totally prepared if he
is willing."
    Tarva smiled slightly "Yes, Sir."  Then was about to leave
when Anthony interrupted her in mid turn.
    "Oh, and by the way." he said casually.
    "Yes, Sir" Tarva said regaining her position.
    "Have helm lay in the new course Sigma-Nu, and have the
Vigilante and crew ready for warp in thirty minutes."  Anthony
said.
    Tarva considered for a second then smiled and said "Aye,
Sir, and may I ask where we're heading?"
    Anthony turned and pointed to a diagram of the Outpost with
its three main communications relays mapped out.  "All of our
surveys of these arrays indicate that the information being
broadcast is not symmetrical.  The middle array appears to
rebroadcast the information patterns provided by the other two
arrays.  The other two arrays only appear to repeat what comes
in on the middle array.  This leaves us to believe that the
middle array is connected to a controling force."
    Anthony smiled at his executive officer "We're going to
follow the middle signal to its source."


I have no doubt at all the Devil Grins,
As seas of ink I splatter.
Ye gods, forgive my "literary" sins-
The other kind don't matter.
-- Robert W. Service
                   T H E   V I G I L A N T E

                               VI

                         "Full Circle"



     Just think! some night the stars will gleam
       Upon a cold, grey stone,
     And trace a name with silver beam,
       And lo! twill be your own.

     That night is speeding on to greet
       Your epitathic rhyme.
     Your life is but a little beat
       Within the heart of time.

     A little gain, a little pain,
       A laugh, lest you may moan;
     A little blame, a little fame,
       A star-gleam on a stone.
                    "Just Think"
                    Robert W. Service



    A light mist filled the air.  A bright green meadow stretched
into the distance.  The carpet of flowing grass and wild flowers
was broken by a thin brown path winding through the rolling
hills.
    The grass shuddered and swirled away as a lone figure
strolled along the path.  He walked slowly with his hands out to
either side feeling the light touch of the tall seeding grass.
His long red cape fluttered out behind him, sweeping the grass
underneath it.  A thin sword hung from the man's belt, nearly
touching the ground behind him.  The man's black,
leather-accented uniform was tailored to fit exactly.  Every
crease and seam was meticulously pressed and lined.
    The man cut the perfect figure of a soldier.  His body was
thin but muscular.  His short black hair stood straight up.  The
man's features were sharp and angular, with several old scars
high-lighting his cheeks and neck.  His skin was a healthy brown
from the constant presence of the small planet's two suns.
    The soldier stopped at the top of a small rise to scan the
fields around him.  His bright blue eyes drank in the beauty of
the rolling hills.  Sir Utlin Robe'than felt the peace of
Tregamalis, it had been a lifetime since he'd been here, but it
was still home.
    He could sense movement behind him.  Coming up the path was
an old man in simple peasant's robes.  The man looked old and
frail.  He was mostly bald but had long waist length hair from
ear to ear.  He carried a twisted black branch as a walking
stick, but didn't seem to need it.  The old man quickly made up
the distance between himself and Sir Utlin.
    With shriveled eyes and skin pulled tightly about his bones,
the old man looked like a skeleton.  He approached Sir Utlin and
looked up at the proud and bloodied warrior.  The man's feeble
looking hands tightly clutched his walking stick.  He continued
down the path and motioned for Utlin to follow him.
    When Utlin caught up, the man asked "What do you seek, My
Son?"
    "I seek peace."  Utlin answered softly.
    "Why do you seek peace, My Son?" the man asked "Is it not a
soldier's duty to seek out conflict?"
    "It is a soldier's duty to maintain peace and protect it and
the people from conflict."  Utlin answered dutifully, wondering
who this old man was.
    "Then why are you here, My Son."  The man returned.
    "The conflict is over, there are no more of my people to
protect, it is time for me to enjoy the peace."
    "Who are your people?" the old man sounded confused.
    Utlin stiffened and said proudly "My people are the Children
of Lin'Hrlar."  He reflected on his recent past.  "I am the last
Warrior of Lin'Hrlar, and one of the last of his people.  I had
dedicated my life to the protection of my people, now they are
gone.  My job is over, it is time to rest."
    The man now looked even more confused "You're here after
battling for YOUR people?"
    "Yes."
    "But the people you were with, YOUR people, are still looking
for you."  the man's bright red eyes burned through Utlin.
    "They aren't Children of Lin'Hrlar."  Utlin insisted.
    "They aren't?!" The old man asked "Who then are they?"
    "They're aliens who had never heard of Lin'Hrlar."  Utlin
replied now confused by the old man's questions but trying to
stand his ground.
    "Then why were you with them?  Why did you suffer for them?
Why did you die for them?"
    Utlin couldn't answer the questions.  "I don't know." he said
and bowed his head turning away from the man.
    "Look at me, My Son." the old man said softly.
    Utlin turned back to the shriveled old man.
    "You've done well.  You've fought well for Lin'Hrlar and his
children.  But Lin'Hrlar has reclaimed most of his children."
    "I know," Utlin said "now it is my turn."
    "No." the old man said softly "Lin'Hrlar is not ready for
you."
    "What?"
    "Lin'Hrlar still has many plans for you.  It is in you that
the seed of his people still grows.  It is in you that the flame
of his soldiers still burns."
    "I do not understand." Utlin returned.
    "You will, My Son, you will."
    The pair approached another gentle hill.  Sitting on top of
it was a lone woman dressed in immaculate purple and gold robes.
Her long dark hair flowed down her back spreading out on the
robes circled about her.
    From the back, she looked familiar but Utlin couldn't place
her.  "Who is she?"
    "She is your," the old man hesitated "no, OUR destiny."
    Utlin reached out with his right hand to turn the woman
toward him.  As he touched the softness of her robes, pain shot
through his arm.  His hand and arm seemed aflame as they faded
from his sight, his world went black.

-----------

    A soft beeping sound grew in the distance as Utlin regained
consciousness.  His eyes opened looking for the sound that had
awaken him.  All he could see was the gray of a sheet covering
his face.  He was about to call out when the sheet was swiftly
pulled away.
    Utlin became aware of a confusion of voices around him.  One
of the voices came from the surgeon standing over him.
"Lieutenant, can you hear me?"  The man said.
    Utlin sat up and looked around "What's for dinner?"

--------------

    Commander Tarva stood in the command room across from Captain
Anthony.  Scattered on the table was an assortment of artifacts
taken from the Outpost.  Anthony was carefully reading one of the
analysis reports on the screen in front of him.
    Tarva cleared her throat after waiting for several minutes.
    "Yes, Commander?" Anthony said finally acknowledging his
first officer.
    "Sir, At exactly 1852 hours," Tarva began "Lieutenant Utlin
was officially declared dead.  All body and brain functions had
failed and he could not be revived."
    Captain Anthony sat back heavily "I'm sorry to hear that." he
said sincerely.
    "That's not all." Tarva said "At 1900 hours, Lieutenant Utlin
sat up and asked for something to eat."
    "Let me get this straight." Anthony said after staring at
Tarva for a few seconds "Lieutenant Utlin is in a coma for nearly
four weeks, dies then eight minutes later wakes up asking for
food."
    "Correct." Tarva said with a rare but genuine smile.
    "Amazing." Anthony remarked shaking his head and turning back
to his monitor "Thank you commander."
    Tarva immediately did a sharp about-face and exited to the
bridge.

-----------

    "Have you told him about 'IT' yet?" Janice asked her
ex-roommate.
    "He's only been awake for a couple of hours."  Anndrea said
to her friend.  Anndrea hadn't been extremely comfortable taking
a room by herself, since the attrition that allowed it came from
the losses in her own drop team.
    Janice stood up on the unused bunk and started pacing back
and forth.  The hard soles on her boots seemed to cut deeply into
the material but didn't do any damage.  "Do you think he's going
to object or something?"
    Anndrea watched Janice pace, "I don't think he'll object.  He
knows that in order to learn all we can, we take chances and
sometimes make questionable decisions."
    Janice stepped off the bunk, landing with a solid thunk, and
walked over to the console Whitecloud was working at.  "I can't
believe that after all this time the Lieutenant would just wake
up like that after being out of it for so long."
    "There's a lot of things we don't know about his people,"
Anndrea said "and we probably never will."

--------------

    Lieutenant Utlin sat in the infirmary bunk looking at the
medics looking at him.  They seemed so confused by the fact that
he had passed over then returned.  It was nothing, Lin'Hrlar was
not ready for him yet, so he was sent back.  It did happen
occasionally, perhaps not as often for them, but it did happen.
    Utlin stretched his left arm and examined it.  His hand
looked weak and pale.  He had been healing for a long time, he
was ready to start getting back into shape.  With this thought,
he looked at what was left of his right arm.  There was a bit of
arm left just below the elbow, but not enough to be of much use.
He guessed he'd have to adapt; more equipment could be configured
to attach to his arm, the controls in his fighter could be
reconfigured to work with the Federation's advanced computers, he
could think of many different changes he'd have to make to
accommodate the missing hand.
    The pointed eared female pushed her way through her staff and
stood next to Utlin.  "I apologize for the crowd, but they have
been working on you every day since the mission, and they are
concerned."
    "I understand." Utlin said in his dry unused voice.
    "Now we have some things to discuss." the female said "While
you were 'healing' we've been designing a possible replacement
for your missing hand."
    "What sort of replacement?" Utlin asked, he'd never heard of
replacing a missing limb, you just learned to adapt or you would
be slain.
    "It is called Bio-mechanics," The female began "we have
designed a mechanical arm to replace the one you have lost."
    "Sounds good, how does it work and when can I have it?"
    "Well there are a couple of problems." The doctor said.
    "Such as?"
    "First, we did not have the proper materials to create an
exact duplicate arm, so the one we did design looks mechanical."
    "Who's going to notice where we're going?"
    "There is something else you should know." the pointed ear
doctor hesitated for a second "Many of the parts we used came
from the Borg specimens we retrieved from the Barracks."
    Utlin was quiet for a second then smiled slightly "How
appropriate that we should start assimilating them."

-----------

    Utlin had been awake for two days and already had his new arm
in place.  He had seen very little of the rest of the crew except
for Lieutenant Whitecloud who made a point of visiting him
several times a day.  There seemed to be something she wanted to
tell him but couldn't.  Utlin figured that she would when she was
ready.
    Utlin was walking slowly around his room, re-learning to use
his legs when Anndrea signaled and came in.  "How are you doing?"
she asked as she approached.
    Smileing, Utlin replied "Well the legs still seem to work."
he then held up the black metal mechanical hand.  "This thing
even appears to be functional."
    "How about a walk?"  Anndrea suggested
    "Sure, what's going on?" Utlin asked as Whitecloud headed for
the door.

    Anndrea led her friend to an area of the ship that he had
never had business in before.  After passing through several
security check points, they arrived at a holding area with a lot
of activity.
    "What's going on here?" Lieutenant Utlin asked as they
entered the room.
    Just as he spoke, The Lieutenant turned a corner and came
face to face with a Battle Borg.  The Borg was standing in a cell
in the brig, it was held back by a strong force field.
    "By the Cape of Lin'Hrlar." Utlin exclaimed "Where did this
thing come from?"
    "We brought him out with us." Anndrea said "We thought he was
killed by photon grenades, but the techs in the infirmary were
able to bring him back."
    The Borg stood in the middle of his cell, absolutely still.
He ignored all of the activity beyond the force field.
    "Does he move?" Utlin asked.
    "Just to connect up to the power and recharge his batteries,
once every five hours or so." One of the techs said.
    "Then he goes right back to were you see him now." someone
else added.
    "That's it?" Utlin sounded a bit surprised. "There's been no
communication, nothing?"
    "Not a word." Whitecloud confirmed.
    "Perhaps he's damaged from the blast."
    "We don't think so." Anndrea replied "All of his biological
and mechanical functions check out."
    "This kind may be incapable of individual thought." One of
the tech's put in.
    "That's not true." Utlin said holding up his mechanical hand
"The one that did this to me spoke in the first person."
    One of the techs interrupted "Sirs, look at him."
    The Borg was looking directly at Utlin listening to what he
was saying.  "We've never been able to get his attention before,
no matter what we did."
    Utlin faced the Borg and looked him in the eyes "Identify."
He said to the creature.
    The Borg tilted its head to one side for a moment then said
in a mechanical voice "I am unit Three Two Five Eight of 30 Kil."
The thing then added "You have been identified as Sir Utlin At
Your Service Sir, an intruder."
    "That is how one of your units identified me, but I am not an
intruder."
    The Borg looked at Utlin questioningly "Was this
identification in error?"
    "Yes."
    "What is your proper identification."
    "I am Lieutenant Utlin Robe'than."
    The Borg considered this new information for an instant then
returned to his original blank stare.
    Everybody in the room knew they weren't going to get any more
conversation out of it, but Utlin persisted.  "What is your
function?"
    "My function is to follow the collective into battle."  The
thing said.  It then walked over and stood directly in front of
Utlin.
    There was some commotion in the outer chambers and they heard
someone call out "Captain on deck."
    Three Two Five Eight ignored the people in the room coming to
attention and continued to address Lieutenant Utlin.  "Lieutenant
Utlin Robe'than, what is your function?"
    Utlin hesitated, he knew that Captain Anthony was monitoring
this conversation from the outer office and Utlin didn't want to
say the wrong thing to the enemy.  "My function is to communicate
with and learn about other cultures."
    "Other Cultures are irrelevant."  Three Two Five Eight
stated.  "In time, all is to be ruled by the Borg."
    "Lieutenant," came Captain Anthony's voice.  The Captain
stood beside Utlin. "What do you have for me?"
    "Captain, Sir, this is Three Two Five Eight of 30 Kil." Utlin
stated trying to make a formal introduction.  Utlin then turned
to address the Borg but it spoke first.
    "You are Captain Robert Anthony, Captain of this Starship."
It stated.
    Anthony was not surprised that the Borg knew his name.  "So
you were aware when we were originally trying to communicate with
you?"
    "That is correct."
    "Why didn't you respond then."
    "My systems could not find a point of reference for response.
Lieutenant Utlin Robe'than helped me key into the data down
loaded from the collective before I was damaged."
    "Are you willing to talk with us about the collective?" the
Captain asked.
    "I have been deactivated for a long time.  The Collective has
expanded beyond its original intent.  I am not a member of the
current collective."  The Borg said dryly.
    "Is that why you were fighting after we awakened you?" Utlin
asked.
    "We are not members of the current collective.  They intended
to assimilate us.  We are not assimilated, and we do not
assimilate, we conquer."

--------------

    A Command Staff meeting was called to discuss the information
provided by Three Two Five Eight.  Captain Anthony, Commander
Tarva and the other members of top command met in the Command
Room.
    "He's lying!" Golta growled, "He wants to confuse us with
contradictory information."
    "The Borg don't lie." Commander Norton returned "They don't
have to."
    Captain Anthony agreed "We are irrelevant to them.  To lie to
someone acknowledges relevance.  We must consider that this Borg
is telling us what it perceives to be the truth.  We must combine
that with what we know about the Borg and try to draw some
conclusions."
    Anthony scanned the assortment of officers in the room then
continued.  "I want everybody to continue to analyze what we've
already learned.  We need to know all we can for our next
confrontation.  Focus on your own specialties, how can you
interpolate what we have so far.  I need as many points of view
as possible, the smallest detail could determine if we survive
this mission."
    Captain Anthony finished speaking to the sound of the
intercom piping on, the yellow alert warning sounded and Ensign
O'Malley's voice came over the speaker "Captain to the Bridge."

---------------

    The whole command crew exited the Command Room directly onto
the bridge.  Captain Anthony was the first out and headed to his
center seat.  "Report!" he sad to no one specific.
    Ensign O'Malley turned her chair slightly so she could look
back at the Captain but still cover her console.  "Sir, we have
detected twelve vessels on long range scanners, all moving at
high warp.  Three are heading in our general direction, the
others are to our extreme sensor range heading in the direction
we are."
    The Captain turned to S'Erlet at the science station.  "Do
you have an analysis of those objects yet?"
    "Sir," The young Vulcan began "The ships are currently too
far away to do a detailed analysis, but their size and other
characteristics indicate possible Borg influence."
    "How long till you know for certain?"  Anthony asked turning
back toward the sensor display on the screen.
    "At current velocity," S'Erlet stated "I will be able to tell
conclusively in four minutes 15 point 5 seconds."
    "Okay," Anthony said "go to red alert.  I want everybody at
battle stations."
    All over the ship, the blast shields were lowered and the
lights were dimmed.  The crew took their places in the rough duty
seats while security donned Class One mission gear and took
positions in strategic areas.
    S'Erlet soon confirmed that the ships they were monitoring
were indeed Borg vessels.  The ships coming towards them were not
responding to them but were on a trajectory by them.  S'Erlet's
analysis also revealed that all paths came from or headed to a
common point.
    "We should be able to make preliminary scans of the origin
point in one hour twenty one minutes." S'Erlet informed the
bridge.

    Things were suddenly moving quickly.  The crew of the
Vigilante had gone from seeing the occasional sensor blip to a
whole screen of them.
    "How many do you read now?" Captain Anthony spoke directly to
his navigator.
    "There are now one hundred and seventy five vessels on the
long range scanners."  Ensign O'Malley tried her best to make her
report with little emotion.
    "Slow to warp 5." said Captain Anthony then turned to his
first officer.  "We're going in slow so we have time to analyze
and prepare for what's ahead."

    In the weeks that followed the atmosphere on the Vigilante
was extremely tense.  Everybody waited for the green shimmer of a
Borg transporter bringing a boarding party.  The bridge crew was
ever on the alert for one of the passing cubes to divert it's
coarse to inspect this tiny intruder.  None of it happened.  The
Vigilante sailed smoothly ever closer to what appeared to be the
center of Borg activity.
    Life on the ship was as normal as it could get.  The drop
teams and pilots trained endlessly.  There was no "good enough"
or "we're ready".  Every member of the Vigilante's crew was a
professional warrior though some wouldn't admit it.

    Ensign O'Malley sat in the drop ship simulator after
completing one the hardest testing batteries.  She pulled herself
up out of the top hatch and removed her helmet.  Her short red
hair was plastered to her forehead with sweat.
    Lieutenant Commander Kartang stood outside the simulator with
his arms folded across his chest.  The forced frown he wore told
O'Malley that she probably didn't do as well as he had expected.
"If that had been a real mission you, your co-pilot, and a whole
drop team would have been lost!" he growled at her.
    "I am not a Drop Ship Pilot" O'Malley stated simply "I'm a
Starship navigator."
    "You, Ensign, are one of the few backup pilots we have.  If
anything goes wrong, your skills may be needed to save many
lives." Kartang shot back at her with an even more menacing
growl.
    "Sir" O'Malley returned "I hope your highly trained
professional drop Ship Pilots don't need the services of this
'under-fed', female, human navigator to get their hides out of
the fire."
    Kartang stood blankly in front of O'Malley for a moment then
growled "Dismissed."  He watched the human turn crisply and walk
away from him.  The tests at this level of training were designed
to be nearly unsurvivable.  The intent was not only to push the
pilot's skills to the maximum but also to see how that pilot
dealt with defeat.
    On the mission O'Malley had just nearly completed, Kartang
failed one time out of five.  He would be proud if she were a
member of his team.  But he was glad she wasn't, skinny human
females who showed no fear of him and sometimes little respect
made him nervous.

    Ensign O'Malley entered Lieutenant Whitecloud's quarters
after signaling.  The Lieutenant sat cross legged on the floor in
front of a large painting.  She wore her baggy black workout
robes and a red band was tied around her head to keep the hair
from her face.
    Whitecloud looked over the top of her painting at her former
roommate.  "You've been running the flight simulator again, I
see."
    O'Malley let out a growl of frustration and threw her helmet
into one of the rough duty chairs.  "Kartang treats me like one
of his mercenaries when I'm down there.  I agreed to do it
because I thought it would help me blow off some steam, instead
that Klingon is making me even crazier."  Janice paced back and
forth through the room as she raved.
    Janice stopped behind Whitecloud and looked at her painting.
It was a picture of Sir Utlin's ship _Star Controller_.  The
vessel was in the middle of launching a swarm of fighters.
Looking at the meticulous detail helped O'Malley calm down, she
dropped into a nearby chair let out an audible sigh.
    Anndrea turned around and looked at her guest "Janice, we'll
be approaching the Borg system in two days.  You've got to relax
and focus on what's ahead of us.  The fate of the Vigilante may
rest on your being able to execute your duties flawlessly.
Forget about Kartang, his job is to push you beyond your limits."
Whitecloud then smiled "He appears to be doing quite well at it
too."

    Captain Anthony sat alone in the Command Room studying the
reports of the approaching system.  Anthony hadn't ventured past
the Bridge in more than two days and had spent the majority of
that time in the command room.  He could feel his body slowly
giving up to exhaustion but he refused to acknowledge it.  The
terminal he was reading from began to blur and he thought he
could smell smoke.
    The room was suddenly filled with noise and confusion.
Looking up from the monitor he tried to figure out what was going
on.  He was no longer in the Command Room but a place much more
familiar, it was a place he knew he'd never see again.
    Red alert and other klaxons bellowed and crew scrambled to
cover emergency stations.  This was the bridge of the U.S.S.
Nielsen and standing at one of the fire control stations was a
woman who looked very familiar to him.  The ship rocked from a
strike, everything shook and the crew struggled to maintain their
balance but Captain Anthony couldn't feel it.
    The woman barked orders to those about her while maintaining
control of the targeting computers.  Anthony watched the crew
struggle to maintain their balance while the ship took sharp
evasive maneuvers in response to the woman's orders.  The
inertial dampening fields must be damaged he thought else the
crew wouldn't be reacting so severely to the maneuvers.
    Suddenly, everything was still.  The woman turned and looked
at Captain Anthony.  She pushed her shoulder length light brown
hair out of her face and walked over to him.  "Robert, why are
you here?" she asked.
    "I don't know." he replied "I was in my command room on the
Vigilante and the next thing I knew I was here."
    "Come with me." she said and walked over to one of the
consoles.  After pushing a few buttons, the main screen changed
from a tactical display of the area to a distant shot from a
probe.
    There were starships everywhere.  Some were intact others
were hulks and shells.  In the middle of the destruction was a
single Borg cube.  The woman pointed at the screen "This, my
love, is my destination," she said passionately "not your's."
    "I should have been here, it was my place to be here by your
side."
    "Listen to me," she replied "you must honor my death with
your life.  I am a part of you I always have been, always shall
be.  Honor our life together by making the most out of yours."
    "I love you." he said forcefully.
    "I'll always love and be with you." she replied then the
Nielsen shook violently and exploded.
    Captain Anthony woke with a start as the Vigilante rocked
again.  He ran to the bridge to the sound of the red alert
klaxons.  The ship rocked under his feet as he arrived.  "What's
happening?" he demanded.
    Tarva stood looking over S'Erlet's shoulder watching his read
outs "Unknown, Sir," She replied immediately "but it does not
appear that we are under attack."
    "Helm, dead stop." Anthony commanded then took his seat as
the ship rocked again.  "Any casualties?"
    In this kind of situation with the captain in direct command
of the bridge, it was Commander Tarva's duty to monitor all ship
board functions and activity.  The captain basically operated
through her.  "Sir, medical reports no casualties."  Tarva smiled
at this.  She knew that all over the ship personnel probably
suffered minor cuts and bruises from the unexpected jolting but
this crew would never think of complaining about it.
    Ensign O'Malley reported that they were at dead stop.  The
crew then waited for the next jolt.  It didn't come.
    Captain Anthony reviewed reports coming in about the current
situation then asked "How far are we from the Borg system?"
    O'Malley replied "At previous warp, we are 32 hours from the
Borg system."
    The captain suddenly turned his attention to their
destination.  "Can we see it yet?"
    O'Malley checked some readouts then said "Yes, sir, the Borg
system should be visible."
    The Captain smiled slightly "Put it on the main screen."
    Janice pushed a couple of buttons and the main screen
switched from its tactical displays to a star field.  The field
then began to change and a single star stood out in the middle.
At first it looked like any other star, then as the magnification
brought it in closer, there was a noticeable blink.
    "Its pulsing." Tarva said.
    "According to the scans," O'Malley stated "the pulse is
caused by a large number of objects orbiting the star."
    "That's impossible." Tarva said "I've never heard of any star
system with that many planets."
    "Commander," O'Malley replied "I didn't say they were
planets."  she then put a tactical chart of the system on the
screen.
    The tactical charts were created using data from all scanners
and could be quite a bit more detailed than standard visuals.
The chart of the Borg system showed the star surrounded by a
cloud of planetoids and debris.
    While waiting for S'Erlet and other members of the science
teams to determine what was causing the buffeting in warp, much
of the crew focused their attentions on the Borg system.  The
most accepted theory was that the system was filled with a
millennia of debris from Borg conquests.  What ever the reason
for the state of their system, the Borg ships continued to come
and go at high warp.

    After several hours of study S'Erlet believed he knew the
reason for the shaking.  "The turbulence is caused by a
degradation in the fabric of space."  he reported to the bridge
crew.  "It has been caused by hundreds of years of high warp
travel over the same routes."
    "Are we going to experience it all the way into the system?"
the Captain asked.
    "If we continue at the lower warp speed, yes. However, if we
travel at warp nine or greater we should not feel the effects as
severely."  S'Erlet replied.
    "At warp nine," Captain Anthony said aloud to himself "we're
less then ten minutes away."  He then turned to his First
Officer. "Commander Tarva, sound general quarters, we're going
in."

    The outer sphere of objects clouding the Borg sun was a
network of outposts. The outposts the Vigilante scanned had the
same dimensions and surface map of the one they had visited.  The
traffic of Borg ships appeared to be concentrating on these
stations.
    Beyond the outposts, the system was a cloud of debris and
planets orbiting the Borg sun.  The first layer the Vigilante
scanned consisted mostly of refined metal and other materials
that did not occur naturally.
    The Vigilante took a close parking position next to one of
the outposts while they completed their initial scans of the
system.  It had been their experience with the first outpost that
the senors on these installations did not work well in close
proximity.
    All non-gaseous planets in the system were strip mined like
the planets the Vigilante has surveyed upon arrival in the
quadrant.  The mining of these planets, however, was not nearly
as efficient and they were also showing several thousand years
more weathering then the other planets.
    "Sir," Ensign O'Malley reported "I am reading one planet that
has not been mined."
    "Lets see it." the Captain said immediately diverting his
attention to the main screen.
    "The computer is extrapolating now." O'Malley said.  On the
screen, the picture of a dark gray-blue planet began to flicker
as the computer pieced a view of it together through the debris
of the system.
    For an M-class at the current magnification, the crew
expected to see the out line of land masses and weather patterns.
Instead, the planet appeared to be a single swirling mass of dark
gray clouds.  O'Malley adjusted the sensor frequencies filtering
the clouds, the computer extrapolated the new readings into a
fresh view of the planet.
    Instead of the naturally flowing forms of continental land
masses, the picture showed a grid work of construction.  There
were no shores or mountains, no sign of agriculture or unused
land, everything was covered.
    "My God." The Captain whispered "The whole planet is built
over."

-----------

    Lieutenant Utlin had sat with the drop teams in their meeting
room watching the Vigilante's progression through the Borg
system.  They had detected very limited travel activity within
the confines of the system.  It was hypothesized that the Borg
had over grown and abandoned their home planet for the network of
outposts.  There was, however, a very strong Borg link signal
coming from the over-grown planet.
    The progress was extremely slow.  The ship had to be guided
on a path so as not to disturb any of the debris.  If they bumped
anything or created a wake, it could give them away.
    Utlin and Whitecloud  wandered out of the meeting room and
into Cavern.  In the locker room, the A-Drop Teams were preparing
the mission armor.
    "Do you think the Captain will use any of us this time
around?" Lieutenant Utlin mused.
    "If he gets a chance I know he'll send some of us in."
Anndrea replied.
    "Don't you think we'll get close enough?"
    "We barely made it out of the Outpost" Whitecloud replied.
"The Borg know something is out here and they know how to detect
us.  All that's left is for them to know were to look."

    Everyone on the bridge held their breath as the Captain read
the initial reports on the system.  Now was the moment of
decision, he would either decide to head into the lions den right
away or they would sit and analyze the system for weeks as they
had done on there approach.  Nobody knew what the Captain would
do, but they were all getting tired of sitting around watching
the Borg fly back and fourth.  They had been tracking the Borg
flight patterns since leaving the Outpost it was time to do some
real exploring.
     Captain Anthony turned to Ensign O'Malley "Ensign, plot best
course and speed to the Borg planet so as to achieve zero wake in
the Borg debris field.  What is the estimated time to have that
ready?"
     Ensign O'Malley processed the course parameters then replied
"Computer estimates it will take thirty seven minutes to plot a
course with zero wake keeping impulse power over ten percent."
     "Very good." The Captain turned to Commander Tarva
"Commander , you have the bridge.  I'll be in the Command Room."
     "Yes, Sir." Tarva replied and watched the Captain stride
into the Command room.



     Upon arrival at the Borg system Lieutenant Utlin felt a
great pull to visit Lady Purlerna.  They were in now at the front
door of the creatures that had destroyed their world.  Lin'Hrlar
had brought them both here for a reason.  What was his plan?  Did
they have a mission here, or was their survival more basic?  Were
they meant to be the re-genesis of Lin'Hrlar's flock?  When these
thoughts cross his mind, Utlin couldn't resist the urge to visit
Purlerna.  Could he ever except the fate of excepting this female
as his Companion?
     The Lady sat in her outer chamber listening to some obscure
Federation music.  Utlin sat on a small bench across from young
lady.  She was a magnificent sight in her red and gold robes and
long flowing hair.  She had put on some weight and looked fit and
healthy.  She continued to scan what ever it was that held her
attention on the computer and fashionably ignored him for a few
minutes.
     Finally she pretend to finish or grow bored with what ever
she wasn't reading on the screen and turned to Utlin.  "I am
pleased you have come to visit, my Future Companion."  she said
softly.
     "We haven't had much of a chance to talk since my return."
Utlin said "I came to see how you have been."
     "I am quite well." Purlerna said "I am, however, becoming
quite bored with this cruise.  My attendants are very slow to
respond to my calls and always act as if they are doing me a
favor."  she sighed slightly resigned to her fate of having such
poor help.
     "What kind of instrumental are you listening to?" Utlin
asked trying to carry the conversation.
     "Something from a period call 'Terran Mid-eighteenth
Century' I've never heard of it before, but it is relaxing."
Purlerna stood and swirled her robes about as she turned toward
the replicator.  "Are you hungry? we can have something
delivered, at least the food service on the vessel is top notch.
     Utlin panicked, she had never been this nice to him before
and he started thinking about the 'future companion' comment she
had just made.  "No, I'm not hungry, thank you." he replied
quickly as he stood.  "I really must be going, I have duties
elsewhere."  He headed toward the door while she was still across
the room from him.
     Utlin  felt a surprisingly strong grip on his arm that spun
him away from the door.  It was Lady Purlerna, she must have run
across the room to catch him.  Her eyes were wide and very lucid.
For the first time in many weeks she looked like she had come out
of her fantasy world.  Her fear was very evident.  "We must leave
this place." she plead.
     "What?" Utlin wasn't sure if she knew what she was talking
about.
     "They know we're here." Purlerna said "They've been waiting
for us. Tell the Lords of this vessel, tell them we must leave
this place,...please" she started begging and dropped to her
knees, clutching Lieutenant Utlin around the legs.  "Please," she
sobbed, "we must leave here...we must."

----------------

     Not long after Lady Purlerna had to be sedated the Vigilante
started its slow trek into the Borg system.  The course the
computer mapped out would get them to the Borg 'Home World' in 5
days.
     The crew was more on edge now than when they had entered the
Borg outpost.  Nobody knew how the Borg would react to an alien
vessel entering their system.  Would they consider it irrelevant
as they seemed to consider everything else, or would it be enough
out the ordinary that it would warrant investigation.  Nobody
seemed to notice that the Vigilante traveled with its cloaking
activated, it was assumed by the speculators that the Borg could
defeat the cloak.  The only remaining question was just how long
would it take the Borg to come to investigate.
     Captain Anthony and Commander Tarva were not nearly as
skeptical as most of the crew.  There was yet to be any evidence
that the Borg sensors could defeat the cloaking.  They were
making preliminary plans for surveying and exploring the Borg
planet when someone signaled at the door to the Command Room then
entered..
     It was S'Erlet "Sir, I've been tracking the movement of Borg
vessels in the area."  He began.
     "What do you have?" the Captain said turning his computer
display aside.  He knew that S'Erlet would not disturb them if it
wasn't important.
     "Since we began the final approach to the Borg planet, there
has constantly been five Borg cubes within two hundred million
kilometers of our position."
     "What!" Captain Anthony was suddenly very interested. "Are
you saying that we are being shadowed by five Borg cubes."

     "Not exactly." S'Erlet replied "The Borg flight patterns
keep that many vessels with in the sphere I described."
     "What does that mean?" Commander Tarva asked.
     "I mean, Sir, that it appears that we are being shadowed but
not by the same vessels.  The five are constantly changing
depending on what looks like normal flight paths."
     "Could this be a coincidence?" The Captain sounded very
concerned.
     "If we were stationary, yes," S'Erlet said "but we are
moving, and still continue to be the center of a sphere of flight
paths."  S'Erlet then produced the results of his statistical
analysis of the Borg flight paths.
     The Captain studied the data for a few minutes then called a
meeting of the top command staff.  It was obvious that the Borg
knew they were there and were going to great lengths not to show
it.
     The options were limited, continue with the current flight
plan until the Borg made their move, or exit the system with all
possible haste.
     "If we must leave now, we are not coming back." The Captain
said.  He wasn't arguing a choice of action, just brainstorming
the consequences.  "Our job is not to fight our way to the Borg
home world, it is to gather intelligence.  We now know more about
the Borg then the Federation could have ever dreamed of before
commissioning the Vigilante."
     "But to get this close and not actually go the Borg home
planet would be tantamount to failure." Tarva interjected "What
if they continue to ignore us?  What if this adjustment of flight
paths is their way of studying an anomaly without taking ships
away from normal operations?"
     Commander Norton then spoke up.  He normally remained silent
at these meetings unless addressed.  When he spoke, they all
listened "While we sit here discussing the intentions of the
Borg, they are studying us, they are analyzing us, they are
_Learning_ from us."
     The Captain turned and looked at his First Officer for a
second then jumped to his feet.  He headed to the bridge at a
dead run.

     "Ensign," Captain Anthony said loudly "plot a course out of
the system, best speed."
     "And the wake, Sir?" Ensign O'Malley ventured.
     "Damn the wake, get us out of here." The Captain paused in
thought for a second "Plot the course to head directly away from
were the closest Borg ships are headed."  Captain Anthony then
ordered the ship to Red Alert.  "I doubt they're going to let us
go peacefully." he added under his breath.
     The ship was already at battle stations, but at red alert,
they strapped in to the rough duty seats and closed the
restraints.  The guards and other security personnel took their
weapons off safety and brought them to full charge.  People were
already in their places for "silent running" now they were
hanging on, waiting for the fight to begin.
     "Speculate,"  the Captain said to the bridge crew "have they
pierced the cloaking, and, or the hull.  Can they scan us without
our sensors picking it up?"
     "Sir," Commander Tarva spoke up "If they could fully scan
us, wouldn't they have boarded or confronted us......"
     "Captain" Ensign O'Malley said "new course plotted and laid
in, Sir."
     "Thank you, Ensign, engage, full impulse."
     The Vigilante immediately took a sharp ninety degree nose
dive.  Even with the inertial dampening fields, a maneuver that
sharp was still felt by the crew.  Anybody who was not strapped
into their seats found themselves scrambling for support.
     The Captain had a hard time holding back a smile for Ensign
O'Malley.  She had plotted the exact course he had asked for and
threw the ship into it just as he had ordered.  Many commanders
would at least be annoyed with that kind of behavior, but he had
given this Ensign a lecture about second guessing him in an
emergency.  She proved she had learned her lesson well, it also
showed great self confidence in not looking for approval of the
drastic maneuver.  The Captain, of course, knew he had cleared
the way for her by not asking to see the course before ordering
it.
     "If tomorrow comes," Captain Anthony thought "I have a lot
of notations to make in the personnel records."
     With the Vigilante's sudden change of course and velocity,
the Borg vessels immediately broke their flight paths and headed
toward the ship.
     The Vigilante dodged through the debris field of the Borg
system at full impulse.  The path was not the most direct to open
space but was calculated to put as much distance as possible
between the ship and the Borg.  The Vigilante was using the star
system as a buffer between them and the Borg craft.
     The Borg took up immediate pursuit.  Within two minutes,
they could detect eight Borg cubes heading toward the vicinity of
the Vigilante's exit from the system.
     "Sir" S'Erlet spoke up "I'm reading a low level resitron
pulse emanating from all Borg outposts.  The pulse is acting like
a motion detector, it is how the Borg can track up."
     Tarva turned her chair toward the young Vulcan.  "How does
it work?"
     "All outposts are sending the resitron signal to all other
outposts. If they have the system accurately charted, they will
be able to detect any new movement or object."
     S'Erlet's consoled beep and he looked at new readings.
"Sir," he said "new data indicates a sub-space force field
connecting the outposts in our vicinity."
     "What effect will it have on us?" Tarva asked.
     "Uncertain, I'm analyzing now."
     "No need," Commander Norton said "Minimally, a sub-space
force field of this type will rip away our deflector shields and
it may rupture the hull."

     The Captain began typing at his console. "Ensign O'Mallley,
I'm entering a new course."
     "Aye, plotting new course." The young woman responded as she
laid in the new orders. The bridge could see O'Malley tense up as
she translated the new heading. She couldn't help a quick
questioning glance over her shoulder at the Captain.
     "Engage."
     All expected the Vigilante to make another sharp turn, but
the change wasn't noticeable.
     "There are now twelve Borg vessel converging on our previous
exit point." Someone offered.
     The Captain brought a chart up on his screen and on one of
O'Malley's screens.  "Ensign, here is our way out of the system."
Captain Anthony said "This is going to take some precision flying
on your part, I hope your ready."
     "I hope so too, Sir." Ensign O'Malley returned with a forced
smile.
     An object soon appeared in the middle of the main view
screen.
     Commander Tarva leaned forward looking at the image on the
screen.  "It's one of the outposts?"
     "Correct," Captain Anthony said he then pointed to the
diagram on his monitor "here" he pointed to an outer section of
the super-structure.  "We can take the Vigilante through here and
avoid the force field."
     "Sir?" Tarva said quietly "Are you sure we can make it at
speed?"
     "We're going to have to, aren't we." The Captain returned in
the same hushed tone.
     "Reading activity at the outpost." Ensign O'Malley reported.
"There are Borg ships deploying from the station."
     "Steady as she goes." Captain Anthony said "Maintain course.
What's our ETA?"
     S'Erlet spoke up "Sir, our ETA to the outpost is three
minutes fifty seconds...mark."
     "Thank you." Anthony then turned back to O'Malley "At
precisely one minute, thirty seconds from structure begin evasive
maneuvers Diago-Alpha."
     "Diago-Alpha, aye Sir" O'Malley confirmed.
     Commander Tarva then turned to Commander Norton "Prepare
Counter Measures for release at initiation of maneuver."
     "Working on it." Norton replied as quickly entered orders
into his console.  "If the resitron tracking is as sensitive as I
think, I know just what we need."
     For the crew of the Vigilante time seemed to stand still.
All who didn't have duties to perform watched the image of the
Borg outpost rushing toward them.  Only the bridge crew knew of
the pending Diago-Alpha maneuvers.  To the rest it just seemed
they were rushing head first into the Lion's den.
     The ships deploying from the outpost formed a grid in front
of the structure and started heading toward them.  "Sir, S'Erlet
reported they are sweeping for us."
     "Thank you, Ensign." Captain Anthony replied then said
"Change evasive maneuvers to Diag-Beta, initiate on my mark."
     "Diag-Beta." O'Malley responded "Aye, Sir."

     On Captain Anthony's command the Vigilante started a series
of evasive maneuver's design.  First a series of low power photon
torpedoes were launched to detonate sequentially carrying the
signature of the Vigilante's momentum forward.  They also hoped
the explosions would overload the resitron receptors and help
blind the Borg for a few seconds as the Vigilante made its run
through the superstructure of the outpost.
     The Vigilante cut speed and made a series of sharp course
changes. The photon torpedoes continued to detonate along the
ship's former path.  The Vigilante dropped under the cubes and
was soon beyond the ships.  The Borg had immediately focused
their attention on the Vigilante's old path and the counter
measures.  The crew watched as their old flight path was filled
with energy charges and tractor beams from the Borg ships.
     "Nice job, Ensign." Anthony said "Now take us in."
     "Aye, Sir, starting final run now."  O'Malley replied.
     "Prepare to jump to warp as soon as we exit." Anthony told
the bridge.  "Evasive pattern Romeo-One."
     The Vigilante increased speed and headed toward the right
side of the structure.  The computer was given the task of
adjusting speed and direction based on the scans of other
outposts.  If this Outpost varied in design from the others, it
could be disaster for the Vigilante.  The ship weaved in, out and
around the surface structures of the station.  Every course
change and speed adjustment was predetermined from maps they made
of the  first Outpost and hopefully corrected on the fly from
incoming data.
     Approaching the final obstacle, the crew was ready to jump
to warp before being totally clear of the structure.  "Hold your
speed." the Captain said "If they can't see us on this side, we
don't want to give ourselves away by jumping too soon."
     It was a matter of seconds from clearing the last structure
to clearing the Station totally.  The few beats of time it took
to be free the station were an eternity.  The ship was barely
flexing when it flung them away from the Borg system at warp 9.
     "Any sign of pursuit?" Commander Tarva asked praying for a
negative reply.
     In response, the ship rocked hard to port and the lights
dimmed for an instant.
     "Continue evasive sequence."  Anthony said, then turned
toward Commander Norton "What's out there?"
     "We read two Borg cubes in the immediate area." Norton
replied, reading directly from reports on his screen.  "They are
holding warp nine and firing randomly in front of them."
     "Lets see them." Captain Anthony said turning toward the
main screen.
     "Stabilized rear view coming up now, Sir." Norton responded.
     The screen  showed two Borg ships that appeared to be
moving in a synchronized dance left and right, and up and down
across the screen.  The apparent movement was caused by the
Vigilante's evasive maneuvers.  Without computer stabilization,
the picture would have been a complete blur.
     "Why only two?" someone wondered aloud.

     A coded clearance appeared on Commander Tarva's screen from
the Captain. "Commander Norton have fire control target the
closest Cube.  Prepare delivery sequence Shelby-One."  She said
without turning her attention from the commands on her screen.
As second in command of the Vigilante Commander Tarva was given
many of the firing codes instead of the Captain.  It was an
attempt to decentralize command in case of capture.
     "Commander hold fire." the Captain said.  "Helm, increase
speed to warp nine point three."  Captain Anthony was hoping the
Vigilante could get away from the Borg without a fight.  He knew
they couldn't defeat the Borg and he wanted to avoid leaving the
system in a fire fight.
     Just as the Vigilante increased speed, Lieutenant S'Erlet
spoke up "Captain, no! They may be able ..."  The Vigilante shook
violently and lurched hard to port.
     As soon as the ship started to shake, Commander Tarva
started yelling, "Fire, Fire."
     The Vigilante released a stream of photon torpedoes directly
at the Borg ship behind them.  At the same time, they beamed
dozens of specially prepared torpedoes directly into the interior
of the ship.  The torpedoes fired at the cube had minimal effect
on the it, but served as a distraction.  The torpedoes were
beamed into strategic locations throughout the structure.
     The photon torpedoes exploded in a predefined pattern called
the Shelby Sequence.  Commander Shelby was one of he foremost
authorities on the Borg and had suggested that if their main
power conduits could be disrupted in exactly the right pattern,
it could create a feed-back resonance that would destroy the
ship.  The Borg immediately started experiencing trouble and
dropped out of warp.
     The Vigilante had trouble of its own and no one noticed when
one of their pursuers dropped light years behind them.  The star
ship had dropped its speed and spun wildly off course.
     "Maintain Warp." Captain Anthony yelled  "Continue evasive
maneuvers.  Engineering what's our status?"
     Tarva cross talked over the Captain, ordering the targeting
of the second cube.
     "We've sustained damage to warp nacelle One." came Commander
Dolittel's voice from engineering.
     "Unable to establish transporter lock on cube's interior."
Commander Norton reported, then added "Shields are at seventy
five percent.  Cloaking is operative."
     "Damage stableized." Dolittel echoed in the background.
     "Holding warp nine." helm reported over the commotion.
     "What the HELL happened!?" The Captain demanded.
     "Our increase in velocity registered on the Borg's motion
detectors and they were able to triangulate on us."  S'Erlet
reported speaking as quickly as he could.
     "Sir," Ensign O'Malley spoke up "I read ten Borg ships
headed in this direction at high warp, they will catch up with us
in five minutes."
     "Shiv."  Captain Anthony said loudly then started entering
new commands into his console.  "Helm, I'm entering a new
course."
     "Aye, Sir" came the simple reply.
     "Engage."
     The Vigilante immediately dropped out of warp and changed
its heading straight down.  For an instant, the ship continued on
its old course with saucer section pointing down.  The closer
cube was immediately light years beyond them with the other ships
also over shooting.
     The Vigilante used its acceleration advantage jumping
directly to warp 9.6.  This time they held a straight course
trying to put as much distance between themselves and the Borg as
possible.
     "Bridge," came Dolittel's voice from engineering.  "I don't
know if we can maintain this speed, the damaged nacelle might not
hold."
     "We won't have to for long."  The Captain replied "Prepare
for controlled worm hole.."  Before Anthony had finished
speaking, the Vigilante shudder and the lights flickered.
     "Sir we're losing speed." Ensign O'Malley reported.
     "Engineering," the Captain yelled at the intercom what's
going on down there?
     "We lost nacelle one,"  Dolittel reported  "nacelle two is
also off line."  Because of resonance and synchronization
problems, the warp nacelles could only be operated in matched
pairs.  "Recelebrating for two nacelle operation now."
     From the last maneuver, the Borg had become extremely strung
out and did not have a precise location of the Vigilante.  The
one ship in the area was able to zero in on the interference and
radiation being generated by the failing nacelle.  The ship
approached slowly, still unable to pin point the intruder.
     "All Stop." Captain Anthony commanded.
     "Initiate jamming." Tarva said as they watched the ship
approach.  The jamming devices were designed to blind the Borg
scanners and to mask the Borg link.
     The Vigilante drifted under the Borg ship as it passed
through the area.  The crew watched the Borg on the main view
screen in silence.  The ship passed beyond the Vigilante but was
still within jamming range when it turned back.
     Anthony signalled engineering. "Do we have full speed?"
     "We have full speed." came Dolittel's reply "But
acceleration will be effected slightly and we won't be able to
hold top speed indefinitely."
     "How about the controlled wormhole?" Tarva put in.
     "Aye, it is still operational." Dolittel returned.
     Approaching the Vigilante's position the Borg began an
intense off-frequency sensor sweep of the area.  The cube wasn't
heading directly toward the ship but would pass extremely close.
     "Prepare to jump to warp nine point six on my command."
Anthony told the crew.
     The Borg passed just beyond its closest point when the ship
came to a dead stop.  Sensors on the Vigilante told them the
whole area was under intense study from the Borg.
     The crew leaned forward watching the Borg closely.  Should
they wait and see if they passed on or jump now and hope to out
run them.
     "It can maintain nine point six just as well as we can."
Captain Anthony said to Commander Tarva when she looked at him
questioningly.  "Lets see if they pass on.  Helm be prepared for
warp if they get any closer."
     "Sir, I'm ready a power buildup in the closest face of the
Cube."  S'Erlet reported.
     "Get us out of here!" Anthony said.
     A tractor beam sprang from the Borg ship aimed directly at
the damaged nacelle.  The Vigilante jumped to warp nine point six
just in time to avoid the beam.  The Borg immediately took up
pursuit.
     "Prepare for  controlled worm hole." Anthony commanded.
"We've got to get out of here before they can triangulate in on
us again."
     The Vigilante rocked again as the Borg latched out with
their tractor beam.  The beam locked solidly on the deflector
shields around the disabled nacelle.
     "They've established a tractor Beam lock. We're dropping out
of warp."  Commander Norton reported.  "Targeting all weapons
now."
     "Fire at will."  Anthony said. "Get us out of here."
     For the first time ever the Vigilante's phasers fired in
anger.  The high powered phaser banks fired through a 'rippling'
effect in the cloaking and did heavy damage to the cube's
superstructure, but the tractor beam held tight.  At the same
time all of the Vigilante's torpedo delivery systems targeted the
cube.  The launched torpedoes were aimed at the source of the
tractor beam and at the sights that were taking damage from the
phasers.  The tractor beam area was heavily shielded and the
torpedoes did no significant damage.  Heavy damage continued to
be inflicted on the areas the phasers could reach, the beam held
tight.  Internally, torpedoes were beamed in but they couldn't
achieve the Shelby Sequence and were doing no noticeable damage.
     Another beam came from the Borg ship, this was the high
powered cutting beam.  It immediately struck the shields between
the top nacelles, next to the tractor beam.  The Vigilante
shuddered and lost power to many low priority systems as the
computer tried to maintain the shields.
     "Shields down to forty five percent."  Commander Norton
reported.
     "Disengage cloaking." Captain Anthony said "Save the energy,
they know we're here."
     "At current rate, shields will fail in five minutes."
Commander Norton said.
     "Sir," it was S'Erlet.
     "Yes" The Captain said quickly glance toward the young
Vulcan.
     "We may be able to escape when the shields fail."
     "Explain."
     "The Borg still haven't dealt with the Vigilante's hull
material.  Because of its energy absorbing nature the tractor
beam may not be as effective against the bare hull."
     The Captain looked at his security chief "What do you
think?"
     "Its a solid hypothesis based on current data." Norton said
"But the data is not conclusive."
     "What about the cutting beam?" Commander Tarva asked.
     "Oh," S'Erlet said almost nonchalantly "We'll take a direct
hit over Engine Room One."
     Tarva immediately signaled evacuation of Engine Room One and
emergency lock down of Engine Room Two.  All personnel were
evacuated from Engine Room One and all non essential personnel
from Engine Room Two.  The remaining personnel stayed in their
rough duty chairs which would automatically drop to safety in an
emergency.  They all knew this wouldn't happen, since if E.R. Two
failed, there would be no safety.
     "Prepare to drop shields." Anthony commanded.  "Helm and
Engineering be ready for warp as soon as we cut the rear
shields."
     Captain Anthony sat back and braced himself.  He could sense
the rest of the Bridge crew and the ship tense up as the lights
dimmed again from the power strain of the two beams.
     Phaser and torpedo fire continued to pour from the Vigilante
but was having considerably less of an effect.  When the
Vigilante dropped it's rear shields its lights seemed to brighten
for an instant.  Immediately, however, the cutting beam hit the
craft amid ships near the saucer section.  Much of the energy was
dissipated by the hull, but Engine Room One was  still engulfed
in fire and explosions.
     The Borg tractor beam was much less focused and needed more
time to adjust to the new target.  This was all the Vigilante
needed and it was instantly out of sight.  Borg being as single
minded as they are immediately took off after the strange little
ship.
     Commander Dolittel and several technicians worked feverishly
in the engine room control center that over looked both areas.
The evacuated Engine Room One was engulfed in flame and high
power electrical discharges the instant the Borg struck the ship.
Most functions had already been diverted to Engine Room Two, but
the Vigilante still felt a massive power loss from the damage.
     Seconds before the strike, Commander Dolittel had closed the
blast shields between the control room and Engine Room One.
Through failing monitors, he watched one of the two most advanced
engine rooms in Star Fleet burn.
     Now they had another problem, they had started shutting down
the ALPHA warp core as soon as the evacuation was ordered, but
there hadn't been nearly enough time.  The team was doing all
they could to release the energy building up in the damaged
coils, but they knew it was only a matter of minutes before a
total breach.
     Sirens howled around him as Commander Dolittel signaled the
bridge.  "We have less then two minutes before warp core breach."
he reported.  "Prepare for ejection of ALPHA warp core and anti-
matter pods."
     Dolittel then glanced at the stats for BETA core, it was
pushing 98% capacity.  Continuing work on the ejection he
signaled the bridge with the stats for the BETA core and the
count down for the ejection of ALPHA core.

     10...9...
     The Vigilante held warp eight and the bridge crew watched
the countdown for the ejection of ALPHA core.
     .8...7...
     They watched the Borg gaining on them and knew they had only
one card left to play.
     .6...5...
     "Prepare for controlled worm hole." Anthony yelled.
     .4...3...
     Explosive charges released the ALPHA Core exterior hull
plates from the Vigilante.
     .2...1...
     The plates didn't have time to separate from the ship when
they were blown away from the much larger explosions expelling
ALPHA core and its anti-matter pods.
     The ship rocked from the radical maneuver but the maintained
power thanks to the BETA core.  The picture of the approaching
Borg ship was soon obliterated by the exploding warp core.  All
silently hoped the cube would be destroyed or disabled by the
explosion, but it quickly emerged from the cloud unscathed.
     "Bridge, Dolittel here." came a voice over the intercom.
     "Commander," Anthony called back "do we have the controlled
wormhole?"
     "Sir, it's a mess down here." Dolittel returned.  "There's
no way we can implement a worm hole and have any control over
it."
     "I read five more Borg ship closing fast." S'Erlet reported
in the background.
     "I don't care about control!" Anthony yelled at the bearded
face on his monitor.  "Get us out of here, now."
     The nearest Borg ship was close enough to fire on the
Vigilante but had sustained sufficient damage to effect its
targeting systems.  The first bursts of energy missed the
Vigilante, but they would use the misses to adjust their
sighting.
     Ensign O'Malley had been trying to run setup routines on the
Worm Hole console next to her but was getting no response.
Suddenly the ship was filled with a loud siren that none
recognized at first.  It was the ten second warning for the
wormhole.
     Dolittel had to over ride every safety precaution built into
the controlled wormhole, but that was easy working at the
engineering main console.  The Captain didn't seem to care were
they went, as long as it was away from here, and Dolittel quite
agreed.  Strapping himself into his rough duty seat, he looked
out into the engine room and watched his crew scramble for their
own chairs.
     "God, I hope they make it." he thought to himself, then
frowned.  "God I hope WE make it."

     They hit a brick wall, or at least if felt like it.  Captain
Anthony wasn't sure what happened.  Everything flew at him and he
felt himself crush into his chair.  The bridge wrapped around him
then began to spiral in front of him.  It looked like a long
tunnel with the view screen and stars at the far end.  The
tunneling felt like it was drilling into his hole body.  Then it
was through him and he felt like he would be blown apart.

     When the Vigilante purposely breached the alignments of its
warp coils, the pursuing Borg ship was extremely close.  The
artificial wormhole created by the breach sucked the large Borg
ship into its starship sized corridor.  The Cube collapsed like
water flowing through a funnel.

----------

     Pain surged through everybody on the Vigilante.  They felt
like every blood vessel their bodies had exploded. Captain
Anthony gasped for breath and fumbled to release himself from his
restraints.  The Bridge was almost black except for faint red
emergency lighting.  The Wormhole control systems had emergency
power cut offs in case accidents, but they too may have been
disabled to implement maneuver.
     Captain Anthony felt extremely light headed, but didn't know
if it was from injuries or from loss of gravity.  When he got the
restraints removed and tried to stand, it felt like the seat just
dropped away from him.  He wasn't in free fall, but gravity was
minimal.
     "Bridge to engineering." The Captain said looking around the
bridge.  "What's our status?"  The bridge crew was slowly gaining
consciousness.  Debris hung from the ceiling and littered the
deck.
     "Bridge to Engineering, report."  Anthony tried again.
     There was still no response.  Captain Anthony made it one of
the Bridge engineering stations and tried to run some
diagnostics.
     "Bridge to any station, report." came Commander Tarva's
voice from behind Anthony.
     The Captain looked back at his First Officer, he had
neglected his bridge crew knowing the status of the ship was more
important then any one of them.  The short Kalonian was working
herself free of the restraints and trying to raise the rest of
the ship at the same time.
     The diagnostics didn't look good, they had minimal power,
and it looked the safety over rides on the worm hole had totally
shut down the BETA warp core.
     "This isn't good." Captain Anthony said softly.
     Other Bridge crew were slowly gaining consciousness.
Commander Tarva was able to raise several sections of the
Vigilante, but not Engineering.
     "Were are we?" Anthony said, "Did we get away from the
Borg?"
     As if in answer to his question, the Vigilante rocked with a
great THUD.  The whole crew scrambled for the support and looked
at each other trying not show the fear they we feeling.  The ship
rocked again.
     "What is it?" Antony demand "Are we under attack?"
     The crew tried every station for answers but none responded.
The power loss was total for external sensors.  When the ship
rocked a third time, Captain Anthony and Commander Tarva both
scrambled for the command room.  After prying the door open, they
had to contend with the blast shields.  There were manual
controls, but they were not designed for emergencies, only
maintenance.
     After getting one shield half open they had a small area
looking across the rear of the ship.  The Vigilante floated in
blackness.  The few pin points of light from distant stars
weren't enough to tell them what was out there.
     "We have contact with the drop bays." Anthony said.
     "Yes, Sir." Tarva replied.
     "Tell them to turn on the emergency landing beacons, that
might give us enough light to see what out there." Another
thudding sound echoed through the ship.
     "Commander Kartang reports they have about a minutes worth
of battery power for you." Tarva report from here large
communicator.
     "That should be plenty."  Anthony said.
     Tarva put the communicator away bring out a tri-corder and
leaned down to look out the window with the Captain.  In such an
absence of light even the smallest amount can seem like a sun
rise.  Straight back, light suddenly came up from where the hull
dropped off to the shuttle bays.
     Captain Anthony and Commander Tarva grimaced at what they
saw first. To their right, the hull was scorched black and cracks
radiated from the center of the strike.  The upper port nacelle
had a large hole blown in the front and was shattered down the
side.  Wires and debris dangled from it.
     At first they saw no sign of what was hitting the Vigilante,
finally they saw a large chunk of debris slowly float out of the
darkness and glance of the side of the ship.  With the hit, a
dull THUD echoed through the starship.  Soon after they were hit,
the lights from the shuttle bay faded and went out.
     "Did you get it?" Anthony asked.
     "Yes, Sir." Tarva replied holding up the tri-corder show a
clear picture of the object that had just struck the ship.
     The two headed for the Bridge and heard the computers begin
to come back on line.  Tarva went straight to S'Erlet to help
with identifying the debris and Captain Anthony tried signalling
engineering again.
     The intercom was filled with static, a step forward, then a
voice broke though. ".ridge, this is Comm....Dolit...damage from
worm........casualties.  Will have some..ower on line
in....minutes."  Dolittel was speaking quickly to get the message
through before communication was lost again.
     Captain Anthony turned to one of the technicians nearby get
down there and find out what exactly is our status."  He then
turned to someone else, "Try to set up a computer link with
engineering, maybe we can get some information that way."
     "Can anybody tell me where we are yet?" Anthony said looking
around at the whole bridge.
     Ensign O'Malley spoke up. "Sir, I have established a link
with Stellar Cartography we are working on our location now.
With the main computers still down, it may take awhile."
     "OK, Ensign, keep working on it."
     "Sir." It was Commander Tarva.
     "Yes, Commander.
     "We've tentatively identified the debris we saw." Tarva
reported.
     "What is it?" the Captain asked he figured it was from some
part of the Vigilante he couldn't see.
     "The piece I recorded is a fragment of a Borg ship." Tarva
reported.  "We've also enhanced the pictures to show more of the
space around us."
     Tarva then showed Captain Anthony the tri-corder's screen.
It showed that the Vigilante was floating in a cloud of debris.
     "Apparently," S'Erlet offered "The cube followed us through
the worm hole and was torn apart in the process."
     The Captain looked at the picture and smiled "I guess it
didn't fit."
     The ship rocked again from another strike.
     "If we don't get the shields back up soon, that damned Borg
ship may still be the end of us."  Anthony said in frustration.
     At that, the main lights came up and everyone suddenly felt
much less light headed.
     "Bridge, this is Engineering." came Commander Dolittel's
voice over the intercom.
     "Go ahead, Commander." Tarva replied.
     "We have main power back on line and shields at eight
percent.  We've sustained major damage to all drive systems but
should be able to repair most of it." Dolittel reported.  "We are
currently working on getting the impulse drives back on line so
we get some maneuverability back."
     "What about the warp drives."  Tarva asked.
     "It's hard to say, Commander.  We should be able to get
nacelles three and four on line, but not at full capacity.  Top
speed will probably be around warp seven and top sustainable
speed around warp five."
     "How about the controlled worm hole" the Captain asked
dryly.
     "Sir," Commander Dolittel returned.  "that last jump  is
about as controlled as it gets."
     "No control on the worm hole and no high warp capability."
Captain Anthony summarized.  "I hope we landed somewhere near the
Federation, or else it could be a very long ride home."
     Ensign O'Malley looked up from her console with a glazed
look in her eyes.  "Sir we have determined our present location.
We are on the far side of the Gamma quadrant."
     "The Gamma Quadrant?" Tarva asked in disbelief.
     "We would have had to go right through the Alpha quadrant to
get here."  someone said.
     "Sir," S'Erlet offered. "At high warp, the Gamma quadrant is
eighty years from Federation space."
     "Thank you Lieutenant, I know." Captain Anthony said as he
dropped heavily into his chair,  "I know."




                You who find us in this place,
                Have you pity in your breast
                Let us in our last embrace,
                Under earth sun-hallowed rest.
                Night's a claw upon my brain:
                Oh, to see the Sun again.
                       "Sunshine"
                         Robert W. Service

 